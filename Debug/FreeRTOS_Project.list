
FreeRTOS_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a720  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800a9c0  0800a9c0  0000b9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ab44  0800ab44  0000bb44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ab4c  0800ab4c  0000bb4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ab50  0800ab50  0000bb50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800ab54  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800abb8  0000c064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800ac18  0000c0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005214  24000124  0800ac78  0000c124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24005338  0800ac78  0000c338  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c124  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029501  00000000  00000000  0000c152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000469a  00000000  00000000  00035653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d18  00000000  00000000  00039cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016af  00000000  00000000  0003ba08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000512c  00000000  00000000  0003d0b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002381d  00000000  00000000  000421e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017501b  00000000  00000000  00065a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001daa1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008064  00000000  00000000  001daa60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001e2ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a9a8 	.word	0x0800a9a8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800a9a8 	.word	0x0800a9a8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fe5a 	bl	800129c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f85c 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 f9a4 	bl	8000938 <MX_GPIO_Init>
  MX_ETH_Init();
 80005f0:	f000 f8d8 	bl	80007a4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005f4:	f000 f922 	bl	800083c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f8:	f000 f96c 	bl	80008d4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005fc:	f006 fd50 	bl	80070a0 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of uartMutex */
  uartMutexHandle = osMutexNew(&uartMutex_attributes);
 8000600:	4818      	ldr	r0, [pc, #96]	@ (8000664 <main+0x84>)
 8000602:	f006 fe44 	bl	800728e <osMutexNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a17      	ldr	r2, [pc, #92]	@ (8000668 <main+0x88>)
 800060a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of ledQueue */
  ledQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &ledQueue_attributes);
 800060c:	4a17      	ldr	r2, [pc, #92]	@ (800066c <main+0x8c>)
 800060e:	2101      	movs	r1, #1
 8000610:	2010      	movs	r0, #16
 8000612:	f006 ff4a 	bl	80074aa <osMessageQueueNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a15      	ldr	r2, [pc, #84]	@ (8000670 <main+0x90>)
 800061a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800061c:	4a15      	ldr	r2, [pc, #84]	@ (8000674 <main+0x94>)
 800061e:	2100      	movs	r1, #0
 8000620:	4815      	ldr	r0, [pc, #84]	@ (8000678 <main+0x98>)
 8000622:	f006 fd87 	bl	8007134 <osThreadNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a14      	ldr	r2, [pc, #80]	@ (800067c <main+0x9c>)
 800062a:	6013      	str	r3, [r2, #0]

  /* creation of LedGreenTask */
  LedGreenTaskHandle = osThreadNew(StartLedGreenTask, NULL, &LedGreenTask_attributes);
 800062c:	4a14      	ldr	r2, [pc, #80]	@ (8000680 <main+0xa0>)
 800062e:	2100      	movs	r1, #0
 8000630:	4814      	ldr	r0, [pc, #80]	@ (8000684 <main+0xa4>)
 8000632:	f006 fd7f 	bl	8007134 <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a13      	ldr	r2, [pc, #76]	@ (8000688 <main+0xa8>)
 800063a:	6013      	str	r3, [r2, #0]

  /* creation of LedYellowTask */
  LedYellowTaskHandle = osThreadNew(StartLedYellowTask, NULL, &LedYellowTask_attributes);
 800063c:	4a13      	ldr	r2, [pc, #76]	@ (800068c <main+0xac>)
 800063e:	2100      	movs	r1, #0
 8000640:	4813      	ldr	r0, [pc, #76]	@ (8000690 <main+0xb0>)
 8000642:	f006 fd77 	bl	8007134 <osThreadNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a12      	ldr	r2, [pc, #72]	@ (8000694 <main+0xb4>)
 800064a:	6013      	str	r3, [r2, #0]

  /* creation of buttonTask */
  buttonTaskHandle = osThreadNew(StartButtonTask, NULL, &buttonTask_attributes);
 800064c:	4a12      	ldr	r2, [pc, #72]	@ (8000698 <main+0xb8>)
 800064e:	2100      	movs	r1, #0
 8000650:	4812      	ldr	r0, [pc, #72]	@ (800069c <main+0xbc>)
 8000652:	f006 fd6f 	bl	8007134 <osThreadNew>
 8000656:	4603      	mov	r3, r0
 8000658:	4a11      	ldr	r2, [pc, #68]	@ (80006a0 <main+0xc0>)
 800065a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800065c:	f006 fd44 	bl	80070e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <main+0x80>
 8000664:	0800aafc 	.word	0x0800aafc
 8000668:	240007b4 	.word	0x240007b4
 800066c:	0800aae4 	.word	0x0800aae4
 8000670:	240007b0 	.word	0x240007b0
 8000674:	0800aa54 	.word	0x0800aa54
 8000678:	08000af1 	.word	0x08000af1
 800067c:	240007a0 	.word	0x240007a0
 8000680:	0800aa78 	.word	0x0800aa78
 8000684:	08000b01 	.word	0x08000b01
 8000688:	240007a4 	.word	0x240007a4
 800068c:	0800aa9c 	.word	0x0800aa9c
 8000690:	08000b7d 	.word	0x08000b7d
 8000694:	240007a8 	.word	0x240007a8
 8000698:	0800aac0 	.word	0x0800aac0
 800069c:	08000bfd 	.word	0x08000bfd
 80006a0:	240007ac 	.word	0x240007ac

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b09c      	sub	sp, #112	@ 0x70
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ae:	224c      	movs	r2, #76	@ 0x4c
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f00a f890 	bl	800a7d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2220      	movs	r2, #32
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f00a f88a 	bl	800a7d8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006c4:	2002      	movs	r0, #2
 80006c6:	f001 fec9 	bl	800245c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006ca:	2300      	movs	r3, #0
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	4b33      	ldr	r3, [pc, #204]	@ (800079c <SystemClock_Config+0xf8>)
 80006d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006d2:	4a32      	ldr	r2, [pc, #200]	@ (800079c <SystemClock_Config+0xf8>)
 80006d4:	f023 0301 	bic.w	r3, r3, #1
 80006d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80006da:	4b30      	ldr	r3, [pc, #192]	@ (800079c <SystemClock_Config+0xf8>)
 80006dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	4b2e      	ldr	r3, [pc, #184]	@ (80007a0 <SystemClock_Config+0xfc>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006ec:	4a2c      	ldr	r2, [pc, #176]	@ (80007a0 <SystemClock_Config+0xfc>)
 80006ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b2a      	ldr	r3, [pc, #168]	@ (80007a0 <SystemClock_Config+0xfc>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000700:	bf00      	nop
 8000702:	4b27      	ldr	r3, [pc, #156]	@ (80007a0 <SystemClock_Config+0xfc>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800070a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800070e:	d1f8      	bne.n	8000702 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000710:	2303      	movs	r3, #3
 8000712:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000714:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000718:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800071a:	2301      	movs	r3, #1
 800071c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071e:	2340      	movs	r3, #64	@ 0x40
 8000720:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000722:	2302      	movs	r3, #2
 8000724:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000726:	2302      	movs	r3, #2
 8000728:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800072a:	2301      	movs	r3, #1
 800072c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800072e:	2318      	movs	r3, #24
 8000730:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000732:	2302      	movs	r3, #2
 8000734:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000736:	2304      	movs	r3, #4
 8000738:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800073a:	2302      	movs	r3, #2
 800073c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800073e:	230c      	movs	r3, #12
 8000740:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000742:	2300      	movs	r3, #0
 8000744:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800074e:	4618      	mov	r0, r3
 8000750:	f001 fece 	bl	80024f0 <HAL_RCC_OscConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800075a:	f000 fa83 	bl	8000c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075e:	233f      	movs	r3, #63	@ 0x3f
 8000760:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2101      	movs	r1, #1
 8000782:	4618      	mov	r0, r3
 8000784:	f002 fb0e 	bl	8002da4 <HAL_RCC_ClockConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800078e:	f000 fa69 	bl	8000c64 <Error_Handler>
  }
}
 8000792:	bf00      	nop
 8000794:	3770      	adds	r7, #112	@ 0x70
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	58000400 	.word	0x58000400
 80007a0:	58024800 	.word	0x58024800

080007a4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000824 <MX_ETH_Init+0x80>)
 80007aa:	4a1f      	ldr	r2, [pc, #124]	@ (8000828 <MX_ETH_Init+0x84>)
 80007ac:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007ae:	4b1f      	ldr	r3, [pc, #124]	@ (800082c <MX_ETH_Init+0x88>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007b4:	4b1d      	ldr	r3, [pc, #116]	@ (800082c <MX_ETH_Init+0x88>)
 80007b6:	2280      	movs	r2, #128	@ 0x80
 80007b8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007ba:	4b1c      	ldr	r3, [pc, #112]	@ (800082c <MX_ETH_Init+0x88>)
 80007bc:	22e1      	movs	r2, #225	@ 0xe1
 80007be:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007c0:	4b1a      	ldr	r3, [pc, #104]	@ (800082c <MX_ETH_Init+0x88>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007c6:	4b19      	ldr	r3, [pc, #100]	@ (800082c <MX_ETH_Init+0x88>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007cc:	4b17      	ldr	r3, [pc, #92]	@ (800082c <MX_ETH_Init+0x88>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007d2:	4b14      	ldr	r3, [pc, #80]	@ (8000824 <MX_ETH_Init+0x80>)
 80007d4:	4a15      	ldr	r2, [pc, #84]	@ (800082c <MX_ETH_Init+0x88>)
 80007d6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007d8:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <MX_ETH_Init+0x80>)
 80007da:	2201      	movs	r2, #1
 80007dc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007de:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <MX_ETH_Init+0x80>)
 80007e0:	4a13      	ldr	r2, [pc, #76]	@ (8000830 <MX_ETH_Init+0x8c>)
 80007e2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <MX_ETH_Init+0x80>)
 80007e6:	4a13      	ldr	r2, [pc, #76]	@ (8000834 <MX_ETH_Init+0x90>)
 80007e8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_ETH_Init+0x80>)
 80007ec:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80007f0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007f2:	480c      	ldr	r0, [pc, #48]	@ (8000824 <MX_ETH_Init+0x80>)
 80007f4:	f000 fed2 	bl	800159c <HAL_ETH_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80007fe:	f000 fa31 	bl	8000c64 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000802:	2238      	movs	r2, #56	@ 0x38
 8000804:	2100      	movs	r1, #0
 8000806:	480c      	ldr	r0, [pc, #48]	@ (8000838 <MX_ETH_Init+0x94>)
 8000808:	f009 ffe6 	bl	800a7d8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800080c:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <MX_ETH_Init+0x94>)
 800080e:	2221      	movs	r2, #33	@ 0x21
 8000810:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000812:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <MX_ETH_Init+0x94>)
 8000814:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000818:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800081a:	4b07      	ldr	r3, [pc, #28]	@ (8000838 <MX_ETH_Init+0x94>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	24000178 	.word	0x24000178
 8000828:	40028000 	.word	0x40028000
 800082c:	240007b8 	.word	0x240007b8
 8000830:	240000c4 	.word	0x240000c4
 8000834:	24000064 	.word	0x24000064
 8000838:	24000140 	.word	0x24000140

0800083c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000840:	4b22      	ldr	r3, [pc, #136]	@ (80008cc <MX_USART3_UART_Init+0x90>)
 8000842:	4a23      	ldr	r2, [pc, #140]	@ (80008d0 <MX_USART3_UART_Init+0x94>)
 8000844:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000846:	4b21      	ldr	r3, [pc, #132]	@ (80008cc <MX_USART3_UART_Init+0x90>)
 8000848:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800084c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800084e:	4b1f      	ldr	r3, [pc, #124]	@ (80008cc <MX_USART3_UART_Init+0x90>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000854:	4b1d      	ldr	r3, [pc, #116]	@ (80008cc <MX_USART3_UART_Init+0x90>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800085a:	4b1c      	ldr	r3, [pc, #112]	@ (80008cc <MX_USART3_UART_Init+0x90>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000860:	4b1a      	ldr	r3, [pc, #104]	@ (80008cc <MX_USART3_UART_Init+0x90>)
 8000862:	220c      	movs	r2, #12
 8000864:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000866:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <MX_USART3_UART_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800086c:	4b17      	ldr	r3, [pc, #92]	@ (80008cc <MX_USART3_UART_Init+0x90>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000872:	4b16      	ldr	r3, [pc, #88]	@ (80008cc <MX_USART3_UART_Init+0x90>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000878:	4b14      	ldr	r3, [pc, #80]	@ (80008cc <MX_USART3_UART_Init+0x90>)
 800087a:	2200      	movs	r2, #0
 800087c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800087e:	4b13      	ldr	r3, [pc, #76]	@ (80008cc <MX_USART3_UART_Init+0x90>)
 8000880:	2200      	movs	r2, #0
 8000882:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000884:	4811      	ldr	r0, [pc, #68]	@ (80008cc <MX_USART3_UART_Init+0x90>)
 8000886:	f004 ff55 	bl	8005734 <HAL_UART_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000890:	f000 f9e8 	bl	8000c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000894:	2100      	movs	r1, #0
 8000896:	480d      	ldr	r0, [pc, #52]	@ (80008cc <MX_USART3_UART_Init+0x90>)
 8000898:	f005 ffeb 	bl	8006872 <HAL_UARTEx_SetTxFifoThreshold>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008a2:	f000 f9df 	bl	8000c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a6:	2100      	movs	r1, #0
 80008a8:	4808      	ldr	r0, [pc, #32]	@ (80008cc <MX_USART3_UART_Init+0x90>)
 80008aa:	f006 f820 	bl	80068ee <HAL_UARTEx_SetRxFifoThreshold>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008b4:	f000 f9d6 	bl	8000c64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008b8:	4804      	ldr	r0, [pc, #16]	@ (80008cc <MX_USART3_UART_Init+0x90>)
 80008ba:	f005 ffa1 	bl	8006800 <HAL_UARTEx_DisableFifoMode>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008c4:	f000 f9ce 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	24000228 	.word	0x24000228
 80008d0:	40004800 	.word	0x40004800

080008d4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008d8:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008da:	4a16      	ldr	r2, [pc, #88]	@ (8000934 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80008dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80008de:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008e0:	2209      	movs	r2, #9
 80008e2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008e4:	4b12      	ldr	r3, [pc, #72]	@ (8000930 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008e6:	2202      	movs	r2, #2
 80008e8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008ea:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008f2:	2202      	movs	r2, #2
 80008f4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000904:	2200      	movs	r2, #0
 8000906:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000908:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800090a:	2201      	movs	r2, #1
 800090c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800090e:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000910:	2201      	movs	r2, #1
 8000912:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000916:	2200      	movs	r2, #0
 8000918:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	@ (8000930 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800091c:	f001 fc6d 	bl	80021fa <HAL_PCD_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000926:	f000 f99d 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	240002bc 	.word	0x240002bc
 8000934:	40080000 	.word	0x40080000

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08c      	sub	sp, #48	@ 0x30
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	4b62      	ldr	r3, [pc, #392]	@ (8000ad8 <MX_GPIO_Init+0x1a0>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000954:	4a60      	ldr	r2, [pc, #384]	@ (8000ad8 <MX_GPIO_Init+0x1a0>)
 8000956:	f043 0304 	orr.w	r3, r3, #4
 800095a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800095e:	4b5e      	ldr	r3, [pc, #376]	@ (8000ad8 <MX_GPIO_Init+0x1a0>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	61bb      	str	r3, [r7, #24]
 800096a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096c:	4b5a      	ldr	r3, [pc, #360]	@ (8000ad8 <MX_GPIO_Init+0x1a0>)
 800096e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000972:	4a59      	ldr	r2, [pc, #356]	@ (8000ad8 <MX_GPIO_Init+0x1a0>)
 8000974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000978:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800097c:	4b56      	ldr	r3, [pc, #344]	@ (8000ad8 <MX_GPIO_Init+0x1a0>)
 800097e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b53      	ldr	r3, [pc, #332]	@ (8000ad8 <MX_GPIO_Init+0x1a0>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000990:	4a51      	ldr	r2, [pc, #324]	@ (8000ad8 <MX_GPIO_Init+0x1a0>)
 8000992:	f043 0301 	orr.w	r3, r3, #1
 8000996:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800099a:	4b4f      	ldr	r3, [pc, #316]	@ (8000ad8 <MX_GPIO_Init+0x1a0>)
 800099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a8:	4b4b      	ldr	r3, [pc, #300]	@ (8000ad8 <MX_GPIO_Init+0x1a0>)
 80009aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ae:	4a4a      	ldr	r2, [pc, #296]	@ (8000ad8 <MX_GPIO_Init+0x1a0>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009b8:	4b47      	ldr	r3, [pc, #284]	@ (8000ad8 <MX_GPIO_Init+0x1a0>)
 80009ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c6:	4b44      	ldr	r3, [pc, #272]	@ (8000ad8 <MX_GPIO_Init+0x1a0>)
 80009c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009cc:	4a42      	ldr	r2, [pc, #264]	@ (8000ad8 <MX_GPIO_Init+0x1a0>)
 80009ce:	f043 0308 	orr.w	r3, r3, #8
 80009d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d6:	4b40      	ldr	r3, [pc, #256]	@ (8000ad8 <MX_GPIO_Init+0x1a0>)
 80009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009dc:	f003 0308 	and.w	r3, r3, #8
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e4:	4b3c      	ldr	r3, [pc, #240]	@ (8000ad8 <MX_GPIO_Init+0x1a0>)
 80009e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ea:	4a3b      	ldr	r2, [pc, #236]	@ (8000ad8 <MX_GPIO_Init+0x1a0>)
 80009ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f4:	4b38      	ldr	r3, [pc, #224]	@ (8000ad8 <MX_GPIO_Init+0x1a0>)
 80009f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a02:	4b35      	ldr	r3, [pc, #212]	@ (8000ad8 <MX_GPIO_Init+0x1a0>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a08:	4a33      	ldr	r2, [pc, #204]	@ (8000ad8 <MX_GPIO_Init+0x1a0>)
 8000a0a:	f043 0310 	orr.w	r3, r3, #16
 8000a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a12:	4b31      	ldr	r3, [pc, #196]	@ (8000ad8 <MX_GPIO_Init+0x1a0>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a18:	f003 0310 	and.w	r3, r3, #16
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000a26:	482d      	ldr	r0, [pc, #180]	@ (8000adc <MX_GPIO_Init+0x1a4>)
 8000a28:	f001 fbb4 	bl	8002194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a32:	482b      	ldr	r0, [pc, #172]	@ (8000ae0 <MX_GPIO_Init+0x1a8>)
 8000a34:	f001 fbae 	bl	8002194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2102      	movs	r1, #2
 8000a3c:	4829      	ldr	r0, [pc, #164]	@ (8000ae4 <MX_GPIO_Init+0x1ac>)
 8000a3e:	f001 fba9 	bl	8002194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a48:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	4823      	ldr	r0, [pc, #140]	@ (8000ae8 <MX_GPIO_Init+0x1b0>)
 8000a5a:	f001 f9d3 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a5e:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	4819      	ldr	r0, [pc, #100]	@ (8000adc <MX_GPIO_Init+0x1a4>)
 8000a78:	f001 f9c4 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000a7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4812      	ldr	r0, [pc, #72]	@ (8000ae0 <MX_GPIO_Init+0x1a8>)
 8000a96:	f001 f9b5 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000a9a:	2380      	movs	r3, #128	@ 0x80
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a9e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	480f      	ldr	r0, [pc, #60]	@ (8000aec <MX_GPIO_Init+0x1b4>)
 8000ab0:	f001 f9a8 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4806      	ldr	r0, [pc, #24]	@ (8000ae4 <MX_GPIO_Init+0x1ac>)
 8000acc:	f001 f99a 	bl	8001e04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad0:	bf00      	nop
 8000ad2:	3730      	adds	r7, #48	@ 0x30
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	58024400 	.word	0x58024400
 8000adc:	58020400 	.word	0x58020400
 8000ae0:	58020c00 	.word	0x58020c00
 8000ae4:	58021000 	.word	0x58021000
 8000ae8:	58020800 	.word	0x58020800
 8000aec:	58021800 	.word	0x58021800

08000af0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000af8:	2001      	movs	r0, #1
 8000afa:	f006 fbad 	bl	8007258 <osDelay>
 8000afe:	e7fb      	b.n	8000af8 <StartDefaultTask+0x8>

08000b00 <StartLedGreenTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedGreenTask */
void StartLedGreenTask(void *argument)
{
 8000b00:	b5b0      	push	{r4, r5, r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedGreenTask */
  /* Infinite loop */
  char msg[] = "Green LED is running\r\n";
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <StartLedGreenTask+0x6c>)
 8000b0a:	f107 0408 	add.w	r4, r7, #8
 8000b0e:	461d      	mov	r5, r3
 8000b10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b14:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b18:	6020      	str	r0, [r4, #0]
 8000b1a:	3404      	adds	r4, #4
 8000b1c:	8021      	strh	r1, [r4, #0]
 8000b1e:	3402      	adds	r4, #2
 8000b20:	0c0b      	lsrs	r3, r1, #16
 8000b22:	7023      	strb	r3, [r4, #0]
  for(;;)
  {
	  osMutexAcquire(uartMutexHandle, osWaitForever); //Take Mutuex or wait for ever
 8000b24:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <StartLedGreenTask+0x70>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f04f 31ff 	mov.w	r1, #4294967295
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f006 fc34 	bl	800739a <osMutexAcquire>
	  // Safely print the message
	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000b32:	f107 0308 	add.w	r3, r7, #8
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fbd2 	bl	80002e0 <strlen>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	f107 0108 	add.w	r1, r7, #8
 8000b44:	f04f 33ff 	mov.w	r3, #4294967295
 8000b48:	480a      	ldr	r0, [pc, #40]	@ (8000b74 <StartLedGreenTask+0x74>)
 8000b4a:	f004 fe43 	bl	80057d4 <HAL_UART_Transmit>
	  // Give the mutex back so other tasks can use the UART
	  osMutexRelease(uartMutexHandle);
 8000b4e:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <StartLedGreenTask+0x70>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f006 fc6c 	bl	8007430 <osMutexRelease>
	  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000b58:	2101      	movs	r1, #1
 8000b5a:	4807      	ldr	r0, [pc, #28]	@ (8000b78 <StartLedGreenTask+0x78>)
 8000b5c:	f001 fb33 	bl	80021c6 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8000b60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b64:	f006 fb78 	bl	8007258 <osDelay>
	  osMutexAcquire(uartMutexHandle, osWaitForever); //Take Mutuex or wait for ever
 8000b68:	bf00      	nop
 8000b6a:	e7db      	b.n	8000b24 <StartLedGreenTask+0x24>
 8000b6c:	0800aa10 	.word	0x0800aa10
 8000b70:	240007b4 	.word	0x240007b4
 8000b74:	24000228 	.word	0x24000228
 8000b78:	58020400 	.word	0x58020400

08000b7c <StartLedYellowTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedYellowTask */
void StartLedYellowTask(void *argument)
{
 8000b7c:	b5b0      	push	{r4, r5, r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedYellowTask */
	uint8_t received_msg;
	char msg[] = "Blue LED Toggled!\r\n";
 8000b84:	4b18      	ldr	r3, [pc, #96]	@ (8000be8 <StartLedYellowTask+0x6c>)
 8000b86:	f107 0408 	add.w	r4, r7, #8
 8000b8a:	461d      	mov	r5, r3
 8000b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b90:	682b      	ldr	r3, [r5, #0]
 8000b92:	6023      	str	r3, [r4, #0]
  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet(ledQueueHandle, &received_msg, NULL, osWaitForever);
 8000b94:	4b15      	ldr	r3, [pc, #84]	@ (8000bec <StartLedYellowTask+0x70>)
 8000b96:	6818      	ldr	r0, [r3, #0]
 8000b98:	f107 011f 	add.w	r1, r7, #31
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f006 fd55 	bl	8007650 <osMessageQueueGet>
	  // Take over mutex
	  osMutexAcquire(uartMutexHandle, osWaitForever);
 8000ba6:	4b12      	ldr	r3, [pc, #72]	@ (8000bf0 <StartLedYellowTask+0x74>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f04f 31ff 	mov.w	r1, #4294967295
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f006 fbf3 	bl	800739a <osMutexAcquire>
	  // Safely print the message
	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000bb4:	f107 0308 	add.w	r3, r7, #8
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fb91 	bl	80002e0 <strlen>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	f107 0108 	add.w	r1, r7, #8
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	480a      	ldr	r0, [pc, #40]	@ (8000bf4 <StartLedYellowTask+0x78>)
 8000bcc:	f004 fe02 	bl	80057d4 <HAL_UART_Transmit>
	  // Give mutex back
	  osMutexRelease(uartMutexHandle);
 8000bd0:	4b07      	ldr	r3, [pc, #28]	@ (8000bf0 <StartLedYellowTask+0x74>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f006 fc2b 	bl	8007430 <osMutexRelease>

	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000bda:	2102      	movs	r1, #2
 8000bdc:	4806      	ldr	r0, [pc, #24]	@ (8000bf8 <StartLedYellowTask+0x7c>)
 8000bde:	f001 faf2 	bl	80021c6 <HAL_GPIO_TogglePin>
	  osMessageQueueGet(ledQueueHandle, &received_msg, NULL, osWaitForever);
 8000be2:	bf00      	nop
 8000be4:	e7d6      	b.n	8000b94 <StartLedYellowTask+0x18>
 8000be6:	bf00      	nop
 8000be8:	0800aa28 	.word	0x0800aa28
 8000bec:	240007b0 	.word	0x240007b0
 8000bf0:	240007b4 	.word	0x240007b4
 8000bf4:	24000228 	.word	0x24000228
 8000bf8:	58021000 	.word	0x58021000

08000bfc <StartButtonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonTask */
void StartButtonTask(void *argument)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonTask */
	uint8_t msg_to_send = 1;
 8000c04:	2301      	movs	r3, #1
 8000c06:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
  for(;;)
  {
	  // Check if the blue user button is pressed.
	  	if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET)
 8000c08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c0c:	480a      	ldr	r0, [pc, #40]	@ (8000c38 <StartButtonTask+0x3c>)
 8000c0e:	f001 faa9 	bl	8002164 <HAL_GPIO_ReadPin>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d10a      	bne.n	8000c2e <StartButtonTask+0x32>
	  	{
	  		osMessageQueuePut(ledQueueHandle, &msg_to_send, 0U, 0U);
 8000c18:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <StartButtonTask+0x40>)
 8000c1a:	6818      	ldr	r0, [r3, #0]
 8000c1c:	f107 010f 	add.w	r1, r7, #15
 8000c20:	2300      	movs	r3, #0
 8000c22:	2200      	movs	r2, #0
 8000c24:	f006 fcb4 	bl	8007590 <osMessageQueuePut>
	  		osDelay(200);
 8000c28:	20c8      	movs	r0, #200	@ 0xc8
 8000c2a:	f006 fb15 	bl	8007258 <osDelay>
	  	}
	  	osDelay(20);
 8000c2e:	2014      	movs	r0, #20
 8000c30:	f006 fb12 	bl	8007258 <osDelay>
	  	if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET)
 8000c34:	e7e8      	b.n	8000c08 <StartButtonTask+0xc>
 8000c36:	bf00      	nop
 8000c38:	58020800 	.word	0x58020800
 8000c3c:	240007b0 	.word	0x240007b0

08000c40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a04      	ldr	r2, [pc, #16]	@ (8000c60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d101      	bne.n	8000c56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c52:	f000 fb5f 	bl	8001314 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40001000 	.word	0x40001000

08000c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c68:	b672      	cpsid	i
}
 8000c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <Error_Handler+0x8>

08000c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <HAL_MspInit+0x38>)
 8000c78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca8 <HAL_MspInit+0x38>)
 8000c7e:	f043 0302 	orr.w	r3, r3, #2
 8000c82:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c86:	4b08      	ldr	r3, [pc, #32]	@ (8000ca8 <HAL_MspInit+0x38>)
 8000c88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c8c:	f003 0302 	and.w	r3, r3, #2
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	210f      	movs	r1, #15
 8000c98:	f06f 0001 	mvn.w	r0, #1
 8000c9c:	f000 fc56 	bl	800154c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	58024400 	.word	0x58024400

08000cac <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08e      	sub	sp, #56	@ 0x38
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a59      	ldr	r2, [pc, #356]	@ (8000e30 <HAL_ETH_MspInit+0x184>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	f040 80ab 	bne.w	8000e26 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000cd0:	4b58      	ldr	r3, [pc, #352]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000cd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cd6:	4a57      	ldr	r2, [pc, #348]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000cd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cdc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ce0:	4b54      	ldr	r3, [pc, #336]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000ce2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ce6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cea:	623b      	str	r3, [r7, #32]
 8000cec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000cee:	4b51      	ldr	r3, [pc, #324]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cf4:	4a4f      	ldr	r2, [pc, #316]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000cf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000cfe:	4b4d      	ldr	r3, [pc, #308]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d08:	61fb      	str	r3, [r7, #28]
 8000d0a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d0c:	4b49      	ldr	r3, [pc, #292]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d12:	4a48      	ldr	r2, [pc, #288]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d18:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d1c:	4b45      	ldr	r3, [pc, #276]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d26:	61bb      	str	r3, [r7, #24]
 8000d28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2a:	4b42      	ldr	r3, [pc, #264]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d30:	4a40      	ldr	r2, [pc, #256]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d32:	f043 0304 	orr.w	r3, r3, #4
 8000d36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d40:	f003 0304 	and.w	r3, r3, #4
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d48:	4b3a      	ldr	r3, [pc, #232]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4e:	4a39      	ldr	r2, [pc, #228]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d58:	4b36      	ldr	r3, [pc, #216]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	4b33      	ldr	r3, [pc, #204]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6c:	4a31      	ldr	r2, [pc, #196]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d6e:	f043 0302 	orr.w	r3, r3, #2
 8000d72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d76:	4b2f      	ldr	r3, [pc, #188]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d84:	4b2b      	ldr	r3, [pc, #172]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8a:	4a2a      	ldr	r2, [pc, #168]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d94:	4b27      	ldr	r3, [pc, #156]	@ (8000e34 <HAL_ETH_MspInit+0x188>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000da2:	2332      	movs	r3, #50	@ 0x32
 8000da4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000db2:	230b      	movs	r3, #11
 8000db4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dba:	4619      	mov	r1, r3
 8000dbc:	481e      	ldr	r0, [pc, #120]	@ (8000e38 <HAL_ETH_MspInit+0x18c>)
 8000dbe:	f001 f821 	bl	8001e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000dc2:	2386      	movs	r3, #134	@ 0x86
 8000dc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd2:	230b      	movs	r3, #11
 8000dd4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4817      	ldr	r0, [pc, #92]	@ (8000e3c <HAL_ETH_MspInit+0x190>)
 8000dde:	f001 f811 	bl	8001e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000de2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000de6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000df4:	230b      	movs	r3, #11
 8000df6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4810      	ldr	r0, [pc, #64]	@ (8000e40 <HAL_ETH_MspInit+0x194>)
 8000e00:	f001 f800 	bl	8001e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e04:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000e08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e16:	230b      	movs	r3, #11
 8000e18:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4808      	ldr	r0, [pc, #32]	@ (8000e44 <HAL_ETH_MspInit+0x198>)
 8000e22:	f000 ffef 	bl	8001e04 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000e26:	bf00      	nop
 8000e28:	3738      	adds	r7, #56	@ 0x38
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40028000 	.word	0x40028000
 8000e34:	58024400 	.word	0x58024400
 8000e38:	58020800 	.word	0x58020800
 8000e3c:	58020000 	.word	0x58020000
 8000e40:	58020400 	.word	0x58020400
 8000e44:	58021800 	.word	0x58021800

08000e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b0ba      	sub	sp, #232	@ 0xe8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e60:	f107 0310 	add.w	r3, r7, #16
 8000e64:	22c0      	movs	r2, #192	@ 0xc0
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f009 fcb5 	bl	800a7d8 <memset>
  if(huart->Instance==USART3)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a27      	ldr	r2, [pc, #156]	@ (8000f10 <HAL_UART_MspInit+0xc8>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d146      	bne.n	8000f06 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e78:	f04f 0202 	mov.w	r2, #2
 8000e7c:	f04f 0300 	mov.w	r3, #0
 8000e80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e8a:	f107 0310 	add.w	r3, r7, #16
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f002 fb56 	bl	8003540 <HAL_RCCEx_PeriphCLKConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e9a:	f7ff fee3 	bl	8000c64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f14 <HAL_UART_MspInit+0xcc>)
 8000ea0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f14 <HAL_UART_MspInit+0xcc>)
 8000ea6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000eaa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000eae:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <HAL_UART_MspInit+0xcc>)
 8000eb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000eb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ebc:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <HAL_UART_MspInit+0xcc>)
 8000ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec2:	4a14      	ldr	r2, [pc, #80]	@ (8000f14 <HAL_UART_MspInit+0xcc>)
 8000ec4:	f043 0308 	orr.w	r3, r3, #8
 8000ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ecc:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <HAL_UART_MspInit+0xcc>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed2:	f003 0308 	and.w	r3, r3, #8
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000eda:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ede:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ef4:	2307      	movs	r3, #7
 8000ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000efa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <HAL_UART_MspInit+0xd0>)
 8000f02:	f000 ff7f 	bl	8001e04 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000f06:	bf00      	nop
 8000f08:	37e8      	adds	r7, #232	@ 0xe8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40004800 	.word	0x40004800
 8000f14:	58024400 	.word	0x58024400
 8000f18:	58020c00 	.word	0x58020c00

08000f1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b0ba      	sub	sp, #232	@ 0xe8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	22c0      	movs	r2, #192	@ 0xc0
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f009 fc4b 	bl	800a7d8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a30      	ldr	r2, [pc, #192]	@ (8001008 <HAL_PCD_MspInit+0xec>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d159      	bne.n	8001000 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f4c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f58:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f60:	f107 0310 	add.w	r3, r7, #16
 8000f64:	4618      	mov	r0, r3
 8000f66:	f002 faeb 	bl	8003540 <HAL_RCCEx_PeriphCLKConfig>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000f70:	f7ff fe78 	bl	8000c64 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000f74:	f001 faac 	bl	80024d0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f78:	4b24      	ldr	r3, [pc, #144]	@ (800100c <HAL_PCD_MspInit+0xf0>)
 8000f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7e:	4a23      	ldr	r2, [pc, #140]	@ (800100c <HAL_PCD_MspInit+0xf0>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f88:	4b20      	ldr	r3, [pc, #128]	@ (800100c <HAL_PCD_MspInit+0xf0>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f96:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000f9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000fb0:	230a      	movs	r3, #10
 8000fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4814      	ldr	r0, [pc, #80]	@ (8001010 <HAL_PCD_MspInit+0xf4>)
 8000fbe:	f000 ff21 	bl	8001e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fda:	4619      	mov	r1, r3
 8000fdc:	480c      	ldr	r0, [pc, #48]	@ (8001010 <HAL_PCD_MspInit+0xf4>)
 8000fde:	f000 ff11 	bl	8001e04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <HAL_PCD_MspInit+0xf0>)
 8000fe4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fe8:	4a08      	ldr	r2, [pc, #32]	@ (800100c <HAL_PCD_MspInit+0xf0>)
 8000fea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000fee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ff2:	4b06      	ldr	r3, [pc, #24]	@ (800100c <HAL_PCD_MspInit+0xf0>)
 8000ff4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ff8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001000:	bf00      	nop
 8001002:	37e8      	adds	r7, #232	@ 0xe8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40080000 	.word	0x40080000
 800100c:	58024400 	.word	0x58024400
 8001010:	58020000 	.word	0x58020000

08001014 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b090      	sub	sp, #64	@ 0x40
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b0f      	cmp	r3, #15
 8001020:	d827      	bhi.n	8001072 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001022:	2200      	movs	r2, #0
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	2036      	movs	r0, #54	@ 0x36
 8001028:	f000 fa90 	bl	800154c <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800102c:	2036      	movs	r0, #54	@ 0x36
 800102e:	f000 faa7 	bl	8001580 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001032:	4a29      	ldr	r2, [pc, #164]	@ (80010d8 <HAL_InitTick+0xc4>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001038:	4b28      	ldr	r3, [pc, #160]	@ (80010dc <HAL_InitTick+0xc8>)
 800103a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800103e:	4a27      	ldr	r2, [pc, #156]	@ (80010dc <HAL_InitTick+0xc8>)
 8001040:	f043 0310 	orr.w	r3, r3, #16
 8001044:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001048:	4b24      	ldr	r3, [pc, #144]	@ (80010dc <HAL_InitTick+0xc8>)
 800104a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800104e:	f003 0310 	and.w	r3, r3, #16
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001056:	f107 0210 	add.w	r2, r7, #16
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f002 fa2b 	bl	80034bc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001068:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800106a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800106c:	2b00      	cmp	r3, #0
 800106e:	d106      	bne.n	800107e <HAL_InitTick+0x6a>
 8001070:	e001      	b.n	8001076 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e02b      	b.n	80010ce <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001076:	f002 f9f5 	bl	8003464 <HAL_RCC_GetPCLK1Freq>
 800107a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800107c:	e004      	b.n	8001088 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800107e:	f002 f9f1 	bl	8003464 <HAL_RCC_GetPCLK1Freq>
 8001082:	4603      	mov	r3, r0
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800108a:	4a15      	ldr	r2, [pc, #84]	@ (80010e0 <HAL_InitTick+0xcc>)
 800108c:	fba2 2303 	umull	r2, r3, r2, r3
 8001090:	0c9b      	lsrs	r3, r3, #18
 8001092:	3b01      	subs	r3, #1
 8001094:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001096:	4b13      	ldr	r3, [pc, #76]	@ (80010e4 <HAL_InitTick+0xd0>)
 8001098:	4a13      	ldr	r2, [pc, #76]	@ (80010e8 <HAL_InitTick+0xd4>)
 800109a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800109c:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <HAL_InitTick+0xd0>)
 800109e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010a2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010a4:	4a0f      	ldr	r2, [pc, #60]	@ (80010e4 <HAL_InitTick+0xd0>)
 80010a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010a8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	@ (80010e4 <HAL_InitTick+0xd0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <HAL_InitTick+0xd0>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80010b6:	480b      	ldr	r0, [pc, #44]	@ (80010e4 <HAL_InitTick+0xd0>)
 80010b8:	f004 f86e 	bl	8005198 <HAL_TIM_Base_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d104      	bne.n	80010cc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80010c2:	4808      	ldr	r0, [pc, #32]	@ (80010e4 <HAL_InitTick+0xd0>)
 80010c4:	f004 f8ca 	bl	800525c <HAL_TIM_Base_Start_IT>
 80010c8:	4603      	mov	r3, r0
 80010ca:	e000      	b.n	80010ce <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3740      	adds	r7, #64	@ 0x40
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	24000008 	.word	0x24000008
 80010dc:	58024400 	.word	0x58024400
 80010e0:	431bde83 	.word	0x431bde83
 80010e4:	240007c0 	.word	0x240007c0
 80010e8:	40001000 	.word	0x40001000

080010ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <NMI_Handler+0x4>

080010f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <HardFault_Handler+0x4>

080010fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <MemManage_Handler+0x4>

08001104 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <BusFault_Handler+0x4>

0800110c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <UsageFault_Handler+0x4>

08001114 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001128:	4802      	ldr	r0, [pc, #8]	@ (8001134 <TIM6_DAC_IRQHandler+0x10>)
 800112a:	f004 f90f 	bl	800534c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	240007c0 	.word	0x240007c0

08001138 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800113c:	4b37      	ldr	r3, [pc, #220]	@ (800121c <SystemInit+0xe4>)
 800113e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001142:	4a36      	ldr	r2, [pc, #216]	@ (800121c <SystemInit+0xe4>)
 8001144:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001148:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800114c:	4b34      	ldr	r3, [pc, #208]	@ (8001220 <SystemInit+0xe8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	2b06      	cmp	r3, #6
 8001156:	d807      	bhi.n	8001168 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001158:	4b31      	ldr	r3, [pc, #196]	@ (8001220 <SystemInit+0xe8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f023 030f 	bic.w	r3, r3, #15
 8001160:	4a2f      	ldr	r2, [pc, #188]	@ (8001220 <SystemInit+0xe8>)
 8001162:	f043 0307 	orr.w	r3, r3, #7
 8001166:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001168:	4b2e      	ldr	r3, [pc, #184]	@ (8001224 <SystemInit+0xec>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a2d      	ldr	r2, [pc, #180]	@ (8001224 <SystemInit+0xec>)
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001174:	4b2b      	ldr	r3, [pc, #172]	@ (8001224 <SystemInit+0xec>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800117a:	4b2a      	ldr	r3, [pc, #168]	@ (8001224 <SystemInit+0xec>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4929      	ldr	r1, [pc, #164]	@ (8001224 <SystemInit+0xec>)
 8001180:	4b29      	ldr	r3, [pc, #164]	@ (8001228 <SystemInit+0xf0>)
 8001182:	4013      	ands	r3, r2
 8001184:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001186:	4b26      	ldr	r3, [pc, #152]	@ (8001220 <SystemInit+0xe8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	2b00      	cmp	r3, #0
 8001190:	d007      	beq.n	80011a2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001192:	4b23      	ldr	r3, [pc, #140]	@ (8001220 <SystemInit+0xe8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f023 030f 	bic.w	r3, r3, #15
 800119a:	4a21      	ldr	r2, [pc, #132]	@ (8001220 <SystemInit+0xe8>)
 800119c:	f043 0307 	orr.w	r3, r3, #7
 80011a0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011a2:	4b20      	ldr	r3, [pc, #128]	@ (8001224 <SystemInit+0xec>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001224 <SystemInit+0xec>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001224 <SystemInit+0xec>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001224 <SystemInit+0xec>)
 80011b6:	4a1d      	ldr	r2, [pc, #116]	@ (800122c <SystemInit+0xf4>)
 80011b8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001224 <SystemInit+0xec>)
 80011bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001230 <SystemInit+0xf8>)
 80011be:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011c0:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <SystemInit+0xec>)
 80011c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001234 <SystemInit+0xfc>)
 80011c4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011c6:	4b17      	ldr	r3, [pc, #92]	@ (8001224 <SystemInit+0xec>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011cc:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <SystemInit+0xec>)
 80011ce:	4a19      	ldr	r2, [pc, #100]	@ (8001234 <SystemInit+0xfc>)
 80011d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011d2:	4b14      	ldr	r3, [pc, #80]	@ (8001224 <SystemInit+0xec>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011d8:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <SystemInit+0xec>)
 80011da:	4a16      	ldr	r2, [pc, #88]	@ (8001234 <SystemInit+0xfc>)
 80011dc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011de:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <SystemInit+0xec>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001224 <SystemInit+0xec>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001224 <SystemInit+0xec>)
 80011ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <SystemInit+0xec>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011f6:	4b10      	ldr	r3, [pc, #64]	@ (8001238 <SystemInit+0x100>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	4b10      	ldr	r3, [pc, #64]	@ (800123c <SystemInit+0x104>)
 80011fc:	4013      	ands	r3, r2
 80011fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001202:	d202      	bcs.n	800120a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001204:	4b0e      	ldr	r3, [pc, #56]	@ (8001240 <SystemInit+0x108>)
 8001206:	2201      	movs	r2, #1
 8001208:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800120a:	4b0e      	ldr	r3, [pc, #56]	@ (8001244 <SystemInit+0x10c>)
 800120c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001210:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000ed00 	.word	0xe000ed00
 8001220:	52002000 	.word	0x52002000
 8001224:	58024400 	.word	0x58024400
 8001228:	eaf6ed7f 	.word	0xeaf6ed7f
 800122c:	02020200 	.word	0x02020200
 8001230:	01ff0000 	.word	0x01ff0000
 8001234:	01010280 	.word	0x01010280
 8001238:	5c001000 	.word	0x5c001000
 800123c:	ffff0000 	.word	0xffff0000
 8001240:	51008108 	.word	0x51008108
 8001244:	52004000 	.word	0x52004000

08001248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001248:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001280 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800124c:	f7ff ff74 	bl	8001138 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001250:	480c      	ldr	r0, [pc, #48]	@ (8001284 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001252:	490d      	ldr	r1, [pc, #52]	@ (8001288 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001254:	4a0d      	ldr	r2, [pc, #52]	@ (800128c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001258:	e002      	b.n	8001260 <LoopCopyDataInit>

0800125a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800125c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125e:	3304      	adds	r3, #4

08001260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001264:	d3f9      	bcc.n	800125a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001266:	4a0a      	ldr	r2, [pc, #40]	@ (8001290 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001268:	4c0a      	ldr	r4, [pc, #40]	@ (8001294 <LoopFillZerobss+0x22>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800126c:	e001      	b.n	8001272 <LoopFillZerobss>

0800126e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001270:	3204      	adds	r2, #4

08001272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001274:	d3fb      	bcc.n	800126e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001276:	f009 fb0d 	bl	800a894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127a:	f7ff f9b1 	bl	80005e0 <main>
  bx  lr
 800127e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001280:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001284:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001288:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 800128c:	0800ab54 	.word	0x0800ab54
  ldr r2, =_sbss
 8001290:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 8001294:	24005338 	.word	0x24005338

08001298 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001298:	e7fe      	b.n	8001298 <ADC3_IRQHandler>
	...

0800129c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a2:	2003      	movs	r0, #3
 80012a4:	f000 f947 	bl	8001536 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012a8:	f001 ff32 	bl	8003110 <HAL_RCC_GetSysClockFreq>
 80012ac:	4602      	mov	r2, r0
 80012ae:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <HAL_Init+0x68>)
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	0a1b      	lsrs	r3, r3, #8
 80012b4:	f003 030f 	and.w	r3, r3, #15
 80012b8:	4913      	ldr	r1, [pc, #76]	@ (8001308 <HAL_Init+0x6c>)
 80012ba:	5ccb      	ldrb	r3, [r1, r3]
 80012bc:	f003 031f 	and.w	r3, r3, #31
 80012c0:	fa22 f303 	lsr.w	r3, r2, r3
 80012c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <HAL_Init+0x68>)
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001308 <HAL_Init+0x6c>)
 80012d0:	5cd3      	ldrb	r3, [r2, r3]
 80012d2:	f003 031f 	and.w	r3, r3, #31
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	fa22 f303 	lsr.w	r3, r2, r3
 80012dc:	4a0b      	ldr	r2, [pc, #44]	@ (800130c <HAL_Init+0x70>)
 80012de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001310 <HAL_Init+0x74>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012e6:	200f      	movs	r0, #15
 80012e8:	f7ff fe94 	bl	8001014 <HAL_InitTick>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e002      	b.n	80012fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012f6:	f7ff fcbb 	bl	8000c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	58024400 	.word	0x58024400
 8001308:	0800ab0c 	.word	0x0800ab0c
 800130c:	24000004 	.word	0x24000004
 8001310:	24000000 	.word	0x24000000

08001314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001318:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <HAL_IncTick+0x20>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <HAL_IncTick+0x24>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4413      	add	r3, r2
 8001324:	4a04      	ldr	r2, [pc, #16]	@ (8001338 <HAL_IncTick+0x24>)
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	2400000c 	.word	0x2400000c
 8001338:	2400080c 	.word	0x2400080c

0800133c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return uwTick;
 8001340:	4b03      	ldr	r3, [pc, #12]	@ (8001350 <HAL_GetTick+0x14>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	2400080c 	.word	0x2400080c

08001354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800135c:	f7ff ffee 	bl	800133c <HAL_GetTick>
 8001360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800136c:	d005      	beq.n	800137a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136e:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <HAL_Delay+0x44>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4413      	add	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800137a:	bf00      	nop
 800137c:	f7ff ffde 	bl	800133c <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	429a      	cmp	r2, r3
 800138a:	d8f7      	bhi.n	800137c <HAL_Delay+0x28>
  {
  }
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	2400000c 	.word	0x2400000c

0800139c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013a0:	4b03      	ldr	r3, [pc, #12]	@ (80013b0 <HAL_GetREVID+0x14>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	0c1b      	lsrs	r3, r3, #16
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	5c001000 	.word	0x5c001000

080013b4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80013bc:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80013c4:	4904      	ldr	r1, [pc, #16]	@ (80013d8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	58000400 	.word	0x58000400

080013dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ec:	4b0b      	ldr	r3, [pc, #44]	@ (800141c <__NVIC_SetPriorityGrouping+0x40>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013f8:	4013      	ands	r3, r2
 80013fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001404:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 8001406:	4313      	orrs	r3, r2
 8001408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140a:	4a04      	ldr	r2, [pc, #16]	@ (800141c <__NVIC_SetPriorityGrouping+0x40>)
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	60d3      	str	r3, [r2, #12]
}
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000ed00 	.word	0xe000ed00
 8001420:	05fa0000 	.word	0x05fa0000

08001424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001428:	4b04      	ldr	r3, [pc, #16]	@ (800143c <__NVIC_GetPriorityGrouping+0x18>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	0a1b      	lsrs	r3, r3, #8
 800142e:	f003 0307 	and.w	r3, r3, #7
}
 8001432:	4618      	mov	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800144a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800144e:	2b00      	cmp	r3, #0
 8001450:	db0b      	blt.n	800146a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	f003 021f 	and.w	r2, r3, #31
 8001458:	4907      	ldr	r1, [pc, #28]	@ (8001478 <__NVIC_EnableIRQ+0x38>)
 800145a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800145e:	095b      	lsrs	r3, r3, #5
 8001460:	2001      	movs	r0, #1
 8001462:	fa00 f202 	lsl.w	r2, r0, r2
 8001466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000e100 	.word	0xe000e100

0800147c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	6039      	str	r1, [r7, #0]
 8001486:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001488:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800148c:	2b00      	cmp	r3, #0
 800148e:	db0a      	blt.n	80014a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	b2da      	uxtb	r2, r3
 8001494:	490c      	ldr	r1, [pc, #48]	@ (80014c8 <__NVIC_SetPriority+0x4c>)
 8001496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800149a:	0112      	lsls	r2, r2, #4
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	440b      	add	r3, r1
 80014a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a4:	e00a      	b.n	80014bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4908      	ldr	r1, [pc, #32]	@ (80014cc <__NVIC_SetPriority+0x50>)
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	3b04      	subs	r3, #4
 80014b4:	0112      	lsls	r2, r2, #4
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	440b      	add	r3, r1
 80014ba:	761a      	strb	r2, [r3, #24]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000e100 	.word	0xe000e100
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b089      	sub	sp, #36	@ 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f1c3 0307 	rsb	r3, r3, #7
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	bf28      	it	cs
 80014ee:	2304      	movcs	r3, #4
 80014f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3304      	adds	r3, #4
 80014f6:	2b06      	cmp	r3, #6
 80014f8:	d902      	bls.n	8001500 <NVIC_EncodePriority+0x30>
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3b03      	subs	r3, #3
 80014fe:	e000      	b.n	8001502 <NVIC_EncodePriority+0x32>
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	f04f 32ff 	mov.w	r2, #4294967295
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43da      	mvns	r2, r3
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	401a      	ands	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001518:	f04f 31ff 	mov.w	r1, #4294967295
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	fa01 f303 	lsl.w	r3, r1, r3
 8001522:	43d9      	mvns	r1, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	4313      	orrs	r3, r2
         );
}
 800152a:	4618      	mov	r0, r3
 800152c:	3724      	adds	r7, #36	@ 0x24
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ff4c 	bl	80013dc <__NVIC_SetPriorityGrouping>
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800155a:	f7ff ff63 	bl	8001424 <__NVIC_GetPriorityGrouping>
 800155e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	68b9      	ldr	r1, [r7, #8]
 8001564:	6978      	ldr	r0, [r7, #20]
 8001566:	f7ff ffb3 	bl	80014d0 <NVIC_EncodePriority>
 800156a:	4602      	mov	r2, r0
 800156c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001570:	4611      	mov	r1, r2
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff ff82 	bl	800147c <__NVIC_SetPriority>
}
 8001578:	bf00      	nop
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800158a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff ff56 	bl	8001440 <__NVIC_EnableIRQ>
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e0e3      	b.n	8001776 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d106      	bne.n	80015c6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2223      	movs	r2, #35	@ 0x23
 80015bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff fb73 	bl	8000cac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c6:	4b6e      	ldr	r3, [pc, #440]	@ (8001780 <HAL_ETH_Init+0x1e4>)
 80015c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015cc:	4a6c      	ldr	r2, [pc, #432]	@ (8001780 <HAL_ETH_Init+0x1e4>)
 80015ce:	f043 0302 	orr.w	r3, r3, #2
 80015d2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001780 <HAL_ETH_Init+0x1e4>)
 80015d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7a1b      	ldrb	r3, [r3, #8]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d103      	bne.n	80015f4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80015ec:	2000      	movs	r0, #0
 80015ee:	f7ff fee1 	bl	80013b4 <HAL_SYSCFG_ETHInterfaceSelect>
 80015f2:	e003      	b.n	80015fc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80015f4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80015f8:	f7ff fedc 	bl	80013b4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80015fc:	4b61      	ldr	r3, [pc, #388]	@ (8001784 <HAL_ETH_Init+0x1e8>)
 80015fe:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	6812      	ldr	r2, [r2, #0]
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001616:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001618:	f7ff fe90 	bl	800133c <HAL_GetTick>
 800161c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800161e:	e011      	b.n	8001644 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001620:	f7ff fe8c 	bl	800133c <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800162e:	d909      	bls.n	8001644 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2204      	movs	r2, #4
 8001634:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	22e0      	movs	r2, #224	@ 0xe0
 800163c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e098      	b.n	8001776 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1e4      	bne.n	8001620 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 f89e 	bl	8001798 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800165c:	f001 fed2 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 8001660:	4603      	mov	r3, r0
 8001662:	4a49      	ldr	r2, [pc, #292]	@ (8001788 <HAL_ETH_Init+0x1ec>)
 8001664:	fba2 2303 	umull	r2, r3, r2, r3
 8001668:	0c9a      	lsrs	r2, r3, #18
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	3a01      	subs	r2, #1
 8001670:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 fa81 	bl	8001b7c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001682:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001686:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	6812      	ldr	r2, [r2, #0]
 800168e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001692:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001696:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d009      	beq.n	80016ba <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	22e0      	movs	r2, #224	@ 0xe0
 80016b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e05d      	b.n	8001776 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016c2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80016c6:	4b31      	ldr	r3, [pc, #196]	@ (800178c <HAL_ETH_Init+0x1f0>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6952      	ldr	r2, [r2, #20]
 80016ce:	0051      	lsls	r1, r2, #1
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6812      	ldr	r2, [r2, #0]
 80016d4:	430b      	orrs	r3, r1
 80016d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016da:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 fae9 	bl	8001cb6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 fb2f 	bl	8001d48 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	3305      	adds	r3, #5
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	021a      	lsls	r2, r3, #8
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	3304      	adds	r3, #4
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	3303      	adds	r3, #3
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	061a      	lsls	r2, r3, #24
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	3302      	adds	r3, #2
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	041b      	lsls	r3, r3, #16
 800171c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	3301      	adds	r3, #1
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001728:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001736:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001738:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <HAL_ETH_Init+0x1f4>)
 800174a:	430b      	orrs	r3, r1
 800174c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b0d      	ldr	r3, [pc, #52]	@ (8001794 <HAL_ETH_Init+0x1f8>)
 800175e:	430b      	orrs	r3, r1
 8001760:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2210      	movs	r2, #16
 8001770:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	58024400 	.word	0x58024400
 8001784:	58000400 	.word	0x58000400
 8001788:	431bde83 	.word	0x431bde83
 800178c:	ffff8001 	.word	0xffff8001
 8001790:	0c020060 	.word	0x0c020060
 8001794:	0c20c000 	.word	0x0c20c000

08001798 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017a8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80017b0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80017b2:	f001 fe27 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 80017b6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4a1a      	ldr	r2, [pc, #104]	@ (8001824 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d804      	bhi.n	80017ca <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	e022      	b.n	8001810 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	4a16      	ldr	r2, [pc, #88]	@ (8001828 <HAL_ETH_SetMDIOClockRange+0x90>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d204      	bcs.n	80017dc <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	e019      	b.n	8001810 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4a13      	ldr	r2, [pc, #76]	@ (800182c <HAL_ETH_SetMDIOClockRange+0x94>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d915      	bls.n	8001810 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	4a12      	ldr	r2, [pc, #72]	@ (8001830 <HAL_ETH_SetMDIOClockRange+0x98>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d804      	bhi.n	80017f6 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	e00c      	b.n	8001810 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001834 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d804      	bhi.n	8001808 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	e003      	b.n	8001810 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800180e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800181a:	bf00      	nop
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	02160ebf 	.word	0x02160ebf
 8001828:	03938700 	.word	0x03938700
 800182c:	05f5e0ff 	.word	0x05f5e0ff
 8001830:	08f0d17f 	.word	0x08f0d17f
 8001834:	0ee6b27f 	.word	0x0ee6b27f

08001838 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800184a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	791b      	ldrb	r3, [r3, #4]
 8001850:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001852:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	7b1b      	ldrb	r3, [r3, #12]
 8001858:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800185a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	7b5b      	ldrb	r3, [r3, #13]
 8001860:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001862:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	7b9b      	ldrb	r3, [r3, #14]
 8001868:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800186a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	7bdb      	ldrb	r3, [r3, #15]
 8001870:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001872:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	7c12      	ldrb	r2, [r2, #16]
 8001878:	2a00      	cmp	r2, #0
 800187a:	d102      	bne.n	8001882 <ETH_SetMACConfig+0x4a>
 800187c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001880:	e000      	b.n	8001884 <ETH_SetMACConfig+0x4c>
 8001882:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001884:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	7c52      	ldrb	r2, [r2, #17]
 800188a:	2a00      	cmp	r2, #0
 800188c:	d102      	bne.n	8001894 <ETH_SetMACConfig+0x5c>
 800188e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001892:	e000      	b.n	8001896 <ETH_SetMACConfig+0x5e>
 8001894:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001896:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	7c9b      	ldrb	r3, [r3, #18]
 800189c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800189e:	431a      	orrs	r2, r3
               macconf->Speed |
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80018a4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80018aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	7f1b      	ldrb	r3, [r3, #28]
 80018b0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80018b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	7f5b      	ldrb	r3, [r3, #29]
 80018b8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80018ba:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	7f92      	ldrb	r2, [r2, #30]
 80018c0:	2a00      	cmp	r2, #0
 80018c2:	d102      	bne.n	80018ca <ETH_SetMACConfig+0x92>
 80018c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018c8:	e000      	b.n	80018cc <ETH_SetMACConfig+0x94>
 80018ca:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80018cc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	7fdb      	ldrb	r3, [r3, #31]
 80018d2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80018d4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80018dc:	2a00      	cmp	r2, #0
 80018de:	d102      	bne.n	80018e6 <ETH_SetMACConfig+0xae>
 80018e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018e4:	e000      	b.n	80018e8 <ETH_SetMACConfig+0xb0>
 80018e6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80018e8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80018ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80018f6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80018f8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80018fe:	4313      	orrs	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b56      	ldr	r3, [pc, #344]	@ (8001a64 <ETH_SetMACConfig+0x22c>)
 800190a:	4013      	ands	r3, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	68f9      	ldr	r1, [r7, #12]
 8001912:	430b      	orrs	r3, r1
 8001914:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800191a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001922:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001924:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800192c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800192e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001936:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001938:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001940:	2a00      	cmp	r2, #0
 8001942:	d102      	bne.n	800194a <ETH_SetMACConfig+0x112>
 8001944:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001948:	e000      	b.n	800194c <ETH_SetMACConfig+0x114>
 800194a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800194c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001952:	4313      	orrs	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	4b42      	ldr	r3, [pc, #264]	@ (8001a68 <ETH_SetMACConfig+0x230>)
 800195e:	4013      	ands	r3, r2
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	68f9      	ldr	r1, [r7, #12]
 8001966:	430b      	orrs	r3, r1
 8001968:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001970:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001976:	4313      	orrs	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	4b3a      	ldr	r3, [pc, #232]	@ (8001a6c <ETH_SetMACConfig+0x234>)
 8001982:	4013      	ands	r3, r2
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	68f9      	ldr	r1, [r7, #12]
 800198a:	430b      	orrs	r3, r1
 800198c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001994:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800199a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80019a2:	2a00      	cmp	r2, #0
 80019a4:	d101      	bne.n	80019aa <ETH_SetMACConfig+0x172>
 80019a6:	2280      	movs	r2, #128	@ 0x80
 80019a8:	e000      	b.n	80019ac <ETH_SetMACConfig+0x174>
 80019aa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80019ac:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019b2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019b4:	4313      	orrs	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80019be:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80019c2:	4013      	ands	r3, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	68f9      	ldr	r1, [r7, #12]
 80019ca:	430b      	orrs	r3, r1
 80019cc:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80019d4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80019dc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019de:	4313      	orrs	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ea:	f023 0103 	bic.w	r1, r3, #3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001a02:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001a1e:	2a00      	cmp	r2, #0
 8001a20:	d101      	bne.n	8001a26 <ETH_SetMACConfig+0x1ee>
 8001a22:	2240      	movs	r2, #64	@ 0x40
 8001a24:	e000      	b.n	8001a28 <ETH_SetMACConfig+0x1f0>
 8001a26:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001a28:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001a30:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001a3a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001a48:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	00048083 	.word	0x00048083
 8001a68:	c0f88000 	.word	0xc0f88000
 8001a6c:	fffffef0 	.word	0xfffffef0

08001a70 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b38      	ldr	r3, [pc, #224]	@ (8001b68 <ETH_SetDMAConfig+0xf8>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	6811      	ldr	r1, [r2, #0]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6812      	ldr	r2, [r2, #0]
 8001a90:	430b      	orrs	r3, r1
 8001a92:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a96:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	791b      	ldrb	r3, [r3, #4]
 8001a9c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001aa2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	7b1b      	ldrb	r3, [r3, #12]
 8001aa8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8001b6c <ETH_SetDMAConfig+0xfc>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	68f9      	ldr	r1, [r7, #12]
 8001ac2:	430b      	orrs	r3, r1
 8001ac4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ac8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	7b5b      	ldrb	r3, [r3, #13]
 8001ace:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ae0:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001ae4:	4b22      	ldr	r3, [pc, #136]	@ (8001b70 <ETH_SetDMAConfig+0x100>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	68f9      	ldr	r1, [r7, #12]
 8001aee:	430b      	orrs	r3, r1
 8001af0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001af4:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	7d1b      	ldrb	r3, [r3, #20]
 8001b00:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b02:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	7f5b      	ldrb	r3, [r3, #29]
 8001b08:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b16:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001b1a:	4b16      	ldr	r3, [pc, #88]	@ (8001b74 <ETH_SetDMAConfig+0x104>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6812      	ldr	r2, [r2, #0]
 8001b22:	68f9      	ldr	r1, [r7, #12]
 8001b24:	430b      	orrs	r3, r1
 8001b26:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b2a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	7f1b      	ldrb	r3, [r3, #28]
 8001b32:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b44:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001b48:	4b0b      	ldr	r3, [pc, #44]	@ (8001b78 <ETH_SetDMAConfig+0x108>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	68f9      	ldr	r1, [r7, #12]
 8001b52:	430b      	orrs	r3, r1
 8001b54:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b58:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	ffff87fd 	.word	0xffff87fd
 8001b6c:	ffff2ffe 	.word	0xffff2ffe
 8001b70:	fffec000 	.word	0xfffec000
 8001b74:	ffc0efef 	.word	0xffc0efef
 8001b78:	7fc0ffff 	.word	0x7fc0ffff

08001b7c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b0a4      	sub	sp, #144	@ 0x90
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001b84:	2301      	movs	r3, #1
 8001b86:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001bb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bbc:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001bd4:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001bd8:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001be0:	2300      	movs	r3, #0
 8001be2:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001be4:	2301      	movs	r3, #1
 8001be6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001c14:	2320      	movs	r3, #32
 8001c16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001c26:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c2c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c30:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001c50:	2301      	movs	r3, #1
 8001c52:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001c56:	2300      	movs	r3, #0
 8001c58:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c64:	4619      	mov	r1, r3
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff fde6 	bl	8001838 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c70:	2301      	movs	r3, #1
 8001c72:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c86:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c8a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c90:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c94:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001c9c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001ca0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ca2:	f107 0308 	add.w	r3, r7, #8
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff fee1 	bl	8001a70 <ETH_SetDMAConfig>
}
 8001cae:	bf00      	nop
 8001cb0:	3790      	adds	r7, #144	@ 0x90
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b085      	sub	sp, #20
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	e01d      	b.n	8001d00 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68d9      	ldr	r1, [r3, #12]
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	4413      	add	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	440b      	add	r3, r1
 8001cd4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001cee:	68b9      	ldr	r1, [r7, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	3206      	adds	r2, #6
 8001cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d9de      	bls.n	8001cc4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d14:	461a      	mov	r2, r3
 8001d16:	2303      	movs	r3, #3
 8001d18:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d28:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d38:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	e023      	b.n	8001d9e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6919      	ldr	r1, [r3, #16]
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4413      	add	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	440b      	add	r3, r1
 8001d66:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	2200      	movs	r2, #0
 8001d72:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2200      	movs	r2, #0
 8001d84:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001d8c:	68b9      	ldr	r1, [r7, #8]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	3212      	adds	r2, #18
 8001d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d9d8      	bls.n	8001d56 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dca:	461a      	mov	r2, r3
 8001dcc:	2303      	movs	r3, #3
 8001dce:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691a      	ldr	r2, [r3, #16]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dde:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001df2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001df6:	bf00      	nop
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b089      	sub	sp, #36	@ 0x24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e12:	4b89      	ldr	r3, [pc, #548]	@ (8002038 <HAL_GPIO_Init+0x234>)
 8001e14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e16:	e194      	b.n	8002142 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	fa01 f303 	lsl.w	r3, r1, r3
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 8186 	beq.w	800213c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d005      	beq.n	8001e48 <HAL_GPIO_Init+0x44>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d130      	bne.n	8001eaa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	2203      	movs	r2, #3
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e7e:	2201      	movs	r2, #1
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	091b      	lsrs	r3, r3, #4
 8001e94:	f003 0201 	and.w	r2, r3, #1
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d017      	beq.n	8001ee6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d123      	bne.n	8001f3a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	08da      	lsrs	r2, r3, #3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3208      	adds	r2, #8
 8001efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	220f      	movs	r2, #15
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	691a      	ldr	r2, [r3, #16]
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	08da      	lsrs	r2, r3, #3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3208      	adds	r2, #8
 8001f34:	69b9      	ldr	r1, [r7, #24]
 8001f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	2203      	movs	r2, #3
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 0203 	and.w	r2, r3, #3
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 80e0 	beq.w	800213c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7c:	4b2f      	ldr	r3, [pc, #188]	@ (800203c <HAL_GPIO_Init+0x238>)
 8001f7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f82:	4a2e      	ldr	r2, [pc, #184]	@ (800203c <HAL_GPIO_Init+0x238>)
 8001f84:	f043 0302 	orr.w	r3, r3, #2
 8001f88:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f8c:	4b2b      	ldr	r3, [pc, #172]	@ (800203c <HAL_GPIO_Init+0x238>)
 8001f8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f9a:	4a29      	ldr	r2, [pc, #164]	@ (8002040 <HAL_GPIO_Init+0x23c>)
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	089b      	lsrs	r3, r3, #2
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	220f      	movs	r2, #15
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a20      	ldr	r2, [pc, #128]	@ (8002044 <HAL_GPIO_Init+0x240>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d052      	beq.n	800206c <HAL_GPIO_Init+0x268>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a1f      	ldr	r2, [pc, #124]	@ (8002048 <HAL_GPIO_Init+0x244>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d031      	beq.n	8002032 <HAL_GPIO_Init+0x22e>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a1e      	ldr	r2, [pc, #120]	@ (800204c <HAL_GPIO_Init+0x248>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d02b      	beq.n	800202e <HAL_GPIO_Init+0x22a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8002050 <HAL_GPIO_Init+0x24c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d025      	beq.n	800202a <HAL_GPIO_Init+0x226>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a1c      	ldr	r2, [pc, #112]	@ (8002054 <HAL_GPIO_Init+0x250>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d01f      	beq.n	8002026 <HAL_GPIO_Init+0x222>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8002058 <HAL_GPIO_Init+0x254>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d019      	beq.n	8002022 <HAL_GPIO_Init+0x21e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a1a      	ldr	r2, [pc, #104]	@ (800205c <HAL_GPIO_Init+0x258>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d013      	beq.n	800201e <HAL_GPIO_Init+0x21a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a19      	ldr	r2, [pc, #100]	@ (8002060 <HAL_GPIO_Init+0x25c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d00d      	beq.n	800201a <HAL_GPIO_Init+0x216>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a18      	ldr	r2, [pc, #96]	@ (8002064 <HAL_GPIO_Init+0x260>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d007      	beq.n	8002016 <HAL_GPIO_Init+0x212>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a17      	ldr	r2, [pc, #92]	@ (8002068 <HAL_GPIO_Init+0x264>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d101      	bne.n	8002012 <HAL_GPIO_Init+0x20e>
 800200e:	2309      	movs	r3, #9
 8002010:	e02d      	b.n	800206e <HAL_GPIO_Init+0x26a>
 8002012:	230a      	movs	r3, #10
 8002014:	e02b      	b.n	800206e <HAL_GPIO_Init+0x26a>
 8002016:	2308      	movs	r3, #8
 8002018:	e029      	b.n	800206e <HAL_GPIO_Init+0x26a>
 800201a:	2307      	movs	r3, #7
 800201c:	e027      	b.n	800206e <HAL_GPIO_Init+0x26a>
 800201e:	2306      	movs	r3, #6
 8002020:	e025      	b.n	800206e <HAL_GPIO_Init+0x26a>
 8002022:	2305      	movs	r3, #5
 8002024:	e023      	b.n	800206e <HAL_GPIO_Init+0x26a>
 8002026:	2304      	movs	r3, #4
 8002028:	e021      	b.n	800206e <HAL_GPIO_Init+0x26a>
 800202a:	2303      	movs	r3, #3
 800202c:	e01f      	b.n	800206e <HAL_GPIO_Init+0x26a>
 800202e:	2302      	movs	r3, #2
 8002030:	e01d      	b.n	800206e <HAL_GPIO_Init+0x26a>
 8002032:	2301      	movs	r3, #1
 8002034:	e01b      	b.n	800206e <HAL_GPIO_Init+0x26a>
 8002036:	bf00      	nop
 8002038:	58000080 	.word	0x58000080
 800203c:	58024400 	.word	0x58024400
 8002040:	58000400 	.word	0x58000400
 8002044:	58020000 	.word	0x58020000
 8002048:	58020400 	.word	0x58020400
 800204c:	58020800 	.word	0x58020800
 8002050:	58020c00 	.word	0x58020c00
 8002054:	58021000 	.word	0x58021000
 8002058:	58021400 	.word	0x58021400
 800205c:	58021800 	.word	0x58021800
 8002060:	58021c00 	.word	0x58021c00
 8002064:	58022000 	.word	0x58022000
 8002068:	58022400 	.word	0x58022400
 800206c:	2300      	movs	r3, #0
 800206e:	69fa      	ldr	r2, [r7, #28]
 8002070:	f002 0203 	and.w	r2, r2, #3
 8002074:	0092      	lsls	r2, r2, #2
 8002076:	4093      	lsls	r3, r2
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800207e:	4938      	ldr	r1, [pc, #224]	@ (8002160 <HAL_GPIO_Init+0x35c>)
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	089b      	lsrs	r3, r3, #2
 8002084:	3302      	adds	r3, #2
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800208c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80020b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80020e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	3301      	adds	r3, #1
 8002140:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	fa22 f303 	lsr.w	r3, r2, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	f47f ae63 	bne.w	8001e18 <HAL_GPIO_Init+0x14>
  }
}
 8002152:	bf00      	nop
 8002154:	bf00      	nop
 8002156:	3724      	adds	r7, #36	@ 0x24
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	58000400 	.word	0x58000400

08002164 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	887b      	ldrh	r3, [r7, #2]
 8002176:	4013      	ands	r3, r2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800217c:	2301      	movs	r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]
 8002180:	e001      	b.n	8002186 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002182:	2300      	movs	r3, #0
 8002184:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002186:	7bfb      	ldrb	r3, [r7, #15]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	807b      	strh	r3, [r7, #2]
 80021a0:	4613      	mov	r3, r2
 80021a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021a4:	787b      	ldrb	r3, [r7, #1]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021aa:	887a      	ldrh	r2, [r7, #2]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80021b0:	e003      	b.n	80021ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80021b2:	887b      	ldrh	r3, [r7, #2]
 80021b4:	041a      	lsls	r2, r3, #16
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	619a      	str	r2, [r3, #24]
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b085      	sub	sp, #20
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	460b      	mov	r3, r1
 80021d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021d8:	887a      	ldrh	r2, [r7, #2]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4013      	ands	r3, r2
 80021de:	041a      	lsls	r2, r3, #16
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	43d9      	mvns	r1, r3
 80021e4:	887b      	ldrh	r3, [r7, #2]
 80021e6:	400b      	ands	r3, r1
 80021e8:	431a      	orrs	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	619a      	str	r2, [r3, #24]
}
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b086      	sub	sp, #24
 80021fe:	af02      	add	r7, sp, #8
 8002200:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0fe      	b.n	800240a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	d106      	bne.n	8002226 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7fe fe7b 	bl	8000f1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2203      	movs	r2, #3
 800222a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f004 fc5a 	bl	8006aec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	7c1a      	ldrb	r2, [r3, #16]
 8002240:	f88d 2000 	strb.w	r2, [sp]
 8002244:	3304      	adds	r3, #4
 8002246:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002248:	f004 fbde 	bl	8006a08 <USB_CoreInit>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d005      	beq.n	800225e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2202      	movs	r2, #2
 8002256:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e0d5      	b.n	800240a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2100      	movs	r1, #0
 8002264:	4618      	mov	r0, r3
 8002266:	f004 fc52 	bl	8006b0e <USB_SetCurrentMode>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2202      	movs	r2, #2
 8002274:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0c6      	b.n	800240a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800227c:	2300      	movs	r3, #0
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	e04a      	b.n	8002318 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4413      	add	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	3315      	adds	r3, #21
 8002292:	2201      	movs	r2, #1
 8002294:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002296:	7bfa      	ldrb	r2, [r7, #15]
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	3314      	adds	r3, #20
 80022a6:	7bfa      	ldrb	r2, [r7, #15]
 80022a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022aa:	7bfa      	ldrb	r2, [r7, #15]
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	b298      	uxth	r0, r3
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4413      	add	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	440b      	add	r3, r1
 80022bc:	332e      	adds	r3, #46	@ 0x2e
 80022be:	4602      	mov	r2, r0
 80022c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022c2:	7bfa      	ldrb	r2, [r7, #15]
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	4413      	add	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	440b      	add	r3, r1
 80022d0:	3318      	adds	r3, #24
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022d6:	7bfa      	ldrb	r2, [r7, #15]
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	4413      	add	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	440b      	add	r3, r1
 80022e4:	331c      	adds	r3, #28
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022ea:	7bfa      	ldrb	r2, [r7, #15]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	4413      	add	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	440b      	add	r3, r1
 80022f8:	3320      	adds	r3, #32
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	4413      	add	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	440b      	add	r3, r1
 800230c:	3324      	adds	r3, #36	@ 0x24
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	3301      	adds	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	791b      	ldrb	r3, [r3, #4]
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	429a      	cmp	r2, r3
 8002320:	d3af      	bcc.n	8002282 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002322:	2300      	movs	r3, #0
 8002324:	73fb      	strb	r3, [r7, #15]
 8002326:	e044      	b.n	80023b2 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800233e:	7bfa      	ldrb	r2, [r7, #15]
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4413      	add	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	440b      	add	r3, r1
 800234c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002350:	7bfa      	ldrb	r2, [r7, #15]
 8002352:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800236a:	7bfa      	ldrb	r2, [r7, #15]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	4413      	add	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002380:	7bfa      	ldrb	r2, [r7, #15]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4413      	add	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002396:	7bfa      	ldrb	r2, [r7, #15]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	4413      	add	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	440b      	add	r3, r1
 80023a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
 80023ae:	3301      	adds	r3, #1
 80023b0:	73fb      	strb	r3, [r7, #15]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	791b      	ldrb	r3, [r3, #4]
 80023b6:	7bfa      	ldrb	r2, [r7, #15]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d3b5      	bcc.n	8002328 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6818      	ldr	r0, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	7c1a      	ldrb	r2, [r3, #16]
 80023c4:	f88d 2000 	strb.w	r2, [sp]
 80023c8:	3304      	adds	r3, #4
 80023ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023cc:	f004 fbec 	bl	8006ba8 <USB_DevInit>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d005      	beq.n	80023e2 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2202      	movs	r2, #2
 80023da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e013      	b.n	800240a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	7b1b      	ldrb	r3, [r3, #12]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d102      	bne.n	80023fe <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f80b 	bl	8002414 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f004 fda7 	bl	8006f56 <USB_DevDisconnect>

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002442:	4b05      	ldr	r3, [pc, #20]	@ (8002458 <HAL_PCDEx_ActivateLPM+0x44>)
 8002444:	4313      	orrs	r3, r2
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	10000003 	.word	0x10000003

0800245c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002464:	4b19      	ldr	r3, [pc, #100]	@ (80024cc <HAL_PWREx_ConfigSupply+0x70>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b04      	cmp	r3, #4
 800246e:	d00a      	beq.n	8002486 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002470:	4b16      	ldr	r3, [pc, #88]	@ (80024cc <HAL_PWREx_ConfigSupply+0x70>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	429a      	cmp	r2, r3
 800247c:	d001      	beq.n	8002482 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e01f      	b.n	80024c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	e01d      	b.n	80024c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002486:	4b11      	ldr	r3, [pc, #68]	@ (80024cc <HAL_PWREx_ConfigSupply+0x70>)
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f023 0207 	bic.w	r2, r3, #7
 800248e:	490f      	ldr	r1, [pc, #60]	@ (80024cc <HAL_PWREx_ConfigSupply+0x70>)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4313      	orrs	r3, r2
 8002494:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002496:	f7fe ff51 	bl	800133c <HAL_GetTick>
 800249a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800249c:	e009      	b.n	80024b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800249e:	f7fe ff4d 	bl	800133c <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024ac:	d901      	bls.n	80024b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e007      	b.n	80024c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024b2:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <HAL_PWREx_ConfigSupply+0x70>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024be:	d1ee      	bne.n	800249e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	58024800 	.word	0x58024800

080024d0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80024d4:	4b05      	ldr	r3, [pc, #20]	@ (80024ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4a04      	ldr	r2, [pc, #16]	@ (80024ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80024da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024de:	60d3      	str	r3, [r2, #12]
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	58024800 	.word	0x58024800

080024f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08c      	sub	sp, #48	@ 0x30
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d102      	bne.n	8002504 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	f000 bc48 	b.w	8002d94 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 8088 	beq.w	8002622 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002512:	4b99      	ldr	r3, [pc, #612]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800251a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800251c:	4b96      	ldr	r3, [pc, #600]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 800251e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002520:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002524:	2b10      	cmp	r3, #16
 8002526:	d007      	beq.n	8002538 <HAL_RCC_OscConfig+0x48>
 8002528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800252a:	2b18      	cmp	r3, #24
 800252c:	d111      	bne.n	8002552 <HAL_RCC_OscConfig+0x62>
 800252e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d10c      	bne.n	8002552 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002538:	4b8f      	ldr	r3, [pc, #572]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d06d      	beq.n	8002620 <HAL_RCC_OscConfig+0x130>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d169      	bne.n	8002620 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	f000 bc21 	b.w	8002d94 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800255a:	d106      	bne.n	800256a <HAL_RCC_OscConfig+0x7a>
 800255c:	4b86      	ldr	r3, [pc, #536]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a85      	ldr	r2, [pc, #532]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 8002562:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	e02e      	b.n	80025c8 <HAL_RCC_OscConfig+0xd8>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10c      	bne.n	800258c <HAL_RCC_OscConfig+0x9c>
 8002572:	4b81      	ldr	r3, [pc, #516]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a80      	ldr	r2, [pc, #512]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 8002578:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	4b7e      	ldr	r3, [pc, #504]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a7d      	ldr	r2, [pc, #500]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 8002584:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	e01d      	b.n	80025c8 <HAL_RCC_OscConfig+0xd8>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002594:	d10c      	bne.n	80025b0 <HAL_RCC_OscConfig+0xc0>
 8002596:	4b78      	ldr	r3, [pc, #480]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a77      	ldr	r2, [pc, #476]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 800259c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	4b75      	ldr	r3, [pc, #468]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a74      	ldr	r2, [pc, #464]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 80025a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	e00b      	b.n	80025c8 <HAL_RCC_OscConfig+0xd8>
 80025b0:	4b71      	ldr	r3, [pc, #452]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a70      	ldr	r2, [pc, #448]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 80025b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	4b6e      	ldr	r3, [pc, #440]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a6d      	ldr	r2, [pc, #436]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 80025c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d013      	beq.n	80025f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7fe feb4 	bl	800133c <HAL_GetTick>
 80025d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d8:	f7fe feb0 	bl	800133c <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b64      	cmp	r3, #100	@ 0x64
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e3d4      	b.n	8002d94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025ea:	4b63      	ldr	r3, [pc, #396]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0xe8>
 80025f6:	e014      	b.n	8002622 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7fe fea0 	bl	800133c <HAL_GetTick>
 80025fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002600:	f7fe fe9c 	bl	800133c <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b64      	cmp	r3, #100	@ 0x64
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e3c0      	b.n	8002d94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002612:	4b59      	ldr	r3, [pc, #356]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x110>
 800261e:	e000      	b.n	8002622 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 80ca 	beq.w	80027c4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002630:	4b51      	ldr	r3, [pc, #324]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002638:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800263a:	4b4f      	ldr	r3, [pc, #316]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 800263c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002640:	6a3b      	ldr	r3, [r7, #32]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d007      	beq.n	8002656 <HAL_RCC_OscConfig+0x166>
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	2b18      	cmp	r3, #24
 800264a:	d156      	bne.n	80026fa <HAL_RCC_OscConfig+0x20a>
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d151      	bne.n	80026fa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002656:	4b48      	ldr	r3, [pc, #288]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	2b00      	cmp	r3, #0
 8002660:	d005      	beq.n	800266e <HAL_RCC_OscConfig+0x17e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e392      	b.n	8002d94 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800266e:	4b42      	ldr	r3, [pc, #264]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 0219 	bic.w	r2, r3, #25
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	493f      	ldr	r1, [pc, #252]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 800267c:	4313      	orrs	r3, r2
 800267e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe fe5c 	bl	800133c <HAL_GetTick>
 8002684:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002688:	f7fe fe58 	bl	800133c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e37c      	b.n	8002d94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800269a:	4b37      	ldr	r3, [pc, #220]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a6:	f7fe fe79 	bl	800139c <HAL_GetREVID>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d817      	bhi.n	80026e4 <HAL_RCC_OscConfig+0x1f4>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	2b40      	cmp	r3, #64	@ 0x40
 80026ba:	d108      	bne.n	80026ce <HAL_RCC_OscConfig+0x1de>
 80026bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80026c4:	4a2c      	ldr	r2, [pc, #176]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 80026c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026ca:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026cc:	e07a      	b.n	80027c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	031b      	lsls	r3, r3, #12
 80026dc:	4926      	ldr	r1, [pc, #152]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026e2:	e06f      	b.n	80027c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e4:	4b24      	ldr	r3, [pc, #144]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	061b      	lsls	r3, r3, #24
 80026f2:	4921      	ldr	r1, [pc, #132]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026f8:	e064      	b.n	80027c4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d047      	beq.n	8002792 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002702:	4b1d      	ldr	r3, [pc, #116]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 0219 	bic.w	r2, r3, #25
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	491a      	ldr	r1, [pc, #104]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 8002710:	4313      	orrs	r3, r2
 8002712:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002714:	f7fe fe12 	bl	800133c <HAL_GetTick>
 8002718:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800271c:	f7fe fe0e 	bl	800133c <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e332      	b.n	8002d94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800272e:	4b12      	ldr	r3, [pc, #72]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273a:	f7fe fe2f 	bl	800139c <HAL_GetREVID>
 800273e:	4603      	mov	r3, r0
 8002740:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002744:	4293      	cmp	r3, r2
 8002746:	d819      	bhi.n	800277c <HAL_RCC_OscConfig+0x28c>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	2b40      	cmp	r3, #64	@ 0x40
 800274e:	d108      	bne.n	8002762 <HAL_RCC_OscConfig+0x272>
 8002750:	4b09      	ldr	r3, [pc, #36]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002758:	4a07      	ldr	r2, [pc, #28]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 800275a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800275e:	6053      	str	r3, [r2, #4]
 8002760:	e030      	b.n	80027c4 <HAL_RCC_OscConfig+0x2d4>
 8002762:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	031b      	lsls	r3, r3, #12
 8002770:	4901      	ldr	r1, [pc, #4]	@ (8002778 <HAL_RCC_OscConfig+0x288>)
 8002772:	4313      	orrs	r3, r2
 8002774:	604b      	str	r3, [r1, #4]
 8002776:	e025      	b.n	80027c4 <HAL_RCC_OscConfig+0x2d4>
 8002778:	58024400 	.word	0x58024400
 800277c:	4b9a      	ldr	r3, [pc, #616]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	061b      	lsls	r3, r3, #24
 800278a:	4997      	ldr	r1, [pc, #604]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 800278c:	4313      	orrs	r3, r2
 800278e:	604b      	str	r3, [r1, #4]
 8002790:	e018      	b.n	80027c4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002792:	4b95      	ldr	r3, [pc, #596]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a94      	ldr	r2, [pc, #592]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 8002798:	f023 0301 	bic.w	r3, r3, #1
 800279c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279e:	f7fe fdcd 	bl	800133c <HAL_GetTick>
 80027a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a6:	f7fe fdc9 	bl	800133c <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e2ed      	b.n	8002d94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027b8:	4b8b      	ldr	r3, [pc, #556]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1f0      	bne.n	80027a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80a9 	beq.w	8002924 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027d2:	4b85      	ldr	r3, [pc, #532]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027dc:	4b82      	ldr	r3, [pc, #520]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 80027de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d007      	beq.n	80027f8 <HAL_RCC_OscConfig+0x308>
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	2b18      	cmp	r3, #24
 80027ec:	d13a      	bne.n	8002864 <HAL_RCC_OscConfig+0x374>
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d135      	bne.n	8002864 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027f8:	4b7b      	ldr	r3, [pc, #492]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002800:	2b00      	cmp	r3, #0
 8002802:	d005      	beq.n	8002810 <HAL_RCC_OscConfig+0x320>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	2b80      	cmp	r3, #128	@ 0x80
 800280a:	d001      	beq.n	8002810 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e2c1      	b.n	8002d94 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002810:	f7fe fdc4 	bl	800139c <HAL_GetREVID>
 8002814:	4603      	mov	r3, r0
 8002816:	f241 0203 	movw	r2, #4099	@ 0x1003
 800281a:	4293      	cmp	r3, r2
 800281c:	d817      	bhi.n	800284e <HAL_RCC_OscConfig+0x35e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	2b20      	cmp	r3, #32
 8002824:	d108      	bne.n	8002838 <HAL_RCC_OscConfig+0x348>
 8002826:	4b70      	ldr	r3, [pc, #448]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800282e:	4a6e      	ldr	r2, [pc, #440]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 8002830:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002834:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002836:	e075      	b.n	8002924 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002838:	4b6b      	ldr	r3, [pc, #428]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	069b      	lsls	r3, r3, #26
 8002846:	4968      	ldr	r1, [pc, #416]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 8002848:	4313      	orrs	r3, r2
 800284a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800284c:	e06a      	b.n	8002924 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800284e:	4b66      	ldr	r3, [pc, #408]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	061b      	lsls	r3, r3, #24
 800285c:	4962      	ldr	r1, [pc, #392]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 800285e:	4313      	orrs	r3, r2
 8002860:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002862:	e05f      	b.n	8002924 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d042      	beq.n	80028f2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800286c:	4b5e      	ldr	r3, [pc, #376]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a5d      	ldr	r2, [pc, #372]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 8002872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7fe fd60 	bl	800133c <HAL_GetTick>
 800287c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002880:	f7fe fd5c 	bl	800133c <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e280      	b.n	8002d94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002892:	4b55      	ldr	r3, [pc, #340]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800289e:	f7fe fd7d 	bl	800139c <HAL_GetREVID>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d817      	bhi.n	80028dc <HAL_RCC_OscConfig+0x3ec>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	2b20      	cmp	r3, #32
 80028b2:	d108      	bne.n	80028c6 <HAL_RCC_OscConfig+0x3d6>
 80028b4:	4b4c      	ldr	r3, [pc, #304]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80028bc:	4a4a      	ldr	r2, [pc, #296]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 80028be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80028c2:	6053      	str	r3, [r2, #4]
 80028c4:	e02e      	b.n	8002924 <HAL_RCC_OscConfig+0x434>
 80028c6:	4b48      	ldr	r3, [pc, #288]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	069b      	lsls	r3, r3, #26
 80028d4:	4944      	ldr	r1, [pc, #272]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	604b      	str	r3, [r1, #4]
 80028da:	e023      	b.n	8002924 <HAL_RCC_OscConfig+0x434>
 80028dc:	4b42      	ldr	r3, [pc, #264]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	061b      	lsls	r3, r3, #24
 80028ea:	493f      	ldr	r1, [pc, #252]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	60cb      	str	r3, [r1, #12]
 80028f0:	e018      	b.n	8002924 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80028f2:	4b3d      	ldr	r3, [pc, #244]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a3c      	ldr	r2, [pc, #240]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 80028f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fe:	f7fe fd1d 	bl	800133c <HAL_GetTick>
 8002902:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002906:	f7fe fd19 	bl	800133c <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e23d      	b.n	8002d94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002918:	4b33      	ldr	r3, [pc, #204]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1f0      	bne.n	8002906 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d036      	beq.n	800299e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d019      	beq.n	800296c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002938:	4b2b      	ldr	r3, [pc, #172]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 800293a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800293c:	4a2a      	ldr	r2, [pc, #168]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002944:	f7fe fcfa 	bl	800133c <HAL_GetTick>
 8002948:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800294c:	f7fe fcf6 	bl	800133c <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e21a      	b.n	8002d94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800295e:	4b22      	ldr	r3, [pc, #136]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 8002960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0x45c>
 800296a:	e018      	b.n	800299e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800296c:	4b1e      	ldr	r3, [pc, #120]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 800296e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002970:	4a1d      	ldr	r2, [pc, #116]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 8002972:	f023 0301 	bic.w	r3, r3, #1
 8002976:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002978:	f7fe fce0 	bl	800133c <HAL_GetTick>
 800297c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002980:	f7fe fcdc 	bl	800133c <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e200      	b.n	8002d94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002992:	4b15      	ldr	r3, [pc, #84]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 8002994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0320 	and.w	r3, r3, #32
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d039      	beq.n	8002a1e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d01c      	beq.n	80029ec <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029b2:	4b0d      	ldr	r3, [pc, #52]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a0c      	ldr	r2, [pc, #48]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 80029b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80029bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029be:	f7fe fcbd 	bl	800133c <HAL_GetTick>
 80029c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029c6:	f7fe fcb9 	bl	800133c <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e1dd      	b.n	8002d94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029d8:	4b03      	ldr	r3, [pc, #12]	@ (80029e8 <HAL_RCC_OscConfig+0x4f8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x4d6>
 80029e4:	e01b      	b.n	8002a1e <HAL_RCC_OscConfig+0x52e>
 80029e6:	bf00      	nop
 80029e8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029ec:	4b9b      	ldr	r3, [pc, #620]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a9a      	ldr	r2, [pc, #616]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 80029f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80029f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029f8:	f7fe fca0 	bl	800133c <HAL_GetTick>
 80029fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a00:	f7fe fc9c 	bl	800133c <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e1c0      	b.n	8002d94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a12:	4b92      	ldr	r3, [pc, #584]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 8081 	beq.w	8002b2e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a2c:	4b8c      	ldr	r3, [pc, #560]	@ (8002c60 <HAL_RCC_OscConfig+0x770>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a8b      	ldr	r2, [pc, #556]	@ (8002c60 <HAL_RCC_OscConfig+0x770>)
 8002a32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a38:	f7fe fc80 	bl	800133c <HAL_GetTick>
 8002a3c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a40:	f7fe fc7c 	bl	800133c <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b64      	cmp	r3, #100	@ 0x64
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e1a0      	b.n	8002d94 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a52:	4b83      	ldr	r3, [pc, #524]	@ (8002c60 <HAL_RCC_OscConfig+0x770>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d106      	bne.n	8002a74 <HAL_RCC_OscConfig+0x584>
 8002a66:	4b7d      	ldr	r3, [pc, #500]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a6a:	4a7c      	ldr	r2, [pc, #496]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a72:	e02d      	b.n	8002ad0 <HAL_RCC_OscConfig+0x5e0>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10c      	bne.n	8002a96 <HAL_RCC_OscConfig+0x5a6>
 8002a7c:	4b77      	ldr	r3, [pc, #476]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a80:	4a76      	ldr	r2, [pc, #472]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002a82:	f023 0301 	bic.w	r3, r3, #1
 8002a86:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a88:	4b74      	ldr	r3, [pc, #464]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8c:	4a73      	ldr	r2, [pc, #460]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002a8e:	f023 0304 	bic.w	r3, r3, #4
 8002a92:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a94:	e01c      	b.n	8002ad0 <HAL_RCC_OscConfig+0x5e0>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	2b05      	cmp	r3, #5
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x5c8>
 8002a9e:	4b6f      	ldr	r3, [pc, #444]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa2:	4a6e      	ldr	r2, [pc, #440]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002aa4:	f043 0304 	orr.w	r3, r3, #4
 8002aa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aaa:	4b6c      	ldr	r3, [pc, #432]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aae:	4a6b      	ldr	r2, [pc, #428]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ab6:	e00b      	b.n	8002ad0 <HAL_RCC_OscConfig+0x5e0>
 8002ab8:	4b68      	ldr	r3, [pc, #416]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002abc:	4a67      	ldr	r2, [pc, #412]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002abe:	f023 0301 	bic.w	r3, r3, #1
 8002ac2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ac4:	4b65      	ldr	r3, [pc, #404]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac8:	4a64      	ldr	r2, [pc, #400]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002aca:	f023 0304 	bic.w	r3, r3, #4
 8002ace:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d015      	beq.n	8002b04 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad8:	f7fe fc30 	bl	800133c <HAL_GetTick>
 8002adc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ade:	e00a      	b.n	8002af6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae0:	f7fe fc2c 	bl	800133c <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e14e      	b.n	8002d94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002af6:	4b59      	ldr	r3, [pc, #356]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0ee      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x5f0>
 8002b02:	e014      	b.n	8002b2e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b04:	f7fe fc1a 	bl	800133c <HAL_GetTick>
 8002b08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b0a:	e00a      	b.n	8002b22 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0c:	f7fe fc16 	bl	800133c <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e138      	b.n	8002d94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b22:	4b4e      	ldr	r3, [pc, #312]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1ee      	bne.n	8002b0c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 812d 	beq.w	8002d92 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b38:	4b48      	ldr	r3, [pc, #288]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b40:	2b18      	cmp	r3, #24
 8002b42:	f000 80bd 	beq.w	8002cc0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	f040 809e 	bne.w	8002c8c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b50:	4b42      	ldr	r3, [pc, #264]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a41      	ldr	r2, [pc, #260]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002b56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fbee 	bl	800133c <HAL_GetTick>
 8002b60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b64:	f7fe fbea 	bl	800133c <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e10e      	b.n	8002d94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b76:	4b39      	ldr	r3, [pc, #228]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b82:	4b36      	ldr	r3, [pc, #216]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002b84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b86:	4b37      	ldr	r3, [pc, #220]	@ (8002c64 <HAL_RCC_OscConfig+0x774>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b92:	0112      	lsls	r2, r2, #4
 8002b94:	430a      	orrs	r2, r1
 8002b96:	4931      	ldr	r1, [pc, #196]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	628b      	str	r3, [r1, #40]	@ 0x28
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002baa:	3b01      	subs	r3, #1
 8002bac:	025b      	lsls	r3, r3, #9
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	041b      	lsls	r3, r3, #16
 8002bba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	061b      	lsls	r3, r3, #24
 8002bc8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002bcc:	4923      	ldr	r1, [pc, #140]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002bd2:	4b22      	ldr	r3, [pc, #136]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd6:	4a21      	ldr	r2, [pc, #132]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002bd8:	f023 0301 	bic.w	r3, r3, #1
 8002bdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bde:	4b1f      	ldr	r3, [pc, #124]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002be0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002be2:	4b21      	ldr	r3, [pc, #132]	@ (8002c68 <HAL_RCC_OscConfig+0x778>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002bea:	00d2      	lsls	r2, r2, #3
 8002bec:	491b      	ldr	r1, [pc, #108]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf6:	f023 020c 	bic.w	r2, r3, #12
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfe:	4917      	ldr	r1, [pc, #92]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c04:	4b15      	ldr	r3, [pc, #84]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c08:	f023 0202 	bic.w	r2, r3, #2
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c10:	4912      	ldr	r1, [pc, #72]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c16:	4b11      	ldr	r3, [pc, #68]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1a:	4a10      	ldr	r2, [pc, #64]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c22:	4b0e      	ldr	r3, [pc, #56]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c26:	4a0d      	ldr	r2, [pc, #52]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002c28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c32:	4a0a      	ldr	r2, [pc, #40]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002c34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002c3a:	4b08      	ldr	r3, [pc, #32]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3e:	4a07      	ldr	r2, [pc, #28]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c46:	4b05      	ldr	r3, [pc, #20]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a04      	ldr	r2, [pc, #16]	@ (8002c5c <HAL_RCC_OscConfig+0x76c>)
 8002c4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c52:	f7fe fb73 	bl	800133c <HAL_GetTick>
 8002c56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c58:	e011      	b.n	8002c7e <HAL_RCC_OscConfig+0x78e>
 8002c5a:	bf00      	nop
 8002c5c:	58024400 	.word	0x58024400
 8002c60:	58024800 	.word	0x58024800
 8002c64:	fffffc0c 	.word	0xfffffc0c
 8002c68:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7fe fb66 	bl	800133c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e08a      	b.n	8002d94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c7e:	4b47      	ldr	r3, [pc, #284]	@ (8002d9c <HAL_RCC_OscConfig+0x8ac>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0x77c>
 8002c8a:	e082      	b.n	8002d92 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8c:	4b43      	ldr	r3, [pc, #268]	@ (8002d9c <HAL_RCC_OscConfig+0x8ac>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a42      	ldr	r2, [pc, #264]	@ (8002d9c <HAL_RCC_OscConfig+0x8ac>)
 8002c92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7fe fb50 	bl	800133c <HAL_GetTick>
 8002c9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca0:	f7fe fb4c 	bl	800133c <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e070      	b.n	8002d94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cb2:	4b3a      	ldr	r3, [pc, #232]	@ (8002d9c <HAL_RCC_OscConfig+0x8ac>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x7b0>
 8002cbe:	e068      	b.n	8002d92 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002cc0:	4b36      	ldr	r3, [pc, #216]	@ (8002d9c <HAL_RCC_OscConfig+0x8ac>)
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002cc6:	4b35      	ldr	r3, [pc, #212]	@ (8002d9c <HAL_RCC_OscConfig+0x8ac>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cca:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d031      	beq.n	8002d38 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f003 0203 	and.w	r2, r3, #3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d12a      	bne.n	8002d38 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	091b      	lsrs	r3, r3, #4
 8002ce6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d122      	bne.n	8002d38 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d11a      	bne.n	8002d38 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	0a5b      	lsrs	r3, r3, #9
 8002d06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d0e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d111      	bne.n	8002d38 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	0c1b      	lsrs	r3, r3, #16
 8002d18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d20:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d108      	bne.n	8002d38 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	0e1b      	lsrs	r3, r3, #24
 8002d2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d32:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d001      	beq.n	8002d3c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e02b      	b.n	8002d94 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002d3c:	4b17      	ldr	r3, [pc, #92]	@ (8002d9c <HAL_RCC_OscConfig+0x8ac>)
 8002d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d40:	08db      	lsrs	r3, r3, #3
 8002d42:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d46:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d01f      	beq.n	8002d92 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002d52:	4b12      	ldr	r3, [pc, #72]	@ (8002d9c <HAL_RCC_OscConfig+0x8ac>)
 8002d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d56:	4a11      	ldr	r2, [pc, #68]	@ (8002d9c <HAL_RCC_OscConfig+0x8ac>)
 8002d58:	f023 0301 	bic.w	r3, r3, #1
 8002d5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d5e:	f7fe faed 	bl	800133c <HAL_GetTick>
 8002d62:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002d64:	bf00      	nop
 8002d66:	f7fe fae9 	bl	800133c <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d0f9      	beq.n	8002d66 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d72:	4b0a      	ldr	r3, [pc, #40]	@ (8002d9c <HAL_RCC_OscConfig+0x8ac>)
 8002d74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d76:	4b0a      	ldr	r3, [pc, #40]	@ (8002da0 <HAL_RCC_OscConfig+0x8b0>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d7e:	00d2      	lsls	r2, r2, #3
 8002d80:	4906      	ldr	r1, [pc, #24]	@ (8002d9c <HAL_RCC_OscConfig+0x8ac>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002d86:	4b05      	ldr	r3, [pc, #20]	@ (8002d9c <HAL_RCC_OscConfig+0x8ac>)
 8002d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d8a:	4a04      	ldr	r2, [pc, #16]	@ (8002d9c <HAL_RCC_OscConfig+0x8ac>)
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3730      	adds	r7, #48	@ 0x30
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	58024400 	.word	0x58024400
 8002da0:	ffff0007 	.word	0xffff0007

08002da4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e19c      	b.n	80030f2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002db8:	4b8a      	ldr	r3, [pc, #552]	@ (8002fe4 <HAL_RCC_ClockConfig+0x240>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 030f 	and.w	r3, r3, #15
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d910      	bls.n	8002de8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc6:	4b87      	ldr	r3, [pc, #540]	@ (8002fe4 <HAL_RCC_ClockConfig+0x240>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f023 020f 	bic.w	r2, r3, #15
 8002dce:	4985      	ldr	r1, [pc, #532]	@ (8002fe4 <HAL_RCC_ClockConfig+0x240>)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd6:	4b83      	ldr	r3, [pc, #524]	@ (8002fe4 <HAL_RCC_ClockConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e184      	b.n	80030f2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d010      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	4b7b      	ldr	r3, [pc, #492]	@ (8002fe8 <HAL_RCC_ClockConfig+0x244>)
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d908      	bls.n	8002e16 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e04:	4b78      	ldr	r3, [pc, #480]	@ (8002fe8 <HAL_RCC_ClockConfig+0x244>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	4975      	ldr	r1, [pc, #468]	@ (8002fe8 <HAL_RCC_ClockConfig+0x244>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d010      	beq.n	8002e44 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695a      	ldr	r2, [r3, #20]
 8002e26:	4b70      	ldr	r3, [pc, #448]	@ (8002fe8 <HAL_RCC_ClockConfig+0x244>)
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d908      	bls.n	8002e44 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e32:	4b6d      	ldr	r3, [pc, #436]	@ (8002fe8 <HAL_RCC_ClockConfig+0x244>)
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	496a      	ldr	r1, [pc, #424]	@ (8002fe8 <HAL_RCC_ClockConfig+0x244>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0310 	and.w	r3, r3, #16
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d010      	beq.n	8002e72 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	699a      	ldr	r2, [r3, #24]
 8002e54:	4b64      	ldr	r3, [pc, #400]	@ (8002fe8 <HAL_RCC_ClockConfig+0x244>)
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d908      	bls.n	8002e72 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e60:	4b61      	ldr	r3, [pc, #388]	@ (8002fe8 <HAL_RCC_ClockConfig+0x244>)
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	495e      	ldr	r1, [pc, #376]	@ (8002fe8 <HAL_RCC_ClockConfig+0x244>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d010      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69da      	ldr	r2, [r3, #28]
 8002e82:	4b59      	ldr	r3, [pc, #356]	@ (8002fe8 <HAL_RCC_ClockConfig+0x244>)
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d908      	bls.n	8002ea0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e8e:	4b56      	ldr	r3, [pc, #344]	@ (8002fe8 <HAL_RCC_ClockConfig+0x244>)
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	4953      	ldr	r1, [pc, #332]	@ (8002fe8 <HAL_RCC_ClockConfig+0x244>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d010      	beq.n	8002ece <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	4b4d      	ldr	r3, [pc, #308]	@ (8002fe8 <HAL_RCC_ClockConfig+0x244>)
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f003 030f 	and.w	r3, r3, #15
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d908      	bls.n	8002ece <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ebc:	4b4a      	ldr	r3, [pc, #296]	@ (8002fe8 <HAL_RCC_ClockConfig+0x244>)
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	f023 020f 	bic.w	r2, r3, #15
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	4947      	ldr	r1, [pc, #284]	@ (8002fe8 <HAL_RCC_ClockConfig+0x244>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d055      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002eda:	4b43      	ldr	r3, [pc, #268]	@ (8002fe8 <HAL_RCC_ClockConfig+0x244>)
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	4940      	ldr	r1, [pc, #256]	@ (8002fe8 <HAL_RCC_ClockConfig+0x244>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d107      	bne.n	8002f04 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ef4:	4b3c      	ldr	r3, [pc, #240]	@ (8002fe8 <HAL_RCC_ClockConfig+0x244>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d121      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0f6      	b.n	80030f2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d107      	bne.n	8002f1c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f0c:	4b36      	ldr	r3, [pc, #216]	@ (8002fe8 <HAL_RCC_ClockConfig+0x244>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d115      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0ea      	b.n	80030f2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d107      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f24:	4b30      	ldr	r3, [pc, #192]	@ (8002fe8 <HAL_RCC_ClockConfig+0x244>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d109      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e0de      	b.n	80030f2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f34:	4b2c      	ldr	r3, [pc, #176]	@ (8002fe8 <HAL_RCC_ClockConfig+0x244>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0d6      	b.n	80030f2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f44:	4b28      	ldr	r3, [pc, #160]	@ (8002fe8 <HAL_RCC_ClockConfig+0x244>)
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	f023 0207 	bic.w	r2, r3, #7
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	4925      	ldr	r1, [pc, #148]	@ (8002fe8 <HAL_RCC_ClockConfig+0x244>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f56:	f7fe f9f1 	bl	800133c <HAL_GetTick>
 8002f5a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5c:	e00a      	b.n	8002f74 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f5e:	f7fe f9ed 	bl	800133c <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e0be      	b.n	80030f2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f74:	4b1c      	ldr	r3, [pc, #112]	@ (8002fe8 <HAL_RCC_ClockConfig+0x244>)
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d1eb      	bne.n	8002f5e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d010      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	4b14      	ldr	r3, [pc, #80]	@ (8002fe8 <HAL_RCC_ClockConfig+0x244>)
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d208      	bcs.n	8002fb4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa2:	4b11      	ldr	r3, [pc, #68]	@ (8002fe8 <HAL_RCC_ClockConfig+0x244>)
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f023 020f 	bic.w	r2, r3, #15
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	490e      	ldr	r1, [pc, #56]	@ (8002fe8 <HAL_RCC_ClockConfig+0x244>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe4 <HAL_RCC_ClockConfig+0x240>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d214      	bcs.n	8002fec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc2:	4b08      	ldr	r3, [pc, #32]	@ (8002fe4 <HAL_RCC_ClockConfig+0x240>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 020f 	bic.w	r2, r3, #15
 8002fca:	4906      	ldr	r1, [pc, #24]	@ (8002fe4 <HAL_RCC_ClockConfig+0x240>)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd2:	4b04      	ldr	r3, [pc, #16]	@ (8002fe4 <HAL_RCC_ClockConfig+0x240>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d005      	beq.n	8002fec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e086      	b.n	80030f2 <HAL_RCC_ClockConfig+0x34e>
 8002fe4:	52002000 	.word	0x52002000
 8002fe8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d010      	beq.n	800301a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	4b3f      	ldr	r3, [pc, #252]	@ (80030fc <HAL_RCC_ClockConfig+0x358>)
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003004:	429a      	cmp	r2, r3
 8003006:	d208      	bcs.n	800301a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003008:	4b3c      	ldr	r3, [pc, #240]	@ (80030fc <HAL_RCC_ClockConfig+0x358>)
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	4939      	ldr	r1, [pc, #228]	@ (80030fc <HAL_RCC_ClockConfig+0x358>)
 8003016:	4313      	orrs	r3, r2
 8003018:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	2b00      	cmp	r3, #0
 8003024:	d010      	beq.n	8003048 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	4b34      	ldr	r3, [pc, #208]	@ (80030fc <HAL_RCC_ClockConfig+0x358>)
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003032:	429a      	cmp	r2, r3
 8003034:	d208      	bcs.n	8003048 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003036:	4b31      	ldr	r3, [pc, #196]	@ (80030fc <HAL_RCC_ClockConfig+0x358>)
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	492e      	ldr	r1, [pc, #184]	@ (80030fc <HAL_RCC_ClockConfig+0x358>)
 8003044:	4313      	orrs	r3, r2
 8003046:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	2b00      	cmp	r3, #0
 8003052:	d010      	beq.n	8003076 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699a      	ldr	r2, [r3, #24]
 8003058:	4b28      	ldr	r3, [pc, #160]	@ (80030fc <HAL_RCC_ClockConfig+0x358>)
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003060:	429a      	cmp	r2, r3
 8003062:	d208      	bcs.n	8003076 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003064:	4b25      	ldr	r3, [pc, #148]	@ (80030fc <HAL_RCC_ClockConfig+0x358>)
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	4922      	ldr	r1, [pc, #136]	@ (80030fc <HAL_RCC_ClockConfig+0x358>)
 8003072:	4313      	orrs	r3, r2
 8003074:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0320 	and.w	r3, r3, #32
 800307e:	2b00      	cmp	r3, #0
 8003080:	d010      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69da      	ldr	r2, [r3, #28]
 8003086:	4b1d      	ldr	r3, [pc, #116]	@ (80030fc <HAL_RCC_ClockConfig+0x358>)
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800308e:	429a      	cmp	r2, r3
 8003090:	d208      	bcs.n	80030a4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003092:	4b1a      	ldr	r3, [pc, #104]	@ (80030fc <HAL_RCC_ClockConfig+0x358>)
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	4917      	ldr	r1, [pc, #92]	@ (80030fc <HAL_RCC_ClockConfig+0x358>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030a4:	f000 f834 	bl	8003110 <HAL_RCC_GetSysClockFreq>
 80030a8:	4602      	mov	r2, r0
 80030aa:	4b14      	ldr	r3, [pc, #80]	@ (80030fc <HAL_RCC_ClockConfig+0x358>)
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	0a1b      	lsrs	r3, r3, #8
 80030b0:	f003 030f 	and.w	r3, r3, #15
 80030b4:	4912      	ldr	r1, [pc, #72]	@ (8003100 <HAL_RCC_ClockConfig+0x35c>)
 80030b6:	5ccb      	ldrb	r3, [r1, r3]
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	fa22 f303 	lsr.w	r3, r2, r3
 80030c0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030c2:	4b0e      	ldr	r3, [pc, #56]	@ (80030fc <HAL_RCC_ClockConfig+0x358>)
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	4a0d      	ldr	r2, [pc, #52]	@ (8003100 <HAL_RCC_ClockConfig+0x35c>)
 80030cc:	5cd3      	ldrb	r3, [r2, r3]
 80030ce:	f003 031f 	and.w	r3, r3, #31
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	fa22 f303 	lsr.w	r3, r2, r3
 80030d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003104 <HAL_RCC_ClockConfig+0x360>)
 80030da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003108 <HAL_RCC_ClockConfig+0x364>)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80030e2:	4b0a      	ldr	r3, [pc, #40]	@ (800310c <HAL_RCC_ClockConfig+0x368>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fd ff94 	bl	8001014 <HAL_InitTick>
 80030ec:	4603      	mov	r3, r0
 80030ee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	58024400 	.word	0x58024400
 8003100:	0800ab0c 	.word	0x0800ab0c
 8003104:	24000004 	.word	0x24000004
 8003108:	24000000 	.word	0x24000000
 800310c:	24000008 	.word	0x24000008

08003110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003110:	b480      	push	{r7}
 8003112:	b089      	sub	sp, #36	@ 0x24
 8003114:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003116:	4bb3      	ldr	r3, [pc, #716]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800311e:	2b18      	cmp	r3, #24
 8003120:	f200 8155 	bhi.w	80033ce <HAL_RCC_GetSysClockFreq+0x2be>
 8003124:	a201      	add	r2, pc, #4	@ (adr r2, 800312c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312a:	bf00      	nop
 800312c:	08003191 	.word	0x08003191
 8003130:	080033cf 	.word	0x080033cf
 8003134:	080033cf 	.word	0x080033cf
 8003138:	080033cf 	.word	0x080033cf
 800313c:	080033cf 	.word	0x080033cf
 8003140:	080033cf 	.word	0x080033cf
 8003144:	080033cf 	.word	0x080033cf
 8003148:	080033cf 	.word	0x080033cf
 800314c:	080031b7 	.word	0x080031b7
 8003150:	080033cf 	.word	0x080033cf
 8003154:	080033cf 	.word	0x080033cf
 8003158:	080033cf 	.word	0x080033cf
 800315c:	080033cf 	.word	0x080033cf
 8003160:	080033cf 	.word	0x080033cf
 8003164:	080033cf 	.word	0x080033cf
 8003168:	080033cf 	.word	0x080033cf
 800316c:	080031bd 	.word	0x080031bd
 8003170:	080033cf 	.word	0x080033cf
 8003174:	080033cf 	.word	0x080033cf
 8003178:	080033cf 	.word	0x080033cf
 800317c:	080033cf 	.word	0x080033cf
 8003180:	080033cf 	.word	0x080033cf
 8003184:	080033cf 	.word	0x080033cf
 8003188:	080033cf 	.word	0x080033cf
 800318c:	080031c3 	.word	0x080031c3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003190:	4b94      	ldr	r3, [pc, #592]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d009      	beq.n	80031b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800319c:	4b91      	ldr	r3, [pc, #580]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	08db      	lsrs	r3, r3, #3
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	4a90      	ldr	r2, [pc, #576]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
 80031ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80031ae:	e111      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80031b0:	4b8d      	ldr	r3, [pc, #564]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031b2:	61bb      	str	r3, [r7, #24]
      break;
 80031b4:	e10e      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80031b6:	4b8d      	ldr	r3, [pc, #564]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031b8:	61bb      	str	r3, [r7, #24]
      break;
 80031ba:	e10b      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80031bc:	4b8c      	ldr	r3, [pc, #560]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80031be:	61bb      	str	r3, [r7, #24]
      break;
 80031c0:	e108      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031c2:	4b88      	ldr	r3, [pc, #544]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80031cc:	4b85      	ldr	r3, [pc, #532]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d0:	091b      	lsrs	r3, r3, #4
 80031d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031d6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031d8:	4b82      	ldr	r3, [pc, #520]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80031e2:	4b80      	ldr	r3, [pc, #512]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031e6:	08db      	lsrs	r3, r3, #3
 80031e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	fb02 f303 	mul.w	r3, r2, r3
 80031f2:	ee07 3a90 	vmov	s15, r3
 80031f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031fa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 80e1 	beq.w	80033c8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2b02      	cmp	r3, #2
 800320a:	f000 8083 	beq.w	8003314 <HAL_RCC_GetSysClockFreq+0x204>
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2b02      	cmp	r3, #2
 8003212:	f200 80a1 	bhi.w	8003358 <HAL_RCC_GetSysClockFreq+0x248>
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_RCC_GetSysClockFreq+0x114>
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d056      	beq.n	80032d0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003222:	e099      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003224:	4b6f      	ldr	r3, [pc, #444]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0320 	and.w	r3, r3, #32
 800322c:	2b00      	cmp	r3, #0
 800322e:	d02d      	beq.n	800328c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003230:	4b6c      	ldr	r3, [pc, #432]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	08db      	lsrs	r3, r3, #3
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	4a6b      	ldr	r2, [pc, #428]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800323c:	fa22 f303 	lsr.w	r3, r2, r3
 8003240:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	ee07 3a90 	vmov	s15, r3
 8003248:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	ee07 3a90 	vmov	s15, r3
 8003252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800325a:	4b62      	ldr	r3, [pc, #392]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003262:	ee07 3a90 	vmov	s15, r3
 8003266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800326a:	ed97 6a02 	vldr	s12, [r7, #8]
 800326e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80033f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800327a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800327e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003286:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800328a:	e087      	b.n	800339c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	ee07 3a90 	vmov	s15, r3
 8003292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003296:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80033f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800329a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800329e:	4b51      	ldr	r3, [pc, #324]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032a6:	ee07 3a90 	vmov	s15, r3
 80032aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80032b2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80033f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032ce:	e065      	b.n	800339c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	ee07 3a90 	vmov	s15, r3
 80032d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032da:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80033fc <HAL_RCC_GetSysClockFreq+0x2ec>
 80032de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032e2:	4b40      	ldr	r3, [pc, #256]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ea:	ee07 3a90 	vmov	s15, r3
 80032ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032f6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80033f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003302:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800330a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800330e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003312:	e043      	b.n	800339c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	ee07 3a90 	vmov	s15, r3
 800331a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800331e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003400 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003326:	4b2f      	ldr	r3, [pc, #188]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800332e:	ee07 3a90 	vmov	s15, r3
 8003332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003336:	ed97 6a02 	vldr	s12, [r7, #8]
 800333a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80033f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800333e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003346:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800334a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800334e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003352:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003356:	e021      	b.n	800339c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	ee07 3a90 	vmov	s15, r3
 800335e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003362:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80033fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800336a:	4b1e      	ldr	r3, [pc, #120]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800337a:	ed97 6a02 	vldr	s12, [r7, #8]
 800337e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80033f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800338a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800338e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003396:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800339a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800339c:	4b11      	ldr	r3, [pc, #68]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800339e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a0:	0a5b      	lsrs	r3, r3, #9
 80033a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033a6:	3301      	adds	r3, #1
 80033a8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	ee07 3a90 	vmov	s15, r3
 80033b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80033b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033c0:	ee17 3a90 	vmov	r3, s15
 80033c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80033c6:	e005      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	61bb      	str	r3, [r7, #24]
      break;
 80033cc:	e002      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80033ce:	4b07      	ldr	r3, [pc, #28]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033d0:	61bb      	str	r3, [r7, #24]
      break;
 80033d2:	bf00      	nop
  }

  return sysclockfreq;
 80033d4:	69bb      	ldr	r3, [r7, #24]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3724      	adds	r7, #36	@ 0x24
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	58024400 	.word	0x58024400
 80033e8:	03d09000 	.word	0x03d09000
 80033ec:	003d0900 	.word	0x003d0900
 80033f0:	007a1200 	.word	0x007a1200
 80033f4:	46000000 	.word	0x46000000
 80033f8:	4c742400 	.word	0x4c742400
 80033fc:	4a742400 	.word	0x4a742400
 8003400:	4af42400 	.word	0x4af42400

08003404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800340a:	f7ff fe81 	bl	8003110 <HAL_RCC_GetSysClockFreq>
 800340e:	4602      	mov	r2, r0
 8003410:	4b10      	ldr	r3, [pc, #64]	@ (8003454 <HAL_RCC_GetHCLKFreq+0x50>)
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	0a1b      	lsrs	r3, r3, #8
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	490f      	ldr	r1, [pc, #60]	@ (8003458 <HAL_RCC_GetHCLKFreq+0x54>)
 800341c:	5ccb      	ldrb	r3, [r1, r3]
 800341e:	f003 031f 	and.w	r3, r3, #31
 8003422:	fa22 f303 	lsr.w	r3, r2, r3
 8003426:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003428:	4b0a      	ldr	r3, [pc, #40]	@ (8003454 <HAL_RCC_GetHCLKFreq+0x50>)
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	4a09      	ldr	r2, [pc, #36]	@ (8003458 <HAL_RCC_GetHCLKFreq+0x54>)
 8003432:	5cd3      	ldrb	r3, [r2, r3]
 8003434:	f003 031f 	and.w	r3, r3, #31
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	fa22 f303 	lsr.w	r3, r2, r3
 800343e:	4a07      	ldr	r2, [pc, #28]	@ (800345c <HAL_RCC_GetHCLKFreq+0x58>)
 8003440:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003442:	4a07      	ldr	r2, [pc, #28]	@ (8003460 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003448:	4b04      	ldr	r3, [pc, #16]	@ (800345c <HAL_RCC_GetHCLKFreq+0x58>)
 800344a:	681b      	ldr	r3, [r3, #0]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	58024400 	.word	0x58024400
 8003458:	0800ab0c 	.word	0x0800ab0c
 800345c:	24000004 	.word	0x24000004
 8003460:	24000000 	.word	0x24000000

08003464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003468:	f7ff ffcc 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 800346c:	4602      	mov	r2, r0
 800346e:	4b06      	ldr	r3, [pc, #24]	@ (8003488 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	091b      	lsrs	r3, r3, #4
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	4904      	ldr	r1, [pc, #16]	@ (800348c <HAL_RCC_GetPCLK1Freq+0x28>)
 800347a:	5ccb      	ldrb	r3, [r1, r3]
 800347c:	f003 031f 	and.w	r3, r3, #31
 8003480:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003484:	4618      	mov	r0, r3
 8003486:	bd80      	pop	{r7, pc}
 8003488:	58024400 	.word	0x58024400
 800348c:	0800ab0c 	.word	0x0800ab0c

08003490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003494:	f7ff ffb6 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 8003498:	4602      	mov	r2, r0
 800349a:	4b06      	ldr	r3, [pc, #24]	@ (80034b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	0a1b      	lsrs	r3, r3, #8
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	4904      	ldr	r1, [pc, #16]	@ (80034b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034a6:	5ccb      	ldrb	r3, [r1, r3]
 80034a8:	f003 031f 	and.w	r3, r3, #31
 80034ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	58024400 	.word	0x58024400
 80034b8:	0800ab0c 	.word	0x0800ab0c

080034bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	223f      	movs	r2, #63	@ 0x3f
 80034ca:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003538 <HAL_RCC_GetClockConfig+0x7c>)
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	f003 0207 	and.w	r2, r3, #7
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80034d8:	4b17      	ldr	r3, [pc, #92]	@ (8003538 <HAL_RCC_GetClockConfig+0x7c>)
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80034e4:	4b14      	ldr	r3, [pc, #80]	@ (8003538 <HAL_RCC_GetClockConfig+0x7c>)
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	f003 020f 	and.w	r2, r3, #15
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80034f0:	4b11      	ldr	r3, [pc, #68]	@ (8003538 <HAL_RCC_GetClockConfig+0x7c>)
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80034fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003538 <HAL_RCC_GetClockConfig+0x7c>)
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003508:	4b0b      	ldr	r3, [pc, #44]	@ (8003538 <HAL_RCC_GetClockConfig+0x7c>)
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003514:	4b08      	ldr	r3, [pc, #32]	@ (8003538 <HAL_RCC_GetClockConfig+0x7c>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003520:	4b06      	ldr	r3, [pc, #24]	@ (800353c <HAL_RCC_GetClockConfig+0x80>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 020f 	and.w	r2, r3, #15
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	601a      	str	r2, [r3, #0]
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	58024400 	.word	0x58024400
 800353c:	52002000 	.word	0x52002000

08003540 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003544:	b0ca      	sub	sp, #296	@ 0x128
 8003546:	af00      	add	r7, sp, #0
 8003548:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800354c:	2300      	movs	r3, #0
 800354e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003552:	2300      	movs	r3, #0
 8003554:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003560:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003564:	2500      	movs	r5, #0
 8003566:	ea54 0305 	orrs.w	r3, r4, r5
 800356a:	d049      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800356c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003570:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003572:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003576:	d02f      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003578:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800357c:	d828      	bhi.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800357e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003582:	d01a      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003584:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003588:	d822      	bhi.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800358e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003592:	d007      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003594:	e01c      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003596:	4bb8      	ldr	r3, [pc, #736]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800359a:	4ab7      	ldr	r2, [pc, #732]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800359c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035a2:	e01a      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a8:	3308      	adds	r3, #8
 80035aa:	2102      	movs	r1, #2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f001 fc8f 	bl	8004ed0 <RCCEx_PLL2_Config>
 80035b2:	4603      	mov	r3, r0
 80035b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035b8:	e00f      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035be:	3328      	adds	r3, #40	@ 0x28
 80035c0:	2102      	movs	r1, #2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f001 fd36 	bl	8005034 <RCCEx_PLL3_Config>
 80035c8:	4603      	mov	r3, r0
 80035ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035ce:	e004      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035d6:	e000      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80035d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10a      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80035e2:	4ba5      	ldr	r3, [pc, #660]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80035ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035f0:	4aa1      	ldr	r2, [pc, #644]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035f2:	430b      	orrs	r3, r1
 80035f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80035f6:	e003      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003608:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800360c:	f04f 0900 	mov.w	r9, #0
 8003610:	ea58 0309 	orrs.w	r3, r8, r9
 8003614:	d047      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800361a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361c:	2b04      	cmp	r3, #4
 800361e:	d82a      	bhi.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003620:	a201      	add	r2, pc, #4	@ (adr r2, 8003628 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003626:	bf00      	nop
 8003628:	0800363d 	.word	0x0800363d
 800362c:	0800364b 	.word	0x0800364b
 8003630:	08003661 	.word	0x08003661
 8003634:	0800367f 	.word	0x0800367f
 8003638:	0800367f 	.word	0x0800367f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800363c:	4b8e      	ldr	r3, [pc, #568]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800363e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003640:	4a8d      	ldr	r2, [pc, #564]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003642:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003646:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003648:	e01a      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800364a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800364e:	3308      	adds	r3, #8
 8003650:	2100      	movs	r1, #0
 8003652:	4618      	mov	r0, r3
 8003654:	f001 fc3c 	bl	8004ed0 <RCCEx_PLL2_Config>
 8003658:	4603      	mov	r3, r0
 800365a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800365e:	e00f      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003664:	3328      	adds	r3, #40	@ 0x28
 8003666:	2100      	movs	r1, #0
 8003668:	4618      	mov	r0, r3
 800366a:	f001 fce3 	bl	8005034 <RCCEx_PLL3_Config>
 800366e:	4603      	mov	r3, r0
 8003670:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003674:	e004      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800367c:	e000      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800367e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003680:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10a      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003688:	4b7b      	ldr	r3, [pc, #492]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800368a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800368c:	f023 0107 	bic.w	r1, r3, #7
 8003690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003696:	4a78      	ldr	r2, [pc, #480]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003698:	430b      	orrs	r3, r1
 800369a:	6513      	str	r3, [r2, #80]	@ 0x50
 800369c:	e003      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80036a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ae:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80036b2:	f04f 0b00 	mov.w	fp, #0
 80036b6:	ea5a 030b 	orrs.w	r3, sl, fp
 80036ba:	d04c      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80036bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036c6:	d030      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80036c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036cc:	d829      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80036ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80036d0:	d02d      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80036d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80036d4:	d825      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80036d6:	2b80      	cmp	r3, #128	@ 0x80
 80036d8:	d018      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80036da:	2b80      	cmp	r3, #128	@ 0x80
 80036dc:	d821      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80036e2:	2b40      	cmp	r3, #64	@ 0x40
 80036e4:	d007      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80036e6:	e01c      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036e8:	4b63      	ldr	r3, [pc, #396]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ec:	4a62      	ldr	r2, [pc, #392]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036f4:	e01c      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fa:	3308      	adds	r3, #8
 80036fc:	2100      	movs	r1, #0
 80036fe:	4618      	mov	r0, r3
 8003700:	f001 fbe6 	bl	8004ed0 <RCCEx_PLL2_Config>
 8003704:	4603      	mov	r3, r0
 8003706:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800370a:	e011      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800370c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003710:	3328      	adds	r3, #40	@ 0x28
 8003712:	2100      	movs	r1, #0
 8003714:	4618      	mov	r0, r3
 8003716:	f001 fc8d 	bl	8005034 <RCCEx_PLL3_Config>
 800371a:	4603      	mov	r3, r0
 800371c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003720:	e006      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003728:	e002      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800372a:	bf00      	nop
 800372c:	e000      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800372e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003730:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10a      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003738:	4b4f      	ldr	r3, [pc, #316]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800373a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800373c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003746:	4a4c      	ldr	r2, [pc, #304]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003748:	430b      	orrs	r3, r1
 800374a:	6513      	str	r3, [r2, #80]	@ 0x50
 800374c:	e003      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003752:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003762:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003766:	2300      	movs	r3, #0
 8003768:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800376c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003770:	460b      	mov	r3, r1
 8003772:	4313      	orrs	r3, r2
 8003774:	d053      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800377a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800377e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003782:	d035      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003784:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003788:	d82e      	bhi.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800378a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800378e:	d031      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003790:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003794:	d828      	bhi.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003796:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800379a:	d01a      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800379c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037a0:	d822      	bhi.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80037a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037aa:	d007      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80037ac:	e01c      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ae:	4b32      	ldr	r3, [pc, #200]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b2:	4a31      	ldr	r2, [pc, #196]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037ba:	e01c      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c0:	3308      	adds	r3, #8
 80037c2:	2100      	movs	r1, #0
 80037c4:	4618      	mov	r0, r3
 80037c6:	f001 fb83 	bl	8004ed0 <RCCEx_PLL2_Config>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80037d0:	e011      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d6:	3328      	adds	r3, #40	@ 0x28
 80037d8:	2100      	movs	r1, #0
 80037da:	4618      	mov	r0, r3
 80037dc:	f001 fc2a 	bl	8005034 <RCCEx_PLL3_Config>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037e6:	e006      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037ee:	e002      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80037f0:	bf00      	nop
 80037f2:	e000      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80037f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10b      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80037fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003802:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800380e:	4a1a      	ldr	r2, [pc, #104]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003810:	430b      	orrs	r3, r1
 8003812:	6593      	str	r3, [r2, #88]	@ 0x58
 8003814:	e003      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003816:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800381a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800381e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003826:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800382a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800382e:	2300      	movs	r3, #0
 8003830:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003834:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003838:	460b      	mov	r3, r1
 800383a:	4313      	orrs	r3, r2
 800383c:	d056      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800383e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003842:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003846:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800384a:	d038      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800384c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003850:	d831      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003852:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003856:	d034      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003858:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800385c:	d82b      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800385e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003862:	d01d      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003864:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003868:	d825      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800386a:	2b00      	cmp	r3, #0
 800386c:	d006      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800386e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003872:	d00a      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003874:	e01f      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003876:	bf00      	nop
 8003878:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800387c:	4ba2      	ldr	r3, [pc, #648]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800387e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003880:	4aa1      	ldr	r2, [pc, #644]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003882:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003886:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003888:	e01c      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800388a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800388e:	3308      	adds	r3, #8
 8003890:	2100      	movs	r1, #0
 8003892:	4618      	mov	r0, r3
 8003894:	f001 fb1c 	bl	8004ed0 <RCCEx_PLL2_Config>
 8003898:	4603      	mov	r3, r0
 800389a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800389e:	e011      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a4:	3328      	adds	r3, #40	@ 0x28
 80038a6:	2100      	movs	r1, #0
 80038a8:	4618      	mov	r0, r3
 80038aa:	f001 fbc3 	bl	8005034 <RCCEx_PLL3_Config>
 80038ae:	4603      	mov	r3, r0
 80038b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038b4:	e006      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038bc:	e002      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80038be:	bf00      	nop
 80038c0:	e000      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80038c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10b      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80038cc:	4b8e      	ldr	r3, [pc, #568]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80038d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80038dc:	4a8a      	ldr	r2, [pc, #552]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038de:	430b      	orrs	r3, r1
 80038e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80038e2:	e003      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80038ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80038f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80038fc:	2300      	movs	r3, #0
 80038fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003902:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003906:	460b      	mov	r3, r1
 8003908:	4313      	orrs	r3, r2
 800390a:	d03a      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800390c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003912:	2b30      	cmp	r3, #48	@ 0x30
 8003914:	d01f      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003916:	2b30      	cmp	r3, #48	@ 0x30
 8003918:	d819      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800391a:	2b20      	cmp	r3, #32
 800391c:	d00c      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800391e:	2b20      	cmp	r3, #32
 8003920:	d815      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003922:	2b00      	cmp	r3, #0
 8003924:	d019      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003926:	2b10      	cmp	r3, #16
 8003928:	d111      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800392a:	4b77      	ldr	r3, [pc, #476]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800392c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392e:	4a76      	ldr	r2, [pc, #472]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003930:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003934:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003936:	e011      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800393c:	3308      	adds	r3, #8
 800393e:	2102      	movs	r1, #2
 8003940:	4618      	mov	r0, r3
 8003942:	f001 fac5 	bl	8004ed0 <RCCEx_PLL2_Config>
 8003946:	4603      	mov	r3, r0
 8003948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800394c:	e006      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003954:	e002      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003956:	bf00      	nop
 8003958:	e000      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800395a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800395c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10a      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003964:	4b68      	ldr	r3, [pc, #416]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003968:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800396c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003972:	4a65      	ldr	r2, [pc, #404]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003974:	430b      	orrs	r3, r1
 8003976:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003978:	e003      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800397e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800398e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003992:	2300      	movs	r3, #0
 8003994:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003998:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800399c:	460b      	mov	r3, r1
 800399e:	4313      	orrs	r3, r2
 80039a0:	d051      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80039a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039ac:	d035      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80039ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039b2:	d82e      	bhi.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80039b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039b8:	d031      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80039ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039be:	d828      	bhi.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80039c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039c4:	d01a      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80039c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039ca:	d822      	bhi.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80039d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039d4:	d007      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80039d6:	e01c      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039dc:	4a4a      	ldr	r2, [pc, #296]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039e4:	e01c      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ea:	3308      	adds	r3, #8
 80039ec:	2100      	movs	r1, #0
 80039ee:	4618      	mov	r0, r3
 80039f0:	f001 fa6e 	bl	8004ed0 <RCCEx_PLL2_Config>
 80039f4:	4603      	mov	r3, r0
 80039f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039fa:	e011      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a00:	3328      	adds	r3, #40	@ 0x28
 8003a02:	2100      	movs	r1, #0
 8003a04:	4618      	mov	r0, r3
 8003a06:	f001 fb15 	bl	8005034 <RCCEx_PLL3_Config>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a10:	e006      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a18:	e002      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a1a:	bf00      	nop
 8003a1c:	e000      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10a      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a28:	4b37      	ldr	r3, [pc, #220]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a2c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a36:	4a34      	ldr	r2, [pc, #208]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a3c:	e003      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003a52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a56:	2300      	movs	r3, #0
 8003a58:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003a5c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003a60:	460b      	mov	r3, r1
 8003a62:	4313      	orrs	r3, r2
 8003a64:	d056      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a70:	d033      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003a72:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a76:	d82c      	bhi.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a7c:	d02f      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003a7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a82:	d826      	bhi.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a88:	d02b      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003a8a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a8e:	d820      	bhi.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a94:	d012      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003a96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a9a:	d81a      	bhi.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d022      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aa4:	d115      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aaa:	3308      	adds	r3, #8
 8003aac:	2101      	movs	r1, #1
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f001 fa0e 	bl	8004ed0 <RCCEx_PLL2_Config>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003aba:	e015      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac0:	3328      	adds	r3, #40	@ 0x28
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f001 fab5 	bl	8005034 <RCCEx_PLL3_Config>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ad0:	e00a      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ad8:	e006      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ada:	bf00      	nop
 8003adc:	e004      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ade:	bf00      	nop
 8003ae0:	e002      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ae2:	bf00      	nop
 8003ae4:	e000      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10d      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003af0:	4b05      	ldr	r3, [pc, #20]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003af4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003afe:	4a02      	ldr	r2, [pc, #8]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b00:	430b      	orrs	r3, r1
 8003b02:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b04:	e006      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003b06:	bf00      	nop
 8003b08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003b20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b24:	2300      	movs	r3, #0
 8003b26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b2a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4313      	orrs	r3, r2
 8003b32:	d055      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b40:	d033      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003b42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b46:	d82c      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b4c:	d02f      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b52:	d826      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b58:	d02b      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003b5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b5e:	d820      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b64:	d012      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003b66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b6a:	d81a      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d022      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003b70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b74:	d115      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b7a:	3308      	adds	r3, #8
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f001 f9a6 	bl	8004ed0 <RCCEx_PLL2_Config>
 8003b84:	4603      	mov	r3, r0
 8003b86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b8a:	e015      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b90:	3328      	adds	r3, #40	@ 0x28
 8003b92:	2101      	movs	r1, #1
 8003b94:	4618      	mov	r0, r3
 8003b96:	f001 fa4d 	bl	8005034 <RCCEx_PLL3_Config>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ba0:	e00a      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ba8:	e006      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003baa:	bf00      	nop
 8003bac:	e004      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bae:	bf00      	nop
 8003bb0:	e002      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bb2:	bf00      	nop
 8003bb4:	e000      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10b      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003bc0:	4ba3      	ldr	r3, [pc, #652]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003bd0:	4a9f      	ldr	r2, [pc, #636]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd2:	430b      	orrs	r3, r1
 8003bd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bd6:	e003      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003bec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003bf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	d037      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c0a:	d00e      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003c0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c10:	d816      	bhi.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d018      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003c16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c1a:	d111      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c1c:	4b8c      	ldr	r3, [pc, #560]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c20:	4a8b      	ldr	r2, [pc, #556]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c28:	e00f      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c2e:	3308      	adds	r3, #8
 8003c30:	2101      	movs	r1, #1
 8003c32:	4618      	mov	r0, r3
 8003c34:	f001 f94c 	bl	8004ed0 <RCCEx_PLL2_Config>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c3e:	e004      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c46:	e000      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10a      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c52:	4b7f      	ldr	r3, [pc, #508]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c56:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c60:	4a7b      	ldr	r2, [pc, #492]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c62:	430b      	orrs	r3, r1
 8003c64:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c66:	e003      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c78:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c80:	2300      	movs	r3, #0
 8003c82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003c86:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	d039      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	d81c      	bhi.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca0:	08003cdd 	.word	0x08003cdd
 8003ca4:	08003cb1 	.word	0x08003cb1
 8003ca8:	08003cbf 	.word	0x08003cbf
 8003cac:	08003cdd 	.word	0x08003cdd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cb0:	4b67      	ldr	r3, [pc, #412]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb4:	4a66      	ldr	r2, [pc, #408]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003cbc:	e00f      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc2:	3308      	adds	r3, #8
 8003cc4:	2102      	movs	r1, #2
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f001 f902 	bl	8004ed0 <RCCEx_PLL2_Config>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003cd2:	e004      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cda:	e000      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10a      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ce6:	4b5a      	ldr	r3, [pc, #360]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cea:	f023 0103 	bic.w	r1, r3, #3
 8003cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cf4:	4a56      	ldr	r2, [pc, #344]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cf6:	430b      	orrs	r3, r1
 8003cf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cfa:	e003      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003d10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d14:	2300      	movs	r3, #0
 8003d16:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d1a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f000 809f 	beq.w	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d26:	4b4b      	ldr	r3, [pc, #300]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a4a      	ldr	r2, [pc, #296]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d32:	f7fd fb03 	bl	800133c <HAL_GetTick>
 8003d36:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d3a:	e00b      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d3c:	f7fd fafe 	bl	800133c <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b64      	cmp	r3, #100	@ 0x64
 8003d4a:	d903      	bls.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d52:	e005      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d54:	4b3f      	ldr	r3, [pc, #252]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0ed      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003d60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d179      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d68:	4b39      	ldr	r3, [pc, #228]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d6a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d74:	4053      	eors	r3, r2
 8003d76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d015      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d7e:	4b34      	ldr	r3, [pc, #208]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d86:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d8a:	4b31      	ldr	r3, [pc, #196]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8e:	4a30      	ldr	r2, [pc, #192]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d94:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d96:	4b2e      	ldr	r3, [pc, #184]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9a:	4a2d      	ldr	r2, [pc, #180]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003da0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003da2:	4a2b      	ldr	r2, [pc, #172]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003da8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003db2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003db6:	d118      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db8:	f7fd fac0 	bl	800133c <HAL_GetTick>
 8003dbc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dc0:	e00d      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc2:	f7fd fabb 	bl	800133c <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003dcc:	1ad2      	subs	r2, r2, r3
 8003dce:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d903      	bls.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003ddc:	e005      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dde:	4b1c      	ldr	r3, [pc, #112]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0eb      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d129      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003dfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e02:	d10e      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003e04:	4b12      	ldr	r3, [pc, #72]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e14:	091a      	lsrs	r2, r3, #4
 8003e16:	4b10      	ldr	r3, [pc, #64]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	4a0d      	ldr	r2, [pc, #52]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	6113      	str	r3, [r2, #16]
 8003e20:	e005      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003e22:	4b0b      	ldr	r3, [pc, #44]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	4a0a      	ldr	r2, [pc, #40]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e28:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003e2c:	6113      	str	r3, [r2, #16]
 8003e2e:	4b08      	ldr	r3, [pc, #32]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e30:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e3e:	4a04      	ldr	r2, [pc, #16]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e40:	430b      	orrs	r3, r1
 8003e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e44:	e00e      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003e4e:	e009      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003e50:	58024400 	.word	0x58024400
 8003e54:	58024800 	.word	0x58024800
 8003e58:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6c:	f002 0301 	and.w	r3, r2, #1
 8003e70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e74:	2300      	movs	r3, #0
 8003e76:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e7a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f000 8089 	beq.w	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e8c:	2b28      	cmp	r3, #40	@ 0x28
 8003e8e:	d86b      	bhi.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003e90:	a201      	add	r2, pc, #4	@ (adr r2, 8003e98 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e96:	bf00      	nop
 8003e98:	08003f71 	.word	0x08003f71
 8003e9c:	08003f69 	.word	0x08003f69
 8003ea0:	08003f69 	.word	0x08003f69
 8003ea4:	08003f69 	.word	0x08003f69
 8003ea8:	08003f69 	.word	0x08003f69
 8003eac:	08003f69 	.word	0x08003f69
 8003eb0:	08003f69 	.word	0x08003f69
 8003eb4:	08003f69 	.word	0x08003f69
 8003eb8:	08003f3d 	.word	0x08003f3d
 8003ebc:	08003f69 	.word	0x08003f69
 8003ec0:	08003f69 	.word	0x08003f69
 8003ec4:	08003f69 	.word	0x08003f69
 8003ec8:	08003f69 	.word	0x08003f69
 8003ecc:	08003f69 	.word	0x08003f69
 8003ed0:	08003f69 	.word	0x08003f69
 8003ed4:	08003f69 	.word	0x08003f69
 8003ed8:	08003f53 	.word	0x08003f53
 8003edc:	08003f69 	.word	0x08003f69
 8003ee0:	08003f69 	.word	0x08003f69
 8003ee4:	08003f69 	.word	0x08003f69
 8003ee8:	08003f69 	.word	0x08003f69
 8003eec:	08003f69 	.word	0x08003f69
 8003ef0:	08003f69 	.word	0x08003f69
 8003ef4:	08003f69 	.word	0x08003f69
 8003ef8:	08003f71 	.word	0x08003f71
 8003efc:	08003f69 	.word	0x08003f69
 8003f00:	08003f69 	.word	0x08003f69
 8003f04:	08003f69 	.word	0x08003f69
 8003f08:	08003f69 	.word	0x08003f69
 8003f0c:	08003f69 	.word	0x08003f69
 8003f10:	08003f69 	.word	0x08003f69
 8003f14:	08003f69 	.word	0x08003f69
 8003f18:	08003f71 	.word	0x08003f71
 8003f1c:	08003f69 	.word	0x08003f69
 8003f20:	08003f69 	.word	0x08003f69
 8003f24:	08003f69 	.word	0x08003f69
 8003f28:	08003f69 	.word	0x08003f69
 8003f2c:	08003f69 	.word	0x08003f69
 8003f30:	08003f69 	.word	0x08003f69
 8003f34:	08003f69 	.word	0x08003f69
 8003f38:	08003f71 	.word	0x08003f71
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f40:	3308      	adds	r3, #8
 8003f42:	2101      	movs	r1, #1
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 ffc3 	bl	8004ed0 <RCCEx_PLL2_Config>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f50:	e00f      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f56:	3328      	adds	r3, #40	@ 0x28
 8003f58:	2101      	movs	r1, #1
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f001 f86a 	bl	8005034 <RCCEx_PLL3_Config>
 8003f60:	4603      	mov	r3, r0
 8003f62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f66:	e004      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f6e:	e000      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003f70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10a      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f7a:	4bbf      	ldr	r3, [pc, #764]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f7e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f88:	4abb      	ldr	r2, [pc, #748]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f8a:	430b      	orrs	r3, r1
 8003f8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f8e:	e003      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa0:	f002 0302 	and.w	r3, r2, #2
 8003fa4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003fae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	d041      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fbe:	2b05      	cmp	r3, #5
 8003fc0:	d824      	bhi.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc8:	08004015 	.word	0x08004015
 8003fcc:	08003fe1 	.word	0x08003fe1
 8003fd0:	08003ff7 	.word	0x08003ff7
 8003fd4:	08004015 	.word	0x08004015
 8003fd8:	08004015 	.word	0x08004015
 8003fdc:	08004015 	.word	0x08004015
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe4:	3308      	adds	r3, #8
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 ff71 	bl	8004ed0 <RCCEx_PLL2_Config>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003ff4:	e00f      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ffa:	3328      	adds	r3, #40	@ 0x28
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	4618      	mov	r0, r3
 8004000:	f001 f818 	bl	8005034 <RCCEx_PLL3_Config>
 8004004:	4603      	mov	r3, r0
 8004006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800400a:	e004      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004012:	e000      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10a      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800401e:	4b96      	ldr	r3, [pc, #600]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004022:	f023 0107 	bic.w	r1, r3, #7
 8004026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800402c:	4a92      	ldr	r2, [pc, #584]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800402e:	430b      	orrs	r3, r1
 8004030:	6553      	str	r3, [r2, #84]	@ 0x54
 8004032:	e003      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004034:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004038:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800403c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004044:	f002 0304 	and.w	r3, r2, #4
 8004048:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800404c:	2300      	movs	r3, #0
 800404e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004052:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004056:	460b      	mov	r3, r1
 8004058:	4313      	orrs	r3, r2
 800405a:	d044      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800405c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004060:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004064:	2b05      	cmp	r3, #5
 8004066:	d825      	bhi.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004068:	a201      	add	r2, pc, #4	@ (adr r2, 8004070 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800406a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406e:	bf00      	nop
 8004070:	080040bd 	.word	0x080040bd
 8004074:	08004089 	.word	0x08004089
 8004078:	0800409f 	.word	0x0800409f
 800407c:	080040bd 	.word	0x080040bd
 8004080:	080040bd 	.word	0x080040bd
 8004084:	080040bd 	.word	0x080040bd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408c:	3308      	adds	r3, #8
 800408e:	2101      	movs	r1, #1
 8004090:	4618      	mov	r0, r3
 8004092:	f000 ff1d 	bl	8004ed0 <RCCEx_PLL2_Config>
 8004096:	4603      	mov	r3, r0
 8004098:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800409c:	e00f      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800409e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a2:	3328      	adds	r3, #40	@ 0x28
 80040a4:	2101      	movs	r1, #1
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 ffc4 	bl	8005034 <RCCEx_PLL3_Config>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80040b2:	e004      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040ba:	e000      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80040bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10b      	bne.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040c6:	4b6c      	ldr	r3, [pc, #432]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ca:	f023 0107 	bic.w	r1, r3, #7
 80040ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040d6:	4a68      	ldr	r2, [pc, #416]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040d8:	430b      	orrs	r3, r1
 80040da:	6593      	str	r3, [r2, #88]	@ 0x58
 80040dc:	e003      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ee:	f002 0320 	and.w	r3, r2, #32
 80040f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80040f6:	2300      	movs	r3, #0
 80040f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80040fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004100:	460b      	mov	r3, r1
 8004102:	4313      	orrs	r3, r2
 8004104:	d055      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800410a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800410e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004112:	d033      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004114:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004118:	d82c      	bhi.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800411a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800411e:	d02f      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004120:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004124:	d826      	bhi.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004126:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800412a:	d02b      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800412c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004130:	d820      	bhi.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004132:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004136:	d012      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004138:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800413c:	d81a      	bhi.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800413e:	2b00      	cmp	r3, #0
 8004140:	d022      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004142:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004146:	d115      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414c:	3308      	adds	r3, #8
 800414e:	2100      	movs	r1, #0
 8004150:	4618      	mov	r0, r3
 8004152:	f000 febd 	bl	8004ed0 <RCCEx_PLL2_Config>
 8004156:	4603      	mov	r3, r0
 8004158:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800415c:	e015      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800415e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004162:	3328      	adds	r3, #40	@ 0x28
 8004164:	2102      	movs	r1, #2
 8004166:	4618      	mov	r0, r3
 8004168:	f000 ff64 	bl	8005034 <RCCEx_PLL3_Config>
 800416c:	4603      	mov	r3, r0
 800416e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004172:	e00a      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800417a:	e006      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800417c:	bf00      	nop
 800417e:	e004      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004180:	bf00      	nop
 8004182:	e002      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004184:	bf00      	nop
 8004186:	e000      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800418a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10b      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004192:	4b39      	ldr	r3, [pc, #228]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004196:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800419a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800419e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a2:	4a35      	ldr	r2, [pc, #212]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041a4:	430b      	orrs	r3, r1
 80041a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80041a8:	e003      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80041b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ba:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80041be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80041c2:	2300      	movs	r3, #0
 80041c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80041c8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4313      	orrs	r3, r2
 80041d0:	d058      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80041d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041da:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80041de:	d033      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80041e0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80041e4:	d82c      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041ea:	d02f      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80041ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041f0:	d826      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041f6:	d02b      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80041f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041fc:	d820      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004202:	d012      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004204:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004208:	d81a      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800420a:	2b00      	cmp	r3, #0
 800420c:	d022      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800420e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004212:	d115      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004218:	3308      	adds	r3, #8
 800421a:	2100      	movs	r1, #0
 800421c:	4618      	mov	r0, r3
 800421e:	f000 fe57 	bl	8004ed0 <RCCEx_PLL2_Config>
 8004222:	4603      	mov	r3, r0
 8004224:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004228:	e015      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800422a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422e:	3328      	adds	r3, #40	@ 0x28
 8004230:	2102      	movs	r1, #2
 8004232:	4618      	mov	r0, r3
 8004234:	f000 fefe 	bl	8005034 <RCCEx_PLL3_Config>
 8004238:	4603      	mov	r3, r0
 800423a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800423e:	e00a      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004246:	e006      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004248:	bf00      	nop
 800424a:	e004      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800424c:	bf00      	nop
 800424e:	e002      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004250:	bf00      	nop
 8004252:	e000      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004254:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004256:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10e      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800425e:	4b06      	ldr	r3, [pc, #24]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004262:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800426e:	4a02      	ldr	r2, [pc, #8]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004270:	430b      	orrs	r3, r1
 8004272:	6593      	str	r3, [r2, #88]	@ 0x58
 8004274:	e006      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004276:	bf00      	nop
 8004278:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800427c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004280:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004290:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004294:	2300      	movs	r3, #0
 8004296:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800429a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800429e:	460b      	mov	r3, r1
 80042a0:	4313      	orrs	r3, r2
 80042a2:	d055      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80042a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80042ac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80042b0:	d033      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80042b2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80042b6:	d82c      	bhi.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042bc:	d02f      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80042be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042c2:	d826      	bhi.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042c4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80042c8:	d02b      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80042ca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80042ce:	d820      	bhi.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042d4:	d012      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80042d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042da:	d81a      	bhi.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d022      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80042e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042e4:	d115      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ea:	3308      	adds	r3, #8
 80042ec:	2100      	movs	r1, #0
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fdee 	bl	8004ed0 <RCCEx_PLL2_Config>
 80042f4:	4603      	mov	r3, r0
 80042f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80042fa:	e015      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004300:	3328      	adds	r3, #40	@ 0x28
 8004302:	2102      	movs	r1, #2
 8004304:	4618      	mov	r0, r3
 8004306:	f000 fe95 	bl	8005034 <RCCEx_PLL3_Config>
 800430a:	4603      	mov	r3, r0
 800430c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004310:	e00a      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004318:	e006      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800431a:	bf00      	nop
 800431c:	e004      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800431e:	bf00      	nop
 8004320:	e002      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004322:	bf00      	nop
 8004324:	e000      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004326:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004328:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10b      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004330:	4ba1      	ldr	r3, [pc, #644]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004334:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800433c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004340:	4a9d      	ldr	r2, [pc, #628]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004342:	430b      	orrs	r3, r1
 8004344:	6593      	str	r3, [r2, #88]	@ 0x58
 8004346:	e003      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004348:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800434c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004358:	f002 0308 	and.w	r3, r2, #8
 800435c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004360:	2300      	movs	r3, #0
 8004362:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004366:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800436a:	460b      	mov	r3, r1
 800436c:	4313      	orrs	r3, r2
 800436e:	d01e      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004374:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004378:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800437c:	d10c      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800437e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004382:	3328      	adds	r3, #40	@ 0x28
 8004384:	2102      	movs	r1, #2
 8004386:	4618      	mov	r0, r3
 8004388:	f000 fe54 	bl	8005034 <RCCEx_PLL3_Config>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004398:	4b87      	ldr	r3, [pc, #540]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800439a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800439c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043a8:	4a83      	ldr	r2, [pc, #524]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043aa:	430b      	orrs	r3, r1
 80043ac:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b6:	f002 0310 	and.w	r3, r2, #16
 80043ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043be:	2300      	movs	r3, #0
 80043c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80043c4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80043c8:	460b      	mov	r3, r1
 80043ca:	4313      	orrs	r3, r2
 80043cc:	d01e      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80043ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043da:	d10c      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e0:	3328      	adds	r3, #40	@ 0x28
 80043e2:	2102      	movs	r1, #2
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fe25 	bl	8005034 <RCCEx_PLL3_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043f6:	4b70      	ldr	r3, [pc, #448]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80043fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004402:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004406:	4a6c      	ldr	r2, [pc, #432]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004408:	430b      	orrs	r3, r1
 800440a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800440c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004414:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004418:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800441c:	2300      	movs	r3, #0
 800441e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004422:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004426:	460b      	mov	r3, r1
 8004428:	4313      	orrs	r3, r2
 800442a:	d03e      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800442c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004430:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004434:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004438:	d022      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800443a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800443e:	d81b      	bhi.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004448:	d00b      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800444a:	e015      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800444c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004450:	3308      	adds	r3, #8
 8004452:	2100      	movs	r1, #0
 8004454:	4618      	mov	r0, r3
 8004456:	f000 fd3b 	bl	8004ed0 <RCCEx_PLL2_Config>
 800445a:	4603      	mov	r3, r0
 800445c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004460:	e00f      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004466:	3328      	adds	r3, #40	@ 0x28
 8004468:	2102      	movs	r1, #2
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fde2 	bl	8005034 <RCCEx_PLL3_Config>
 8004470:	4603      	mov	r3, r0
 8004472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004476:	e004      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800447e:	e000      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10b      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800448a:	4b4b      	ldr	r3, [pc, #300]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800448c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800448e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004496:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800449a:	4a47      	ldr	r2, [pc, #284]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800449c:	430b      	orrs	r3, r1
 800449e:	6593      	str	r3, [r2, #88]	@ 0x58
 80044a0:	e003      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80044b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044b8:	2300      	movs	r3, #0
 80044ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80044bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80044c0:	460b      	mov	r3, r1
 80044c2:	4313      	orrs	r3, r2
 80044c4:	d03b      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80044c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80044d2:	d01f      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80044d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80044d8:	d818      	bhi.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80044da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044de:	d003      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80044e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044e4:	d007      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80044e6:	e011      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044e8:	4b33      	ldr	r3, [pc, #204]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ec:	4a32      	ldr	r2, [pc, #200]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80044f4:	e00f      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fa:	3328      	adds	r3, #40	@ 0x28
 80044fc:	2101      	movs	r1, #1
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fd98 	bl	8005034 <RCCEx_PLL3_Config>
 8004504:	4603      	mov	r3, r0
 8004506:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800450a:	e004      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004512:	e000      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004514:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004516:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10b      	bne.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800451e:	4b26      	ldr	r3, [pc, #152]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004522:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800452a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800452e:	4a22      	ldr	r2, [pc, #136]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004530:	430b      	orrs	r3, r1
 8004532:	6553      	str	r3, [r2, #84]	@ 0x54
 8004534:	e003      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004536:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800453a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800453e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004546:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800454a:	673b      	str	r3, [r7, #112]	@ 0x70
 800454c:	2300      	movs	r3, #0
 800454e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004550:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004554:	460b      	mov	r3, r1
 8004556:	4313      	orrs	r3, r2
 8004558:	d034      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800455a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004568:	d007      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800456a:	e011      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800456c:	4b12      	ldr	r3, [pc, #72]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800456e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004570:	4a11      	ldr	r2, [pc, #68]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004572:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004576:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004578:	e00e      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800457a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457e:	3308      	adds	r3, #8
 8004580:	2102      	movs	r1, #2
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fca4 	bl	8004ed0 <RCCEx_PLL2_Config>
 8004588:	4603      	mov	r3, r0
 800458a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800458e:	e003      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004596:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004598:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10d      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80045a0:	4b05      	ldr	r3, [pc, #20]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80045a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ae:	4a02      	ldr	r2, [pc, #8]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045b0:	430b      	orrs	r3, r1
 80045b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045b4:	e006      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80045b6:	bf00      	nop
 80045b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045cc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80045d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045d2:	2300      	movs	r3, #0
 80045d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80045da:	460b      	mov	r3, r1
 80045dc:	4313      	orrs	r3, r2
 80045de:	d00c      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e4:	3328      	adds	r3, #40	@ 0x28
 80045e6:	2102      	movs	r1, #2
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 fd23 	bl	8005034 <RCCEx_PLL3_Config>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80045fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004602:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004606:	663b      	str	r3, [r7, #96]	@ 0x60
 8004608:	2300      	movs	r3, #0
 800460a:	667b      	str	r3, [r7, #100]	@ 0x64
 800460c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004610:	460b      	mov	r3, r1
 8004612:	4313      	orrs	r3, r2
 8004614:	d038      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800461e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004622:	d018      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004624:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004628:	d811      	bhi.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800462a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800462e:	d014      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004630:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004634:	d80b      	bhi.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004636:	2b00      	cmp	r3, #0
 8004638:	d011      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800463a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800463e:	d106      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004640:	4bc3      	ldr	r3, [pc, #780]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004644:	4ac2      	ldr	r2, [pc, #776]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004646:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800464a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800464c:	e008      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004654:	e004      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004656:	bf00      	nop
 8004658:	e002      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800465a:	bf00      	nop
 800465c:	e000      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800465e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004660:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10b      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004668:	4bb9      	ldr	r3, [pc, #740]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800466a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800466c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004674:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004678:	4ab5      	ldr	r2, [pc, #724]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800467a:	430b      	orrs	r3, r1
 800467c:	6553      	str	r3, [r2, #84]	@ 0x54
 800467e:	e003      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004680:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004684:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800468c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004690:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004694:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004696:	2300      	movs	r3, #0
 8004698:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800469a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800469e:	460b      	mov	r3, r1
 80046a0:	4313      	orrs	r3, r2
 80046a2:	d009      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046a4:	4baa      	ldr	r3, [pc, #680]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80046ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046b2:	4aa7      	ldr	r2, [pc, #668]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046b4:	430b      	orrs	r3, r1
 80046b6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80046b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80046c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80046c6:	2300      	movs	r3, #0
 80046c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80046ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80046ce:	460b      	mov	r3, r1
 80046d0:	4313      	orrs	r3, r2
 80046d2:	d00a      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80046d4:	4b9e      	ldr	r3, [pc, #632]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80046dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80046e4:	4a9a      	ldr	r2, [pc, #616]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046e6:	430b      	orrs	r3, r1
 80046e8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80046f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046f8:	2300      	movs	r3, #0
 80046fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004700:	460b      	mov	r3, r1
 8004702:	4313      	orrs	r3, r2
 8004704:	d009      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004706:	4b92      	ldr	r3, [pc, #584]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004708:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800470a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800470e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004712:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004714:	4a8e      	ldr	r2, [pc, #568]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004716:	430b      	orrs	r3, r1
 8004718:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800471a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004722:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004726:	643b      	str	r3, [r7, #64]	@ 0x40
 8004728:	2300      	movs	r3, #0
 800472a:	647b      	str	r3, [r7, #68]	@ 0x44
 800472c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004730:	460b      	mov	r3, r1
 8004732:	4313      	orrs	r3, r2
 8004734:	d00e      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004736:	4b86      	ldr	r3, [pc, #536]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	4a85      	ldr	r2, [pc, #532]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800473c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004740:	6113      	str	r3, [r2, #16]
 8004742:	4b83      	ldr	r3, [pc, #524]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004744:	6919      	ldr	r1, [r3, #16]
 8004746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800474a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800474e:	4a80      	ldr	r2, [pc, #512]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004750:	430b      	orrs	r3, r1
 8004752:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004760:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004762:	2300      	movs	r3, #0
 8004764:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004766:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800476a:	460b      	mov	r3, r1
 800476c:	4313      	orrs	r3, r2
 800476e:	d009      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004770:	4b77      	ldr	r3, [pc, #476]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004774:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800477c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800477e:	4a74      	ldr	r2, [pc, #464]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004780:	430b      	orrs	r3, r1
 8004782:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004790:	633b      	str	r3, [r7, #48]	@ 0x30
 8004792:	2300      	movs	r3, #0
 8004794:	637b      	str	r3, [r7, #52]	@ 0x34
 8004796:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800479a:	460b      	mov	r3, r1
 800479c:	4313      	orrs	r3, r2
 800479e:	d00a      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047a0:	4b6b      	ldr	r3, [pc, #428]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047a4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80047a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047b0:	4a67      	ldr	r2, [pc, #412]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047b2:	430b      	orrs	r3, r1
 80047b4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80047b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047be:	2100      	movs	r1, #0
 80047c0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80047cc:	460b      	mov	r3, r1
 80047ce:	4313      	orrs	r3, r2
 80047d0:	d011      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d6:	3308      	adds	r3, #8
 80047d8:	2100      	movs	r1, #0
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fb78 	bl	8004ed0 <RCCEx_PLL2_Config>
 80047e0:	4603      	mov	r3, r0
 80047e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80047e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80047f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fe:	2100      	movs	r1, #0
 8004800:	6239      	str	r1, [r7, #32]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	627b      	str	r3, [r7, #36]	@ 0x24
 8004808:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800480c:	460b      	mov	r3, r1
 800480e:	4313      	orrs	r3, r2
 8004810:	d011      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004816:	3308      	adds	r3, #8
 8004818:	2101      	movs	r1, #1
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fb58 	bl	8004ed0 <RCCEx_PLL2_Config>
 8004820:	4603      	mov	r3, r0
 8004822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004826:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800482e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004832:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483e:	2100      	movs	r1, #0
 8004840:	61b9      	str	r1, [r7, #24]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	61fb      	str	r3, [r7, #28]
 8004848:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800484c:	460b      	mov	r3, r1
 800484e:	4313      	orrs	r3, r2
 8004850:	d011      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004856:	3308      	adds	r3, #8
 8004858:	2102      	movs	r1, #2
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fb38 	bl	8004ed0 <RCCEx_PLL2_Config>
 8004860:	4603      	mov	r3, r0
 8004862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800486e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004872:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800487a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487e:	2100      	movs	r1, #0
 8004880:	6139      	str	r1, [r7, #16]
 8004882:	f003 0308 	and.w	r3, r3, #8
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800488c:	460b      	mov	r3, r1
 800488e:	4313      	orrs	r3, r2
 8004890:	d011      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004896:	3328      	adds	r3, #40	@ 0x28
 8004898:	2100      	movs	r1, #0
 800489a:	4618      	mov	r0, r3
 800489c:	f000 fbca 	bl	8005034 <RCCEx_PLL3_Config>
 80048a0:	4603      	mov	r3, r0
 80048a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80048a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80048b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048be:	2100      	movs	r1, #0
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	f003 0310 	and.w	r3, r3, #16
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80048cc:	460b      	mov	r3, r1
 80048ce:	4313      	orrs	r3, r2
 80048d0:	d011      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d6:	3328      	adds	r3, #40	@ 0x28
 80048d8:	2101      	movs	r1, #1
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fbaa 	bl	8005034 <RCCEx_PLL3_Config>
 80048e0:	4603      	mov	r3, r0
 80048e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80048e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80048f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fe:	2100      	movs	r1, #0
 8004900:	6039      	str	r1, [r7, #0]
 8004902:	f003 0320 	and.w	r3, r3, #32
 8004906:	607b      	str	r3, [r7, #4]
 8004908:	e9d7 1200 	ldrd	r1, r2, [r7]
 800490c:	460b      	mov	r3, r1
 800490e:	4313      	orrs	r3, r2
 8004910:	d011      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004916:	3328      	adds	r3, #40	@ 0x28
 8004918:	2102      	movs	r1, #2
 800491a:	4618      	mov	r0, r3
 800491c:	f000 fb8a 	bl	8005034 <RCCEx_PLL3_Config>
 8004920:	4603      	mov	r3, r0
 8004922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800492e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004932:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004936:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	e000      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
}
 8004944:	4618      	mov	r0, r3
 8004946:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800494a:	46bd      	mov	sp, r7
 800494c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004950:	58024400 	.word	0x58024400

08004954 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004958:	f7fe fd54 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 800495c:	4602      	mov	r2, r0
 800495e:	4b06      	ldr	r3, [pc, #24]	@ (8004978 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	091b      	lsrs	r3, r3, #4
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	4904      	ldr	r1, [pc, #16]	@ (800497c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800496a:	5ccb      	ldrb	r3, [r1, r3]
 800496c:	f003 031f 	and.w	r3, r3, #31
 8004970:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004974:	4618      	mov	r0, r3
 8004976:	bd80      	pop	{r7, pc}
 8004978:	58024400 	.word	0x58024400
 800497c:	0800ab0c 	.word	0x0800ab0c

08004980 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004980:	b480      	push	{r7}
 8004982:	b089      	sub	sp, #36	@ 0x24
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004988:	4ba1      	ldr	r3, [pc, #644]	@ (8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800498a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498c:	f003 0303 	and.w	r3, r3, #3
 8004990:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004992:	4b9f      	ldr	r3, [pc, #636]	@ (8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004996:	0b1b      	lsrs	r3, r3, #12
 8004998:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800499c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800499e:	4b9c      	ldr	r3, [pc, #624]	@ (8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a2:	091b      	lsrs	r3, r3, #4
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80049aa:	4b99      	ldr	r3, [pc, #612]	@ (8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ae:	08db      	lsrs	r3, r3, #3
 80049b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	fb02 f303 	mul.w	r3, r2, r3
 80049ba:	ee07 3a90 	vmov	s15, r3
 80049be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 8111 	beq.w	8004bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	f000 8083 	beq.w	8004adc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	2b02      	cmp	r3, #2
 80049da:	f200 80a1 	bhi.w	8004b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d056      	beq.n	8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80049ea:	e099      	b.n	8004b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049ec:	4b88      	ldr	r3, [pc, #544]	@ (8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0320 	and.w	r3, r3, #32
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d02d      	beq.n	8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049f8:	4b85      	ldr	r3, [pc, #532]	@ (8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	08db      	lsrs	r3, r3, #3
 80049fe:	f003 0303 	and.w	r3, r3, #3
 8004a02:	4a84      	ldr	r2, [pc, #528]	@ (8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004a04:	fa22 f303 	lsr.w	r3, r2, r3
 8004a08:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	ee07 3a90 	vmov	s15, r3
 8004a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	ee07 3a90 	vmov	s15, r3
 8004a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a22:	4b7b      	ldr	r3, [pc, #492]	@ (8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a2a:	ee07 3a90 	vmov	s15, r3
 8004a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a36:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a52:	e087      	b.n	8004b64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c1c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a66:	4b6a      	ldr	r3, [pc, #424]	@ (8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a7a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a96:	e065      	b.n	8004b64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aaa:	4b59      	ldr	r3, [pc, #356]	@ (8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab2:	ee07 3a90 	vmov	s15, r3
 8004ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004abe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ada:	e043      	b.n	8004b64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	ee07 3a90 	vmov	s15, r3
 8004ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aee:	4b48      	ldr	r3, [pc, #288]	@ (8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af6:	ee07 3a90 	vmov	s15, r3
 8004afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b02:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b1e:	e021      	b.n	8004b64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b32:	4b37      	ldr	r3, [pc, #220]	@ (8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b3a:	ee07 3a90 	vmov	s15, r3
 8004b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b46:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b62:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004b64:	4b2a      	ldr	r3, [pc, #168]	@ (8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b68:	0a5b      	lsrs	r3, r3, #9
 8004b6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b6e:	ee07 3a90 	vmov	s15, r3
 8004b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b8a:	ee17 2a90 	vmov	r2, s15
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004b92:	4b1f      	ldr	r3, [pc, #124]	@ (8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b96:	0c1b      	lsrs	r3, r3, #16
 8004b98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b9c:	ee07 3a90 	vmov	s15, r3
 8004ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ba8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bac:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bb8:	ee17 2a90 	vmov	r2, s15
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004bc0:	4b13      	ldr	r3, [pc, #76]	@ (8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc4:	0e1b      	lsrs	r3, r3, #24
 8004bc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bca:	ee07 3a90 	vmov	s15, r3
 8004bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bda:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004be6:	ee17 2a90 	vmov	r2, s15
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004bee:	e008      	b.n	8004c02 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	609a      	str	r2, [r3, #8]
}
 8004c02:	bf00      	nop
 8004c04:	3724      	adds	r7, #36	@ 0x24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	58024400 	.word	0x58024400
 8004c14:	03d09000 	.word	0x03d09000
 8004c18:	46000000 	.word	0x46000000
 8004c1c:	4c742400 	.word	0x4c742400
 8004c20:	4a742400 	.word	0x4a742400
 8004c24:	4af42400 	.word	0x4af42400

08004c28 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b089      	sub	sp, #36	@ 0x24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c30:	4ba1      	ldr	r3, [pc, #644]	@ (8004eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c34:	f003 0303 	and.w	r3, r3, #3
 8004c38:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004c3a:	4b9f      	ldr	r3, [pc, #636]	@ (8004eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3e:	0d1b      	lsrs	r3, r3, #20
 8004c40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c44:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004c46:	4b9c      	ldr	r3, [pc, #624]	@ (8004eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4a:	0a1b      	lsrs	r3, r3, #8
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004c52:	4b99      	ldr	r3, [pc, #612]	@ (8004eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c56:	08db      	lsrs	r3, r3, #3
 8004c58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	fb02 f303 	mul.w	r3, r2, r3
 8004c62:	ee07 3a90 	vmov	s15, r3
 8004c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 8111 	beq.w	8004e98 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	f000 8083 	beq.w	8004d84 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	f200 80a1 	bhi.w	8004dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d056      	beq.n	8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004c92:	e099      	b.n	8004dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c94:	4b88      	ldr	r3, [pc, #544]	@ (8004eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0320 	and.w	r3, r3, #32
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d02d      	beq.n	8004cfc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ca0:	4b85      	ldr	r3, [pc, #532]	@ (8004eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	08db      	lsrs	r3, r3, #3
 8004ca6:	f003 0303 	and.w	r3, r3, #3
 8004caa:	4a84      	ldr	r2, [pc, #528]	@ (8004ebc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004cac:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	ee07 3a90 	vmov	s15, r3
 8004cb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	ee07 3a90 	vmov	s15, r3
 8004cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cca:	4b7b      	ldr	r3, [pc, #492]	@ (8004eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd2:	ee07 3a90 	vmov	s15, r3
 8004cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cde:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cf6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004cfa:	e087      	b.n	8004e0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	ee07 3a90 	vmov	s15, r3
 8004d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d06:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d0e:	4b6a      	ldr	r3, [pc, #424]	@ (8004eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d16:	ee07 3a90 	vmov	s15, r3
 8004d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d22:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d3e:	e065      	b.n	8004e0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	ee07 3a90 	vmov	s15, r3
 8004d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d4a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d52:	4b59      	ldr	r3, [pc, #356]	@ (8004eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d5a:	ee07 3a90 	vmov	s15, r3
 8004d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d66:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d82:	e043      	b.n	8004e0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	ee07 3a90 	vmov	s15, r3
 8004d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004ecc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d96:	4b48      	ldr	r3, [pc, #288]	@ (8004eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9e:	ee07 3a90 	vmov	s15, r3
 8004da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004daa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004db6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dc6:	e021      	b.n	8004e0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	ee07 3a90 	vmov	s15, r3
 8004dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dda:	4b37      	ldr	r3, [pc, #220]	@ (8004eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de2:	ee07 3a90 	vmov	s15, r3
 8004de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e0a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8004eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e10:	0a5b      	lsrs	r3, r3, #9
 8004e12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e16:	ee07 3a90 	vmov	s15, r3
 8004e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e26:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e32:	ee17 2a90 	vmov	r2, s15
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8004eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3e:	0c1b      	lsrs	r3, r3, #16
 8004e40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e44:	ee07 3a90 	vmov	s15, r3
 8004e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e54:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e60:	ee17 2a90 	vmov	r2, s15
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004e68:	4b13      	ldr	r3, [pc, #76]	@ (8004eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6c:	0e1b      	lsrs	r3, r3, #24
 8004e6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e72:	ee07 3a90 	vmov	s15, r3
 8004e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e82:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e8e:	ee17 2a90 	vmov	r2, s15
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e96:	e008      	b.n	8004eaa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	609a      	str	r2, [r3, #8]
}
 8004eaa:	bf00      	nop
 8004eac:	3724      	adds	r7, #36	@ 0x24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	58024400 	.word	0x58024400
 8004ebc:	03d09000 	.word	0x03d09000
 8004ec0:	46000000 	.word	0x46000000
 8004ec4:	4c742400 	.word	0x4c742400
 8004ec8:	4a742400 	.word	0x4a742400
 8004ecc:	4af42400 	.word	0x4af42400

08004ed0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ede:	4b53      	ldr	r3, [pc, #332]	@ (800502c <RCCEx_PLL2_Config+0x15c>)
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	d101      	bne.n	8004eee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e099      	b.n	8005022 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004eee:	4b4f      	ldr	r3, [pc, #316]	@ (800502c <RCCEx_PLL2_Config+0x15c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a4e      	ldr	r2, [pc, #312]	@ (800502c <RCCEx_PLL2_Config+0x15c>)
 8004ef4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ef8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004efa:	f7fc fa1f 	bl	800133c <HAL_GetTick>
 8004efe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f00:	e008      	b.n	8004f14 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f02:	f7fc fa1b 	bl	800133c <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d901      	bls.n	8004f14 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e086      	b.n	8005022 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f14:	4b45      	ldr	r3, [pc, #276]	@ (800502c <RCCEx_PLL2_Config+0x15c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1f0      	bne.n	8004f02 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004f20:	4b42      	ldr	r3, [pc, #264]	@ (800502c <RCCEx_PLL2_Config+0x15c>)
 8004f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f24:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	031b      	lsls	r3, r3, #12
 8004f2e:	493f      	ldr	r1, [pc, #252]	@ (800502c <RCCEx_PLL2_Config+0x15c>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	025b      	lsls	r3, r3, #9
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	041b      	lsls	r3, r3, #16
 8004f52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f56:	431a      	orrs	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	061b      	lsls	r3, r3, #24
 8004f60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f64:	4931      	ldr	r1, [pc, #196]	@ (800502c <RCCEx_PLL2_Config+0x15c>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004f6a:	4b30      	ldr	r3, [pc, #192]	@ (800502c <RCCEx_PLL2_Config+0x15c>)
 8004f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	492d      	ldr	r1, [pc, #180]	@ (800502c <RCCEx_PLL2_Config+0x15c>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004f7c:	4b2b      	ldr	r3, [pc, #172]	@ (800502c <RCCEx_PLL2_Config+0x15c>)
 8004f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f80:	f023 0220 	bic.w	r2, r3, #32
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	4928      	ldr	r1, [pc, #160]	@ (800502c <RCCEx_PLL2_Config+0x15c>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004f8e:	4b27      	ldr	r3, [pc, #156]	@ (800502c <RCCEx_PLL2_Config+0x15c>)
 8004f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f92:	4a26      	ldr	r2, [pc, #152]	@ (800502c <RCCEx_PLL2_Config+0x15c>)
 8004f94:	f023 0310 	bic.w	r3, r3, #16
 8004f98:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004f9a:	4b24      	ldr	r3, [pc, #144]	@ (800502c <RCCEx_PLL2_Config+0x15c>)
 8004f9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f9e:	4b24      	ldr	r3, [pc, #144]	@ (8005030 <RCCEx_PLL2_Config+0x160>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	69d2      	ldr	r2, [r2, #28]
 8004fa6:	00d2      	lsls	r2, r2, #3
 8004fa8:	4920      	ldr	r1, [pc, #128]	@ (800502c <RCCEx_PLL2_Config+0x15c>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004fae:	4b1f      	ldr	r3, [pc, #124]	@ (800502c <RCCEx_PLL2_Config+0x15c>)
 8004fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb2:	4a1e      	ldr	r2, [pc, #120]	@ (800502c <RCCEx_PLL2_Config+0x15c>)
 8004fb4:	f043 0310 	orr.w	r3, r3, #16
 8004fb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d106      	bne.n	8004fce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800502c <RCCEx_PLL2_Config+0x15c>)
 8004fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc4:	4a19      	ldr	r2, [pc, #100]	@ (800502c <RCCEx_PLL2_Config+0x15c>)
 8004fc6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004fca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004fcc:	e00f      	b.n	8004fee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d106      	bne.n	8004fe2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004fd4:	4b15      	ldr	r3, [pc, #84]	@ (800502c <RCCEx_PLL2_Config+0x15c>)
 8004fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd8:	4a14      	ldr	r2, [pc, #80]	@ (800502c <RCCEx_PLL2_Config+0x15c>)
 8004fda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fde:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004fe0:	e005      	b.n	8004fee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004fe2:	4b12      	ldr	r3, [pc, #72]	@ (800502c <RCCEx_PLL2_Config+0x15c>)
 8004fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe6:	4a11      	ldr	r2, [pc, #68]	@ (800502c <RCCEx_PLL2_Config+0x15c>)
 8004fe8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004fec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004fee:	4b0f      	ldr	r3, [pc, #60]	@ (800502c <RCCEx_PLL2_Config+0x15c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a0e      	ldr	r2, [pc, #56]	@ (800502c <RCCEx_PLL2_Config+0x15c>)
 8004ff4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ff8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ffa:	f7fc f99f 	bl	800133c <HAL_GetTick>
 8004ffe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005000:	e008      	b.n	8005014 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005002:	f7fc f99b 	bl	800133c <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e006      	b.n	8005022 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005014:	4b05      	ldr	r3, [pc, #20]	@ (800502c <RCCEx_PLL2_Config+0x15c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0f0      	beq.n	8005002 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005020:	7bfb      	ldrb	r3, [r7, #15]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	58024400 	.word	0x58024400
 8005030:	ffff0007 	.word	0xffff0007

08005034 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005042:	4b53      	ldr	r3, [pc, #332]	@ (8005190 <RCCEx_PLL3_Config+0x15c>)
 8005044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	2b03      	cmp	r3, #3
 800504c:	d101      	bne.n	8005052 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e099      	b.n	8005186 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005052:	4b4f      	ldr	r3, [pc, #316]	@ (8005190 <RCCEx_PLL3_Config+0x15c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a4e      	ldr	r2, [pc, #312]	@ (8005190 <RCCEx_PLL3_Config+0x15c>)
 8005058:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800505c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800505e:	f7fc f96d 	bl	800133c <HAL_GetTick>
 8005062:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005064:	e008      	b.n	8005078 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005066:	f7fc f969 	bl	800133c <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d901      	bls.n	8005078 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e086      	b.n	8005186 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005078:	4b45      	ldr	r3, [pc, #276]	@ (8005190 <RCCEx_PLL3_Config+0x15c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1f0      	bne.n	8005066 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005084:	4b42      	ldr	r3, [pc, #264]	@ (8005190 <RCCEx_PLL3_Config+0x15c>)
 8005086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005088:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	051b      	lsls	r3, r3, #20
 8005092:	493f      	ldr	r1, [pc, #252]	@ (8005190 <RCCEx_PLL3_Config+0x15c>)
 8005094:	4313      	orrs	r3, r2
 8005096:	628b      	str	r3, [r1, #40]	@ 0x28
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	3b01      	subs	r3, #1
 800509e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	3b01      	subs	r3, #1
 80050a8:	025b      	lsls	r3, r3, #9
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	431a      	orrs	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	3b01      	subs	r3, #1
 80050b4:	041b      	lsls	r3, r3, #16
 80050b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	061b      	lsls	r3, r3, #24
 80050c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80050c8:	4931      	ldr	r1, [pc, #196]	@ (8005190 <RCCEx_PLL3_Config+0x15c>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80050ce:	4b30      	ldr	r3, [pc, #192]	@ (8005190 <RCCEx_PLL3_Config+0x15c>)
 80050d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	492d      	ldr	r1, [pc, #180]	@ (8005190 <RCCEx_PLL3_Config+0x15c>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80050e0:	4b2b      	ldr	r3, [pc, #172]	@ (8005190 <RCCEx_PLL3_Config+0x15c>)
 80050e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	4928      	ldr	r1, [pc, #160]	@ (8005190 <RCCEx_PLL3_Config+0x15c>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80050f2:	4b27      	ldr	r3, [pc, #156]	@ (8005190 <RCCEx_PLL3_Config+0x15c>)
 80050f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f6:	4a26      	ldr	r2, [pc, #152]	@ (8005190 <RCCEx_PLL3_Config+0x15c>)
 80050f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80050fe:	4b24      	ldr	r3, [pc, #144]	@ (8005190 <RCCEx_PLL3_Config+0x15c>)
 8005100:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005102:	4b24      	ldr	r3, [pc, #144]	@ (8005194 <RCCEx_PLL3_Config+0x160>)
 8005104:	4013      	ands	r3, r2
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	69d2      	ldr	r2, [r2, #28]
 800510a:	00d2      	lsls	r2, r2, #3
 800510c:	4920      	ldr	r1, [pc, #128]	@ (8005190 <RCCEx_PLL3_Config+0x15c>)
 800510e:	4313      	orrs	r3, r2
 8005110:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005112:	4b1f      	ldr	r3, [pc, #124]	@ (8005190 <RCCEx_PLL3_Config+0x15c>)
 8005114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005116:	4a1e      	ldr	r2, [pc, #120]	@ (8005190 <RCCEx_PLL3_Config+0x15c>)
 8005118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800511c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d106      	bne.n	8005132 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005124:	4b1a      	ldr	r3, [pc, #104]	@ (8005190 <RCCEx_PLL3_Config+0x15c>)
 8005126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005128:	4a19      	ldr	r2, [pc, #100]	@ (8005190 <RCCEx_PLL3_Config+0x15c>)
 800512a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800512e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005130:	e00f      	b.n	8005152 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d106      	bne.n	8005146 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005138:	4b15      	ldr	r3, [pc, #84]	@ (8005190 <RCCEx_PLL3_Config+0x15c>)
 800513a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513c:	4a14      	ldr	r2, [pc, #80]	@ (8005190 <RCCEx_PLL3_Config+0x15c>)
 800513e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005142:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005144:	e005      	b.n	8005152 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005146:	4b12      	ldr	r3, [pc, #72]	@ (8005190 <RCCEx_PLL3_Config+0x15c>)
 8005148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514a:	4a11      	ldr	r2, [pc, #68]	@ (8005190 <RCCEx_PLL3_Config+0x15c>)
 800514c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005150:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005152:	4b0f      	ldr	r3, [pc, #60]	@ (8005190 <RCCEx_PLL3_Config+0x15c>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a0e      	ldr	r2, [pc, #56]	@ (8005190 <RCCEx_PLL3_Config+0x15c>)
 8005158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800515c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800515e:	f7fc f8ed 	bl	800133c <HAL_GetTick>
 8005162:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005164:	e008      	b.n	8005178 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005166:	f7fc f8e9 	bl	800133c <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d901      	bls.n	8005178 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e006      	b.n	8005186 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005178:	4b05      	ldr	r3, [pc, #20]	@ (8005190 <RCCEx_PLL3_Config+0x15c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0f0      	beq.n	8005166 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005184:	7bfb      	ldrb	r3, [r7, #15]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	58024400 	.word	0x58024400
 8005194:	ffff0007 	.word	0xffff0007

08005198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e049      	b.n	800523e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d106      	bne.n	80051c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f841 	bl	8005246 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3304      	adds	r3, #4
 80051d4:	4619      	mov	r1, r3
 80051d6:	4610      	mov	r0, r2
 80051d8:	f000 f9e8 	bl	80055ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800524e:	bf00      	nop
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
	...

0800525c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b01      	cmp	r3, #1
 800526e:	d001      	beq.n	8005274 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e054      	b.n	800531e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2202      	movs	r2, #2
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68da      	ldr	r2, [r3, #12]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0201 	orr.w	r2, r2, #1
 800528a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a26      	ldr	r2, [pc, #152]	@ (800532c <HAL_TIM_Base_Start_IT+0xd0>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d022      	beq.n	80052dc <HAL_TIM_Base_Start_IT+0x80>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800529e:	d01d      	beq.n	80052dc <HAL_TIM_Base_Start_IT+0x80>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a22      	ldr	r2, [pc, #136]	@ (8005330 <HAL_TIM_Base_Start_IT+0xd4>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d018      	beq.n	80052dc <HAL_TIM_Base_Start_IT+0x80>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a21      	ldr	r2, [pc, #132]	@ (8005334 <HAL_TIM_Base_Start_IT+0xd8>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d013      	beq.n	80052dc <HAL_TIM_Base_Start_IT+0x80>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a1f      	ldr	r2, [pc, #124]	@ (8005338 <HAL_TIM_Base_Start_IT+0xdc>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00e      	beq.n	80052dc <HAL_TIM_Base_Start_IT+0x80>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a1e      	ldr	r2, [pc, #120]	@ (800533c <HAL_TIM_Base_Start_IT+0xe0>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d009      	beq.n	80052dc <HAL_TIM_Base_Start_IT+0x80>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a1c      	ldr	r2, [pc, #112]	@ (8005340 <HAL_TIM_Base_Start_IT+0xe4>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d004      	beq.n	80052dc <HAL_TIM_Base_Start_IT+0x80>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a1b      	ldr	r2, [pc, #108]	@ (8005344 <HAL_TIM_Base_Start_IT+0xe8>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d115      	bne.n	8005308 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	4b19      	ldr	r3, [pc, #100]	@ (8005348 <HAL_TIM_Base_Start_IT+0xec>)
 80052e4:	4013      	ands	r3, r2
 80052e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b06      	cmp	r3, #6
 80052ec:	d015      	beq.n	800531a <HAL_TIM_Base_Start_IT+0xbe>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052f4:	d011      	beq.n	800531a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f042 0201 	orr.w	r2, r2, #1
 8005304:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005306:	e008      	b.n	800531a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0201 	orr.w	r2, r2, #1
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	e000      	b.n	800531c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800531a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	40010000 	.word	0x40010000
 8005330:	40000400 	.word	0x40000400
 8005334:	40000800 	.word	0x40000800
 8005338:	40000c00 	.word	0x40000c00
 800533c:	40010400 	.word	0x40010400
 8005340:	40001800 	.word	0x40001800
 8005344:	40014000 	.word	0x40014000
 8005348:	00010007 	.word	0x00010007

0800534c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d020      	beq.n	80053b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d01b      	beq.n	80053b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f06f 0202 	mvn.w	r2, #2
 8005380:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	f003 0303 	and.w	r3, r3, #3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f8e9 	bl	800556e <HAL_TIM_IC_CaptureCallback>
 800539c:	e005      	b.n	80053aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f8db 	bl	800555a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f8ec 	bl	8005582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d020      	beq.n	80053fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f003 0304 	and.w	r3, r3, #4
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d01b      	beq.n	80053fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f06f 0204 	mvn.w	r2, #4
 80053cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2202      	movs	r2, #2
 80053d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f8c3 	bl	800556e <HAL_TIM_IC_CaptureCallback>
 80053e8:	e005      	b.n	80053f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f8b5 	bl	800555a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f8c6 	bl	8005582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f003 0308 	and.w	r3, r3, #8
 8005402:	2b00      	cmp	r3, #0
 8005404:	d020      	beq.n	8005448 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f003 0308 	and.w	r3, r3, #8
 800540c:	2b00      	cmp	r3, #0
 800540e:	d01b      	beq.n	8005448 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f06f 0208 	mvn.w	r2, #8
 8005418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2204      	movs	r2, #4
 800541e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	f003 0303 	and.w	r3, r3, #3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f89d 	bl	800556e <HAL_TIM_IC_CaptureCallback>
 8005434:	e005      	b.n	8005442 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f88f 	bl	800555a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f8a0 	bl	8005582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f003 0310 	and.w	r3, r3, #16
 800544e:	2b00      	cmp	r3, #0
 8005450:	d020      	beq.n	8005494 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f003 0310 	and.w	r3, r3, #16
 8005458:	2b00      	cmp	r3, #0
 800545a:	d01b      	beq.n	8005494 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f06f 0210 	mvn.w	r2, #16
 8005464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2208      	movs	r2, #8
 800546a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f877 	bl	800556e <HAL_TIM_IC_CaptureCallback>
 8005480:	e005      	b.n	800548e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f869 	bl	800555a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f87a 	bl	8005582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00c      	beq.n	80054b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d007      	beq.n	80054b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0201 	mvn.w	r2, #1
 80054b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7fb fbc4 	bl	8000c40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d104      	bne.n	80054cc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00c      	beq.n	80054e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d007      	beq.n	80054e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80054de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 f913 	bl	800570c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00c      	beq.n	800550a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d007      	beq.n	800550a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f90b 	bl	8005720 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00c      	beq.n	800552e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800551a:	2b00      	cmp	r3, #0
 800551c:	d007      	beq.n	800552e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f834 	bl	8005596 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	f003 0320 	and.w	r3, r3, #32
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00c      	beq.n	8005552 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f003 0320 	and.w	r3, r3, #32
 800553e:	2b00      	cmp	r3, #0
 8005540:	d007      	beq.n	8005552 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f06f 0220 	mvn.w	r2, #32
 800554a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f8d3 	bl	80056f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005552:	bf00      	nop
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005596:	b480      	push	{r7}
 8005598:	b083      	sub	sp, #12
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
	...

080055ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a46      	ldr	r2, [pc, #280]	@ (80056d8 <TIM_Base_SetConfig+0x12c>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d013      	beq.n	80055ec <TIM_Base_SetConfig+0x40>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055ca:	d00f      	beq.n	80055ec <TIM_Base_SetConfig+0x40>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a43      	ldr	r2, [pc, #268]	@ (80056dc <TIM_Base_SetConfig+0x130>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d00b      	beq.n	80055ec <TIM_Base_SetConfig+0x40>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a42      	ldr	r2, [pc, #264]	@ (80056e0 <TIM_Base_SetConfig+0x134>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d007      	beq.n	80055ec <TIM_Base_SetConfig+0x40>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a41      	ldr	r2, [pc, #260]	@ (80056e4 <TIM_Base_SetConfig+0x138>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d003      	beq.n	80055ec <TIM_Base_SetConfig+0x40>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a40      	ldr	r2, [pc, #256]	@ (80056e8 <TIM_Base_SetConfig+0x13c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d108      	bne.n	80055fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a35      	ldr	r2, [pc, #212]	@ (80056d8 <TIM_Base_SetConfig+0x12c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d01f      	beq.n	8005646 <TIM_Base_SetConfig+0x9a>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800560c:	d01b      	beq.n	8005646 <TIM_Base_SetConfig+0x9a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a32      	ldr	r2, [pc, #200]	@ (80056dc <TIM_Base_SetConfig+0x130>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d017      	beq.n	8005646 <TIM_Base_SetConfig+0x9a>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a31      	ldr	r2, [pc, #196]	@ (80056e0 <TIM_Base_SetConfig+0x134>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d013      	beq.n	8005646 <TIM_Base_SetConfig+0x9a>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a30      	ldr	r2, [pc, #192]	@ (80056e4 <TIM_Base_SetConfig+0x138>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d00f      	beq.n	8005646 <TIM_Base_SetConfig+0x9a>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a2f      	ldr	r2, [pc, #188]	@ (80056e8 <TIM_Base_SetConfig+0x13c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d00b      	beq.n	8005646 <TIM_Base_SetConfig+0x9a>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a2e      	ldr	r2, [pc, #184]	@ (80056ec <TIM_Base_SetConfig+0x140>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d007      	beq.n	8005646 <TIM_Base_SetConfig+0x9a>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a2d      	ldr	r2, [pc, #180]	@ (80056f0 <TIM_Base_SetConfig+0x144>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d003      	beq.n	8005646 <TIM_Base_SetConfig+0x9a>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a2c      	ldr	r2, [pc, #176]	@ (80056f4 <TIM_Base_SetConfig+0x148>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d108      	bne.n	8005658 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800564c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	4313      	orrs	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	4313      	orrs	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	689a      	ldr	r2, [r3, #8]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a16      	ldr	r2, [pc, #88]	@ (80056d8 <TIM_Base_SetConfig+0x12c>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00f      	beq.n	80056a4 <TIM_Base_SetConfig+0xf8>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a18      	ldr	r2, [pc, #96]	@ (80056e8 <TIM_Base_SetConfig+0x13c>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d00b      	beq.n	80056a4 <TIM_Base_SetConfig+0xf8>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a17      	ldr	r2, [pc, #92]	@ (80056ec <TIM_Base_SetConfig+0x140>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d007      	beq.n	80056a4 <TIM_Base_SetConfig+0xf8>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a16      	ldr	r2, [pc, #88]	@ (80056f0 <TIM_Base_SetConfig+0x144>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d003      	beq.n	80056a4 <TIM_Base_SetConfig+0xf8>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a15      	ldr	r2, [pc, #84]	@ (80056f4 <TIM_Base_SetConfig+0x148>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d103      	bne.n	80056ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	691a      	ldr	r2, [r3, #16]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d105      	bne.n	80056ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f023 0201 	bic.w	r2, r3, #1
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	611a      	str	r2, [r3, #16]
  }
}
 80056ca:	bf00      	nop
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	40010000 	.word	0x40010000
 80056dc:	40000400 	.word	0x40000400
 80056e0:	40000800 	.word	0x40000800
 80056e4:	40000c00 	.word	0x40000c00
 80056e8:	40010400 	.word	0x40010400
 80056ec:	40014000 	.word	0x40014000
 80056f0:	40014400 	.word	0x40014400
 80056f4:	40014800 	.word	0x40014800

080056f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e042      	b.n	80057cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800574c:	2b00      	cmp	r3, #0
 800574e:	d106      	bne.n	800575e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7fb fb75 	bl	8000e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2224      	movs	r2, #36	@ 0x24
 8005762:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 0201 	bic.w	r2, r2, #1
 8005774:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 fe1e 	bl	80063c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f8b3 	bl	80058f0 <UART_SetConfig>
 800578a:	4603      	mov	r3, r0
 800578c:	2b01      	cmp	r3, #1
 800578e:	d101      	bne.n	8005794 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e01b      	b.n	80057cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0201 	orr.w	r2, r2, #1
 80057c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fe9d 	bl	8006504 <UART_CheckIdleState>
 80057ca:	4603      	mov	r3, r0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b08a      	sub	sp, #40	@ 0x28
 80057d8:	af02      	add	r7, sp, #8
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	603b      	str	r3, [r7, #0]
 80057e0:	4613      	mov	r3, r2
 80057e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ea:	2b20      	cmp	r3, #32
 80057ec:	d17b      	bne.n	80058e6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d002      	beq.n	80057fa <HAL_UART_Transmit+0x26>
 80057f4:	88fb      	ldrh	r3, [r7, #6]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e074      	b.n	80058e8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2221      	movs	r2, #33	@ 0x21
 800580a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800580e:	f7fb fd95 	bl	800133c <HAL_GetTick>
 8005812:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	88fa      	ldrh	r2, [r7, #6]
 8005818:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	88fa      	ldrh	r2, [r7, #6]
 8005820:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800582c:	d108      	bne.n	8005840 <HAL_UART_Transmit+0x6c>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d104      	bne.n	8005840 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005836:	2300      	movs	r3, #0
 8005838:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	61bb      	str	r3, [r7, #24]
 800583e:	e003      	b.n	8005848 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005844:	2300      	movs	r3, #0
 8005846:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005848:	e030      	b.n	80058ac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2200      	movs	r2, #0
 8005852:	2180      	movs	r1, #128	@ 0x80
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 feff 	bl	8006658 <UART_WaitOnFlagUntilTimeout>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d005      	beq.n	800586c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2220      	movs	r2, #32
 8005864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e03d      	b.n	80058e8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10b      	bne.n	800588a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	461a      	mov	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005880:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	3302      	adds	r3, #2
 8005886:	61bb      	str	r3, [r7, #24]
 8005888:	e007      	b.n	800589a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	781a      	ldrb	r2, [r3, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	3301      	adds	r3, #1
 8005898:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	3b01      	subs	r3, #1
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1c8      	bne.n	800584a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	2200      	movs	r2, #0
 80058c0:	2140      	movs	r1, #64	@ 0x40
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 fec8 	bl	8006658 <UART_WaitOnFlagUntilTimeout>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d005      	beq.n	80058da <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2220      	movs	r2, #32
 80058d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e006      	b.n	80058e8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2220      	movs	r2, #32
 80058de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	e000      	b.n	80058e8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80058e6:	2302      	movs	r3, #2
  }
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3720      	adds	r7, #32
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058f4:	b092      	sub	sp, #72	@ 0x48
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	431a      	orrs	r2, r3
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	431a      	orrs	r2, r3
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	4313      	orrs	r3, r2
 8005916:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	4bbe      	ldr	r3, [pc, #760]	@ (8005c18 <UART_SetConfig+0x328>)
 8005920:	4013      	ands	r3, r2
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	6812      	ldr	r2, [r2, #0]
 8005926:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005928:	430b      	orrs	r3, r1
 800592a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4ab3      	ldr	r2, [pc, #716]	@ (8005c1c <UART_SetConfig+0x32c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d004      	beq.n	800595c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005958:	4313      	orrs	r3, r2
 800595a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689a      	ldr	r2, [r3, #8]
 8005962:	4baf      	ldr	r3, [pc, #700]	@ (8005c20 <UART_SetConfig+0x330>)
 8005964:	4013      	ands	r3, r2
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	6812      	ldr	r2, [r2, #0]
 800596a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800596c:	430b      	orrs	r3, r1
 800596e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005976:	f023 010f 	bic.w	r1, r3, #15
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4aa6      	ldr	r2, [pc, #664]	@ (8005c24 <UART_SetConfig+0x334>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d177      	bne.n	8005a80 <UART_SetConfig+0x190>
 8005990:	4ba5      	ldr	r3, [pc, #660]	@ (8005c28 <UART_SetConfig+0x338>)
 8005992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005994:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005998:	2b28      	cmp	r3, #40	@ 0x28
 800599a:	d86d      	bhi.n	8005a78 <UART_SetConfig+0x188>
 800599c:	a201      	add	r2, pc, #4	@ (adr r2, 80059a4 <UART_SetConfig+0xb4>)
 800599e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a2:	bf00      	nop
 80059a4:	08005a49 	.word	0x08005a49
 80059a8:	08005a79 	.word	0x08005a79
 80059ac:	08005a79 	.word	0x08005a79
 80059b0:	08005a79 	.word	0x08005a79
 80059b4:	08005a79 	.word	0x08005a79
 80059b8:	08005a79 	.word	0x08005a79
 80059bc:	08005a79 	.word	0x08005a79
 80059c0:	08005a79 	.word	0x08005a79
 80059c4:	08005a51 	.word	0x08005a51
 80059c8:	08005a79 	.word	0x08005a79
 80059cc:	08005a79 	.word	0x08005a79
 80059d0:	08005a79 	.word	0x08005a79
 80059d4:	08005a79 	.word	0x08005a79
 80059d8:	08005a79 	.word	0x08005a79
 80059dc:	08005a79 	.word	0x08005a79
 80059e0:	08005a79 	.word	0x08005a79
 80059e4:	08005a59 	.word	0x08005a59
 80059e8:	08005a79 	.word	0x08005a79
 80059ec:	08005a79 	.word	0x08005a79
 80059f0:	08005a79 	.word	0x08005a79
 80059f4:	08005a79 	.word	0x08005a79
 80059f8:	08005a79 	.word	0x08005a79
 80059fc:	08005a79 	.word	0x08005a79
 8005a00:	08005a79 	.word	0x08005a79
 8005a04:	08005a61 	.word	0x08005a61
 8005a08:	08005a79 	.word	0x08005a79
 8005a0c:	08005a79 	.word	0x08005a79
 8005a10:	08005a79 	.word	0x08005a79
 8005a14:	08005a79 	.word	0x08005a79
 8005a18:	08005a79 	.word	0x08005a79
 8005a1c:	08005a79 	.word	0x08005a79
 8005a20:	08005a79 	.word	0x08005a79
 8005a24:	08005a69 	.word	0x08005a69
 8005a28:	08005a79 	.word	0x08005a79
 8005a2c:	08005a79 	.word	0x08005a79
 8005a30:	08005a79 	.word	0x08005a79
 8005a34:	08005a79 	.word	0x08005a79
 8005a38:	08005a79 	.word	0x08005a79
 8005a3c:	08005a79 	.word	0x08005a79
 8005a40:	08005a79 	.word	0x08005a79
 8005a44:	08005a71 	.word	0x08005a71
 8005a48:	2301      	movs	r3, #1
 8005a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a4e:	e222      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005a50:	2304      	movs	r3, #4
 8005a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a56:	e21e      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005a58:	2308      	movs	r3, #8
 8005a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a5e:	e21a      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005a60:	2310      	movs	r3, #16
 8005a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a66:	e216      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005a68:	2320      	movs	r3, #32
 8005a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a6e:	e212      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005a70:	2340      	movs	r3, #64	@ 0x40
 8005a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a76:	e20e      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005a78:	2380      	movs	r3, #128	@ 0x80
 8005a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a7e:	e20a      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a69      	ldr	r2, [pc, #420]	@ (8005c2c <UART_SetConfig+0x33c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d130      	bne.n	8005aec <UART_SetConfig+0x1fc>
 8005a8a:	4b67      	ldr	r3, [pc, #412]	@ (8005c28 <UART_SetConfig+0x338>)
 8005a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a8e:	f003 0307 	and.w	r3, r3, #7
 8005a92:	2b05      	cmp	r3, #5
 8005a94:	d826      	bhi.n	8005ae4 <UART_SetConfig+0x1f4>
 8005a96:	a201      	add	r2, pc, #4	@ (adr r2, 8005a9c <UART_SetConfig+0x1ac>)
 8005a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9c:	08005ab5 	.word	0x08005ab5
 8005aa0:	08005abd 	.word	0x08005abd
 8005aa4:	08005ac5 	.word	0x08005ac5
 8005aa8:	08005acd 	.word	0x08005acd
 8005aac:	08005ad5 	.word	0x08005ad5
 8005ab0:	08005add 	.word	0x08005add
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aba:	e1ec      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005abc:	2304      	movs	r3, #4
 8005abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ac2:	e1e8      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005ac4:	2308      	movs	r3, #8
 8005ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aca:	e1e4      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005acc:	2310      	movs	r3, #16
 8005ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ad2:	e1e0      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005ad4:	2320      	movs	r3, #32
 8005ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ada:	e1dc      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005adc:	2340      	movs	r3, #64	@ 0x40
 8005ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ae2:	e1d8      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005ae4:	2380      	movs	r3, #128	@ 0x80
 8005ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aea:	e1d4      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a4f      	ldr	r2, [pc, #316]	@ (8005c30 <UART_SetConfig+0x340>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d130      	bne.n	8005b58 <UART_SetConfig+0x268>
 8005af6:	4b4c      	ldr	r3, [pc, #304]	@ (8005c28 <UART_SetConfig+0x338>)
 8005af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005afa:	f003 0307 	and.w	r3, r3, #7
 8005afe:	2b05      	cmp	r3, #5
 8005b00:	d826      	bhi.n	8005b50 <UART_SetConfig+0x260>
 8005b02:	a201      	add	r2, pc, #4	@ (adr r2, 8005b08 <UART_SetConfig+0x218>)
 8005b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b08:	08005b21 	.word	0x08005b21
 8005b0c:	08005b29 	.word	0x08005b29
 8005b10:	08005b31 	.word	0x08005b31
 8005b14:	08005b39 	.word	0x08005b39
 8005b18:	08005b41 	.word	0x08005b41
 8005b1c:	08005b49 	.word	0x08005b49
 8005b20:	2300      	movs	r3, #0
 8005b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b26:	e1b6      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005b28:	2304      	movs	r3, #4
 8005b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b2e:	e1b2      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005b30:	2308      	movs	r3, #8
 8005b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b36:	e1ae      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005b38:	2310      	movs	r3, #16
 8005b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b3e:	e1aa      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005b40:	2320      	movs	r3, #32
 8005b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b46:	e1a6      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005b48:	2340      	movs	r3, #64	@ 0x40
 8005b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b4e:	e1a2      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005b50:	2380      	movs	r3, #128	@ 0x80
 8005b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b56:	e19e      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a35      	ldr	r2, [pc, #212]	@ (8005c34 <UART_SetConfig+0x344>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d130      	bne.n	8005bc4 <UART_SetConfig+0x2d4>
 8005b62:	4b31      	ldr	r3, [pc, #196]	@ (8005c28 <UART_SetConfig+0x338>)
 8005b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	2b05      	cmp	r3, #5
 8005b6c:	d826      	bhi.n	8005bbc <UART_SetConfig+0x2cc>
 8005b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b74 <UART_SetConfig+0x284>)
 8005b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b74:	08005b8d 	.word	0x08005b8d
 8005b78:	08005b95 	.word	0x08005b95
 8005b7c:	08005b9d 	.word	0x08005b9d
 8005b80:	08005ba5 	.word	0x08005ba5
 8005b84:	08005bad 	.word	0x08005bad
 8005b88:	08005bb5 	.word	0x08005bb5
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b92:	e180      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005b94:	2304      	movs	r3, #4
 8005b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b9a:	e17c      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005b9c:	2308      	movs	r3, #8
 8005b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ba2:	e178      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005ba4:	2310      	movs	r3, #16
 8005ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005baa:	e174      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005bac:	2320      	movs	r3, #32
 8005bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bb2:	e170      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005bb4:	2340      	movs	r3, #64	@ 0x40
 8005bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bba:	e16c      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005bbc:	2380      	movs	r3, #128	@ 0x80
 8005bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bc2:	e168      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a1b      	ldr	r2, [pc, #108]	@ (8005c38 <UART_SetConfig+0x348>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d142      	bne.n	8005c54 <UART_SetConfig+0x364>
 8005bce:	4b16      	ldr	r3, [pc, #88]	@ (8005c28 <UART_SetConfig+0x338>)
 8005bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bd2:	f003 0307 	and.w	r3, r3, #7
 8005bd6:	2b05      	cmp	r3, #5
 8005bd8:	d838      	bhi.n	8005c4c <UART_SetConfig+0x35c>
 8005bda:	a201      	add	r2, pc, #4	@ (adr r2, 8005be0 <UART_SetConfig+0x2f0>)
 8005bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be0:	08005bf9 	.word	0x08005bf9
 8005be4:	08005c01 	.word	0x08005c01
 8005be8:	08005c09 	.word	0x08005c09
 8005bec:	08005c11 	.word	0x08005c11
 8005bf0:	08005c3d 	.word	0x08005c3d
 8005bf4:	08005c45 	.word	0x08005c45
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bfe:	e14a      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005c00:	2304      	movs	r3, #4
 8005c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c06:	e146      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005c08:	2308      	movs	r3, #8
 8005c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c0e:	e142      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005c10:	2310      	movs	r3, #16
 8005c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c16:	e13e      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005c18:	cfff69f3 	.word	0xcfff69f3
 8005c1c:	58000c00 	.word	0x58000c00
 8005c20:	11fff4ff 	.word	0x11fff4ff
 8005c24:	40011000 	.word	0x40011000
 8005c28:	58024400 	.word	0x58024400
 8005c2c:	40004400 	.word	0x40004400
 8005c30:	40004800 	.word	0x40004800
 8005c34:	40004c00 	.word	0x40004c00
 8005c38:	40005000 	.word	0x40005000
 8005c3c:	2320      	movs	r3, #32
 8005c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c42:	e128      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005c44:	2340      	movs	r3, #64	@ 0x40
 8005c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c4a:	e124      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005c4c:	2380      	movs	r3, #128	@ 0x80
 8005c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c52:	e120      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4acb      	ldr	r2, [pc, #812]	@ (8005f88 <UART_SetConfig+0x698>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d176      	bne.n	8005d4c <UART_SetConfig+0x45c>
 8005c5e:	4bcb      	ldr	r3, [pc, #812]	@ (8005f8c <UART_SetConfig+0x69c>)
 8005c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c66:	2b28      	cmp	r3, #40	@ 0x28
 8005c68:	d86c      	bhi.n	8005d44 <UART_SetConfig+0x454>
 8005c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c70 <UART_SetConfig+0x380>)
 8005c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c70:	08005d15 	.word	0x08005d15
 8005c74:	08005d45 	.word	0x08005d45
 8005c78:	08005d45 	.word	0x08005d45
 8005c7c:	08005d45 	.word	0x08005d45
 8005c80:	08005d45 	.word	0x08005d45
 8005c84:	08005d45 	.word	0x08005d45
 8005c88:	08005d45 	.word	0x08005d45
 8005c8c:	08005d45 	.word	0x08005d45
 8005c90:	08005d1d 	.word	0x08005d1d
 8005c94:	08005d45 	.word	0x08005d45
 8005c98:	08005d45 	.word	0x08005d45
 8005c9c:	08005d45 	.word	0x08005d45
 8005ca0:	08005d45 	.word	0x08005d45
 8005ca4:	08005d45 	.word	0x08005d45
 8005ca8:	08005d45 	.word	0x08005d45
 8005cac:	08005d45 	.word	0x08005d45
 8005cb0:	08005d25 	.word	0x08005d25
 8005cb4:	08005d45 	.word	0x08005d45
 8005cb8:	08005d45 	.word	0x08005d45
 8005cbc:	08005d45 	.word	0x08005d45
 8005cc0:	08005d45 	.word	0x08005d45
 8005cc4:	08005d45 	.word	0x08005d45
 8005cc8:	08005d45 	.word	0x08005d45
 8005ccc:	08005d45 	.word	0x08005d45
 8005cd0:	08005d2d 	.word	0x08005d2d
 8005cd4:	08005d45 	.word	0x08005d45
 8005cd8:	08005d45 	.word	0x08005d45
 8005cdc:	08005d45 	.word	0x08005d45
 8005ce0:	08005d45 	.word	0x08005d45
 8005ce4:	08005d45 	.word	0x08005d45
 8005ce8:	08005d45 	.word	0x08005d45
 8005cec:	08005d45 	.word	0x08005d45
 8005cf0:	08005d35 	.word	0x08005d35
 8005cf4:	08005d45 	.word	0x08005d45
 8005cf8:	08005d45 	.word	0x08005d45
 8005cfc:	08005d45 	.word	0x08005d45
 8005d00:	08005d45 	.word	0x08005d45
 8005d04:	08005d45 	.word	0x08005d45
 8005d08:	08005d45 	.word	0x08005d45
 8005d0c:	08005d45 	.word	0x08005d45
 8005d10:	08005d3d 	.word	0x08005d3d
 8005d14:	2301      	movs	r3, #1
 8005d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d1a:	e0bc      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005d1c:	2304      	movs	r3, #4
 8005d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d22:	e0b8      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005d24:	2308      	movs	r3, #8
 8005d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d2a:	e0b4      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005d2c:	2310      	movs	r3, #16
 8005d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d32:	e0b0      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005d34:	2320      	movs	r3, #32
 8005d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d3a:	e0ac      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005d3c:	2340      	movs	r3, #64	@ 0x40
 8005d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d42:	e0a8      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005d44:	2380      	movs	r3, #128	@ 0x80
 8005d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d4a:	e0a4      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a8f      	ldr	r2, [pc, #572]	@ (8005f90 <UART_SetConfig+0x6a0>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d130      	bne.n	8005db8 <UART_SetConfig+0x4c8>
 8005d56:	4b8d      	ldr	r3, [pc, #564]	@ (8005f8c <UART_SetConfig+0x69c>)
 8005d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d5a:	f003 0307 	and.w	r3, r3, #7
 8005d5e:	2b05      	cmp	r3, #5
 8005d60:	d826      	bhi.n	8005db0 <UART_SetConfig+0x4c0>
 8005d62:	a201      	add	r2, pc, #4	@ (adr r2, 8005d68 <UART_SetConfig+0x478>)
 8005d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d68:	08005d81 	.word	0x08005d81
 8005d6c:	08005d89 	.word	0x08005d89
 8005d70:	08005d91 	.word	0x08005d91
 8005d74:	08005d99 	.word	0x08005d99
 8005d78:	08005da1 	.word	0x08005da1
 8005d7c:	08005da9 	.word	0x08005da9
 8005d80:	2300      	movs	r3, #0
 8005d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d86:	e086      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005d88:	2304      	movs	r3, #4
 8005d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d8e:	e082      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005d90:	2308      	movs	r3, #8
 8005d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d96:	e07e      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005d98:	2310      	movs	r3, #16
 8005d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d9e:	e07a      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005da0:	2320      	movs	r3, #32
 8005da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005da6:	e076      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005da8:	2340      	movs	r3, #64	@ 0x40
 8005daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dae:	e072      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005db0:	2380      	movs	r3, #128	@ 0x80
 8005db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005db6:	e06e      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a75      	ldr	r2, [pc, #468]	@ (8005f94 <UART_SetConfig+0x6a4>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d130      	bne.n	8005e24 <UART_SetConfig+0x534>
 8005dc2:	4b72      	ldr	r3, [pc, #456]	@ (8005f8c <UART_SetConfig+0x69c>)
 8005dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dc6:	f003 0307 	and.w	r3, r3, #7
 8005dca:	2b05      	cmp	r3, #5
 8005dcc:	d826      	bhi.n	8005e1c <UART_SetConfig+0x52c>
 8005dce:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd4 <UART_SetConfig+0x4e4>)
 8005dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd4:	08005ded 	.word	0x08005ded
 8005dd8:	08005df5 	.word	0x08005df5
 8005ddc:	08005dfd 	.word	0x08005dfd
 8005de0:	08005e05 	.word	0x08005e05
 8005de4:	08005e0d 	.word	0x08005e0d
 8005de8:	08005e15 	.word	0x08005e15
 8005dec:	2300      	movs	r3, #0
 8005dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005df2:	e050      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005df4:	2304      	movs	r3, #4
 8005df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfa:	e04c      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005dfc:	2308      	movs	r3, #8
 8005dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e02:	e048      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005e04:	2310      	movs	r3, #16
 8005e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e0a:	e044      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005e0c:	2320      	movs	r3, #32
 8005e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e12:	e040      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005e14:	2340      	movs	r3, #64	@ 0x40
 8005e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e1a:	e03c      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005e1c:	2380      	movs	r3, #128	@ 0x80
 8005e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e22:	e038      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a5b      	ldr	r2, [pc, #364]	@ (8005f98 <UART_SetConfig+0x6a8>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d130      	bne.n	8005e90 <UART_SetConfig+0x5a0>
 8005e2e:	4b57      	ldr	r3, [pc, #348]	@ (8005f8c <UART_SetConfig+0x69c>)
 8005e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e32:	f003 0307 	and.w	r3, r3, #7
 8005e36:	2b05      	cmp	r3, #5
 8005e38:	d826      	bhi.n	8005e88 <UART_SetConfig+0x598>
 8005e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e40 <UART_SetConfig+0x550>)
 8005e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e40:	08005e59 	.word	0x08005e59
 8005e44:	08005e61 	.word	0x08005e61
 8005e48:	08005e69 	.word	0x08005e69
 8005e4c:	08005e71 	.word	0x08005e71
 8005e50:	08005e79 	.word	0x08005e79
 8005e54:	08005e81 	.word	0x08005e81
 8005e58:	2302      	movs	r3, #2
 8005e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e5e:	e01a      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005e60:	2304      	movs	r3, #4
 8005e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e66:	e016      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005e68:	2308      	movs	r3, #8
 8005e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6e:	e012      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005e70:	2310      	movs	r3, #16
 8005e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e76:	e00e      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005e78:	2320      	movs	r3, #32
 8005e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7e:	e00a      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005e80:	2340      	movs	r3, #64	@ 0x40
 8005e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e86:	e006      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005e88:	2380      	movs	r3, #128	@ 0x80
 8005e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8e:	e002      	b.n	8005e96 <UART_SetConfig+0x5a6>
 8005e90:	2380      	movs	r3, #128	@ 0x80
 8005e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a3f      	ldr	r2, [pc, #252]	@ (8005f98 <UART_SetConfig+0x6a8>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	f040 80f8 	bne.w	8006092 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ea2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	dc46      	bgt.n	8005f38 <UART_SetConfig+0x648>
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	f2c0 8082 	blt.w	8005fb4 <UART_SetConfig+0x6c4>
 8005eb0:	3b02      	subs	r3, #2
 8005eb2:	2b1e      	cmp	r3, #30
 8005eb4:	d87e      	bhi.n	8005fb4 <UART_SetConfig+0x6c4>
 8005eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8005ebc <UART_SetConfig+0x5cc>)
 8005eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebc:	08005f3f 	.word	0x08005f3f
 8005ec0:	08005fb5 	.word	0x08005fb5
 8005ec4:	08005f47 	.word	0x08005f47
 8005ec8:	08005fb5 	.word	0x08005fb5
 8005ecc:	08005fb5 	.word	0x08005fb5
 8005ed0:	08005fb5 	.word	0x08005fb5
 8005ed4:	08005f57 	.word	0x08005f57
 8005ed8:	08005fb5 	.word	0x08005fb5
 8005edc:	08005fb5 	.word	0x08005fb5
 8005ee0:	08005fb5 	.word	0x08005fb5
 8005ee4:	08005fb5 	.word	0x08005fb5
 8005ee8:	08005fb5 	.word	0x08005fb5
 8005eec:	08005fb5 	.word	0x08005fb5
 8005ef0:	08005fb5 	.word	0x08005fb5
 8005ef4:	08005f67 	.word	0x08005f67
 8005ef8:	08005fb5 	.word	0x08005fb5
 8005efc:	08005fb5 	.word	0x08005fb5
 8005f00:	08005fb5 	.word	0x08005fb5
 8005f04:	08005fb5 	.word	0x08005fb5
 8005f08:	08005fb5 	.word	0x08005fb5
 8005f0c:	08005fb5 	.word	0x08005fb5
 8005f10:	08005fb5 	.word	0x08005fb5
 8005f14:	08005fb5 	.word	0x08005fb5
 8005f18:	08005fb5 	.word	0x08005fb5
 8005f1c:	08005fb5 	.word	0x08005fb5
 8005f20:	08005fb5 	.word	0x08005fb5
 8005f24:	08005fb5 	.word	0x08005fb5
 8005f28:	08005fb5 	.word	0x08005fb5
 8005f2c:	08005fb5 	.word	0x08005fb5
 8005f30:	08005fb5 	.word	0x08005fb5
 8005f34:	08005fa7 	.word	0x08005fa7
 8005f38:	2b40      	cmp	r3, #64	@ 0x40
 8005f3a:	d037      	beq.n	8005fac <UART_SetConfig+0x6bc>
 8005f3c:	e03a      	b.n	8005fb4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005f3e:	f7fe fd09 	bl	8004954 <HAL_RCCEx_GetD3PCLK1Freq>
 8005f42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005f44:	e03c      	b.n	8005fc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7fe fd18 	bl	8004980 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f54:	e034      	b.n	8005fc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f56:	f107 0318 	add.w	r3, r7, #24
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fe fe64 	bl	8004c28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f64:	e02c      	b.n	8005fc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f66:	4b09      	ldr	r3, [pc, #36]	@ (8005f8c <UART_SetConfig+0x69c>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0320 	and.w	r3, r3, #32
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d016      	beq.n	8005fa0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f72:	4b06      	ldr	r3, [pc, #24]	@ (8005f8c <UART_SetConfig+0x69c>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	08db      	lsrs	r3, r3, #3
 8005f78:	f003 0303 	and.w	r3, r3, #3
 8005f7c:	4a07      	ldr	r2, [pc, #28]	@ (8005f9c <UART_SetConfig+0x6ac>)
 8005f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f84:	e01c      	b.n	8005fc0 <UART_SetConfig+0x6d0>
 8005f86:	bf00      	nop
 8005f88:	40011400 	.word	0x40011400
 8005f8c:	58024400 	.word	0x58024400
 8005f90:	40007800 	.word	0x40007800
 8005f94:	40007c00 	.word	0x40007c00
 8005f98:	58000c00 	.word	0x58000c00
 8005f9c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005fa0:	4b9d      	ldr	r3, [pc, #628]	@ (8006218 <UART_SetConfig+0x928>)
 8005fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fa4:	e00c      	b.n	8005fc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005fa6:	4b9d      	ldr	r3, [pc, #628]	@ (800621c <UART_SetConfig+0x92c>)
 8005fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005faa:	e009      	b.n	8005fc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fb2:	e005      	b.n	8005fc0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005fbe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f000 81de 	beq.w	8006384 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fcc:	4a94      	ldr	r2, [pc, #592]	@ (8006220 <UART_SetConfig+0x930>)
 8005fce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fda:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	005b      	lsls	r3, r3, #1
 8005fe4:	4413      	add	r3, r2
 8005fe6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d305      	bcc.n	8005ff8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ff2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d903      	bls.n	8006000 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005ffe:	e1c1      	b.n	8006384 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006002:	2200      	movs	r2, #0
 8006004:	60bb      	str	r3, [r7, #8]
 8006006:	60fa      	str	r2, [r7, #12]
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600c:	4a84      	ldr	r2, [pc, #528]	@ (8006220 <UART_SetConfig+0x930>)
 800600e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006012:	b29b      	uxth	r3, r3
 8006014:	2200      	movs	r2, #0
 8006016:	603b      	str	r3, [r7, #0]
 8006018:	607a      	str	r2, [r7, #4]
 800601a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800601e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006022:	f7fa f965 	bl	80002f0 <__aeabi_uldivmod>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	4610      	mov	r0, r2
 800602c:	4619      	mov	r1, r3
 800602e:	f04f 0200 	mov.w	r2, #0
 8006032:	f04f 0300 	mov.w	r3, #0
 8006036:	020b      	lsls	r3, r1, #8
 8006038:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800603c:	0202      	lsls	r2, r0, #8
 800603e:	6979      	ldr	r1, [r7, #20]
 8006040:	6849      	ldr	r1, [r1, #4]
 8006042:	0849      	lsrs	r1, r1, #1
 8006044:	2000      	movs	r0, #0
 8006046:	460c      	mov	r4, r1
 8006048:	4605      	mov	r5, r0
 800604a:	eb12 0804 	adds.w	r8, r2, r4
 800604e:	eb43 0905 	adc.w	r9, r3, r5
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	469a      	mov	sl, r3
 800605a:	4693      	mov	fp, r2
 800605c:	4652      	mov	r2, sl
 800605e:	465b      	mov	r3, fp
 8006060:	4640      	mov	r0, r8
 8006062:	4649      	mov	r1, r9
 8006064:	f7fa f944 	bl	80002f0 <__aeabi_uldivmod>
 8006068:	4602      	mov	r2, r0
 800606a:	460b      	mov	r3, r1
 800606c:	4613      	mov	r3, r2
 800606e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006072:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006076:	d308      	bcc.n	800608a <UART_SetConfig+0x79a>
 8006078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800607a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800607e:	d204      	bcs.n	800608a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006086:	60da      	str	r2, [r3, #12]
 8006088:	e17c      	b.n	8006384 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006090:	e178      	b.n	8006384 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800609a:	f040 80c5 	bne.w	8006228 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800609e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80060a2:	2b20      	cmp	r3, #32
 80060a4:	dc48      	bgt.n	8006138 <UART_SetConfig+0x848>
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	db7b      	blt.n	80061a2 <UART_SetConfig+0x8b2>
 80060aa:	2b20      	cmp	r3, #32
 80060ac:	d879      	bhi.n	80061a2 <UART_SetConfig+0x8b2>
 80060ae:	a201      	add	r2, pc, #4	@ (adr r2, 80060b4 <UART_SetConfig+0x7c4>)
 80060b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b4:	0800613f 	.word	0x0800613f
 80060b8:	08006147 	.word	0x08006147
 80060bc:	080061a3 	.word	0x080061a3
 80060c0:	080061a3 	.word	0x080061a3
 80060c4:	0800614f 	.word	0x0800614f
 80060c8:	080061a3 	.word	0x080061a3
 80060cc:	080061a3 	.word	0x080061a3
 80060d0:	080061a3 	.word	0x080061a3
 80060d4:	0800615f 	.word	0x0800615f
 80060d8:	080061a3 	.word	0x080061a3
 80060dc:	080061a3 	.word	0x080061a3
 80060e0:	080061a3 	.word	0x080061a3
 80060e4:	080061a3 	.word	0x080061a3
 80060e8:	080061a3 	.word	0x080061a3
 80060ec:	080061a3 	.word	0x080061a3
 80060f0:	080061a3 	.word	0x080061a3
 80060f4:	0800616f 	.word	0x0800616f
 80060f8:	080061a3 	.word	0x080061a3
 80060fc:	080061a3 	.word	0x080061a3
 8006100:	080061a3 	.word	0x080061a3
 8006104:	080061a3 	.word	0x080061a3
 8006108:	080061a3 	.word	0x080061a3
 800610c:	080061a3 	.word	0x080061a3
 8006110:	080061a3 	.word	0x080061a3
 8006114:	080061a3 	.word	0x080061a3
 8006118:	080061a3 	.word	0x080061a3
 800611c:	080061a3 	.word	0x080061a3
 8006120:	080061a3 	.word	0x080061a3
 8006124:	080061a3 	.word	0x080061a3
 8006128:	080061a3 	.word	0x080061a3
 800612c:	080061a3 	.word	0x080061a3
 8006130:	080061a3 	.word	0x080061a3
 8006134:	08006195 	.word	0x08006195
 8006138:	2b40      	cmp	r3, #64	@ 0x40
 800613a:	d02e      	beq.n	800619a <UART_SetConfig+0x8aa>
 800613c:	e031      	b.n	80061a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800613e:	f7fd f991 	bl	8003464 <HAL_RCC_GetPCLK1Freq>
 8006142:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006144:	e033      	b.n	80061ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006146:	f7fd f9a3 	bl	8003490 <HAL_RCC_GetPCLK2Freq>
 800614a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800614c:	e02f      	b.n	80061ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800614e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006152:	4618      	mov	r0, r3
 8006154:	f7fe fc14 	bl	8004980 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800615a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800615c:	e027      	b.n	80061ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800615e:	f107 0318 	add.w	r3, r7, #24
 8006162:	4618      	mov	r0, r3
 8006164:	f7fe fd60 	bl	8004c28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800616c:	e01f      	b.n	80061ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800616e:	4b2d      	ldr	r3, [pc, #180]	@ (8006224 <UART_SetConfig+0x934>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0320 	and.w	r3, r3, #32
 8006176:	2b00      	cmp	r3, #0
 8006178:	d009      	beq.n	800618e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800617a:	4b2a      	ldr	r3, [pc, #168]	@ (8006224 <UART_SetConfig+0x934>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	08db      	lsrs	r3, r3, #3
 8006180:	f003 0303 	and.w	r3, r3, #3
 8006184:	4a24      	ldr	r2, [pc, #144]	@ (8006218 <UART_SetConfig+0x928>)
 8006186:	fa22 f303 	lsr.w	r3, r2, r3
 800618a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800618c:	e00f      	b.n	80061ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800618e:	4b22      	ldr	r3, [pc, #136]	@ (8006218 <UART_SetConfig+0x928>)
 8006190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006192:	e00c      	b.n	80061ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006194:	4b21      	ldr	r3, [pc, #132]	@ (800621c <UART_SetConfig+0x92c>)
 8006196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006198:	e009      	b.n	80061ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800619a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800619e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061a0:	e005      	b.n	80061ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80061a2:	2300      	movs	r3, #0
 80061a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80061ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 80e7 	beq.w	8006384 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ba:	4a19      	ldr	r2, [pc, #100]	@ (8006220 <UART_SetConfig+0x930>)
 80061bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061c0:	461a      	mov	r2, r3
 80061c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80061c8:	005a      	lsls	r2, r3, #1
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	085b      	lsrs	r3, r3, #1
 80061d0:	441a      	add	r2, r3
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061da:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061de:	2b0f      	cmp	r3, #15
 80061e0:	d916      	bls.n	8006210 <UART_SetConfig+0x920>
 80061e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061e8:	d212      	bcs.n	8006210 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	f023 030f 	bic.w	r3, r3, #15
 80061f2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f6:	085b      	lsrs	r3, r3, #1
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	f003 0307 	and.w	r3, r3, #7
 80061fe:	b29a      	uxth	r2, r3
 8006200:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006202:	4313      	orrs	r3, r2
 8006204:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800620c:	60da      	str	r2, [r3, #12]
 800620e:	e0b9      	b.n	8006384 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006216:	e0b5      	b.n	8006384 <UART_SetConfig+0xa94>
 8006218:	03d09000 	.word	0x03d09000
 800621c:	003d0900 	.word	0x003d0900
 8006220:	0800ab1c 	.word	0x0800ab1c
 8006224:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006228:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800622c:	2b20      	cmp	r3, #32
 800622e:	dc49      	bgt.n	80062c4 <UART_SetConfig+0x9d4>
 8006230:	2b00      	cmp	r3, #0
 8006232:	db7c      	blt.n	800632e <UART_SetConfig+0xa3e>
 8006234:	2b20      	cmp	r3, #32
 8006236:	d87a      	bhi.n	800632e <UART_SetConfig+0xa3e>
 8006238:	a201      	add	r2, pc, #4	@ (adr r2, 8006240 <UART_SetConfig+0x950>)
 800623a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623e:	bf00      	nop
 8006240:	080062cb 	.word	0x080062cb
 8006244:	080062d3 	.word	0x080062d3
 8006248:	0800632f 	.word	0x0800632f
 800624c:	0800632f 	.word	0x0800632f
 8006250:	080062db 	.word	0x080062db
 8006254:	0800632f 	.word	0x0800632f
 8006258:	0800632f 	.word	0x0800632f
 800625c:	0800632f 	.word	0x0800632f
 8006260:	080062eb 	.word	0x080062eb
 8006264:	0800632f 	.word	0x0800632f
 8006268:	0800632f 	.word	0x0800632f
 800626c:	0800632f 	.word	0x0800632f
 8006270:	0800632f 	.word	0x0800632f
 8006274:	0800632f 	.word	0x0800632f
 8006278:	0800632f 	.word	0x0800632f
 800627c:	0800632f 	.word	0x0800632f
 8006280:	080062fb 	.word	0x080062fb
 8006284:	0800632f 	.word	0x0800632f
 8006288:	0800632f 	.word	0x0800632f
 800628c:	0800632f 	.word	0x0800632f
 8006290:	0800632f 	.word	0x0800632f
 8006294:	0800632f 	.word	0x0800632f
 8006298:	0800632f 	.word	0x0800632f
 800629c:	0800632f 	.word	0x0800632f
 80062a0:	0800632f 	.word	0x0800632f
 80062a4:	0800632f 	.word	0x0800632f
 80062a8:	0800632f 	.word	0x0800632f
 80062ac:	0800632f 	.word	0x0800632f
 80062b0:	0800632f 	.word	0x0800632f
 80062b4:	0800632f 	.word	0x0800632f
 80062b8:	0800632f 	.word	0x0800632f
 80062bc:	0800632f 	.word	0x0800632f
 80062c0:	08006321 	.word	0x08006321
 80062c4:	2b40      	cmp	r3, #64	@ 0x40
 80062c6:	d02e      	beq.n	8006326 <UART_SetConfig+0xa36>
 80062c8:	e031      	b.n	800632e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062ca:	f7fd f8cb 	bl	8003464 <HAL_RCC_GetPCLK1Freq>
 80062ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80062d0:	e033      	b.n	800633a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062d2:	f7fd f8dd 	bl	8003490 <HAL_RCC_GetPCLK2Freq>
 80062d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80062d8:	e02f      	b.n	800633a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fe fb4e 	bl	8004980 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062e8:	e027      	b.n	800633a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062ea:	f107 0318 	add.w	r3, r7, #24
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7fe fc9a 	bl	8004c28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062f8:	e01f      	b.n	800633a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062fa:	4b2d      	ldr	r3, [pc, #180]	@ (80063b0 <UART_SetConfig+0xac0>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0320 	and.w	r3, r3, #32
 8006302:	2b00      	cmp	r3, #0
 8006304:	d009      	beq.n	800631a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006306:	4b2a      	ldr	r3, [pc, #168]	@ (80063b0 <UART_SetConfig+0xac0>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	08db      	lsrs	r3, r3, #3
 800630c:	f003 0303 	and.w	r3, r3, #3
 8006310:	4a28      	ldr	r2, [pc, #160]	@ (80063b4 <UART_SetConfig+0xac4>)
 8006312:	fa22 f303 	lsr.w	r3, r2, r3
 8006316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006318:	e00f      	b.n	800633a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800631a:	4b26      	ldr	r3, [pc, #152]	@ (80063b4 <UART_SetConfig+0xac4>)
 800631c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800631e:	e00c      	b.n	800633a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006320:	4b25      	ldr	r3, [pc, #148]	@ (80063b8 <UART_SetConfig+0xac8>)
 8006322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006324:	e009      	b.n	800633a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006326:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800632a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800632c:	e005      	b.n	800633a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006338:	bf00      	nop
    }

    if (pclk != 0U)
 800633a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800633c:	2b00      	cmp	r3, #0
 800633e:	d021      	beq.n	8006384 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006344:	4a1d      	ldr	r2, [pc, #116]	@ (80063bc <UART_SetConfig+0xacc>)
 8006346:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800634a:	461a      	mov	r2, r3
 800634c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800634e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	085b      	lsrs	r3, r3, #1
 8006358:	441a      	add	r2, r3
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006362:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006366:	2b0f      	cmp	r3, #15
 8006368:	d909      	bls.n	800637e <UART_SetConfig+0xa8e>
 800636a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006370:	d205      	bcs.n	800637e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006374:	b29a      	uxth	r2, r3
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	60da      	str	r2, [r3, #12]
 800637c:	e002      	b.n	8006384 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	2201      	movs	r2, #1
 8006388:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	2201      	movs	r2, #1
 8006390:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	2200      	movs	r2, #0
 8006398:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	2200      	movs	r2, #0
 800639e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80063a0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3748      	adds	r7, #72	@ 0x48
 80063a8:	46bd      	mov	sp, r7
 80063aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063ae:	bf00      	nop
 80063b0:	58024400 	.word	0x58024400
 80063b4:	03d09000 	.word	0x03d09000
 80063b8:	003d0900 	.word	0x003d0900
 80063bc:	0800ab1c 	.word	0x0800ab1c

080063c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063cc:	f003 0308 	and.w	r3, r3, #8
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00a      	beq.n	80063ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006432:	f003 0304 	and.w	r3, r3, #4
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006454:	f003 0310 	and.w	r3, r3, #16
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00a      	beq.n	8006472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006476:	f003 0320 	and.w	r3, r3, #32
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800649c:	2b00      	cmp	r3, #0
 800649e:	d01a      	beq.n	80064d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064be:	d10a      	bne.n	80064d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	605a      	str	r2, [r3, #4]
  }
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b098      	sub	sp, #96	@ 0x60
 8006508:	af02      	add	r7, sp, #8
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006514:	f7fa ff12 	bl	800133c <HAL_GetTick>
 8006518:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0308 	and.w	r3, r3, #8
 8006524:	2b08      	cmp	r3, #8
 8006526:	d12f      	bne.n	8006588 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006528:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006530:	2200      	movs	r2, #0
 8006532:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f88e 	bl	8006658 <UART_WaitOnFlagUntilTimeout>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d022      	beq.n	8006588 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800654a:	e853 3f00 	ldrex	r3, [r3]
 800654e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006552:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006556:	653b      	str	r3, [r7, #80]	@ 0x50
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	461a      	mov	r2, r3
 800655e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006560:	647b      	str	r3, [r7, #68]	@ 0x44
 8006562:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006564:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006566:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006568:	e841 2300 	strex	r3, r2, [r1]
 800656c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800656e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1e6      	bne.n	8006542 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2220      	movs	r2, #32
 8006578:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e063      	b.n	8006650 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0304 	and.w	r3, r3, #4
 8006592:	2b04      	cmp	r3, #4
 8006594:	d149      	bne.n	800662a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006596:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800659e:	2200      	movs	r2, #0
 80065a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f857 	bl	8006658 <UART_WaitOnFlagUntilTimeout>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d03c      	beq.n	800662a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b8:	e853 3f00 	ldrex	r3, [r3]
 80065bc:	623b      	str	r3, [r7, #32]
   return(result);
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	461a      	mov	r2, r3
 80065cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80065d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065d6:	e841 2300 	strex	r3, r2, [r1]
 80065da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1e6      	bne.n	80065b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3308      	adds	r3, #8
 80065e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	e853 3f00 	ldrex	r3, [r3]
 80065f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f023 0301 	bic.w	r3, r3, #1
 80065f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	3308      	adds	r3, #8
 8006600:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006602:	61fa      	str	r2, [r7, #28]
 8006604:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006606:	69b9      	ldr	r1, [r7, #24]
 8006608:	69fa      	ldr	r2, [r7, #28]
 800660a:	e841 2300 	strex	r3, r2, [r1]
 800660e:	617b      	str	r3, [r7, #20]
   return(result);
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1e5      	bne.n	80065e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2220      	movs	r2, #32
 800661a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e012      	b.n	8006650 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2220      	movs	r2, #32
 800662e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2220      	movs	r2, #32
 8006636:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3758      	adds	r7, #88	@ 0x58
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	603b      	str	r3, [r7, #0]
 8006664:	4613      	mov	r3, r2
 8006666:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006668:	e04f      	b.n	800670a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006670:	d04b      	beq.n	800670a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006672:	f7fa fe63 	bl	800133c <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	429a      	cmp	r2, r3
 8006680:	d302      	bcc.n	8006688 <UART_WaitOnFlagUntilTimeout+0x30>
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e04e      	b.n	800672a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0304 	and.w	r3, r3, #4
 8006696:	2b00      	cmp	r3, #0
 8006698:	d037      	beq.n	800670a <UART_WaitOnFlagUntilTimeout+0xb2>
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2b80      	cmp	r3, #128	@ 0x80
 800669e:	d034      	beq.n	800670a <UART_WaitOnFlagUntilTimeout+0xb2>
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2b40      	cmp	r3, #64	@ 0x40
 80066a4:	d031      	beq.n	800670a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	f003 0308 	and.w	r3, r3, #8
 80066b0:	2b08      	cmp	r3, #8
 80066b2:	d110      	bne.n	80066d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2208      	movs	r2, #8
 80066ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f000 f839 	bl	8006734 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2208      	movs	r2, #8
 80066c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e029      	b.n	800672a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066e4:	d111      	bne.n	800670a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 f81f 	bl	8006734 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2220      	movs	r2, #32
 80066fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e00f      	b.n	800672a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	69da      	ldr	r2, [r3, #28]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	4013      	ands	r3, r2
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	429a      	cmp	r2, r3
 8006718:	bf0c      	ite	eq
 800671a:	2301      	moveq	r3, #1
 800671c:	2300      	movne	r3, #0
 800671e:	b2db      	uxtb	r3, r3
 8006720:	461a      	mov	r2, r3
 8006722:	79fb      	ldrb	r3, [r7, #7]
 8006724:	429a      	cmp	r2, r3
 8006726:	d0a0      	beq.n	800666a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
	...

08006734 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006734:	b480      	push	{r7}
 8006736:	b095      	sub	sp, #84	@ 0x54
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006744:	e853 3f00 	ldrex	r3, [r3]
 8006748:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800674a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006750:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	461a      	mov	r2, r3
 8006758:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800675a:	643b      	str	r3, [r7, #64]	@ 0x40
 800675c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006760:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006762:	e841 2300 	strex	r3, r2, [r1]
 8006766:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1e6      	bne.n	800673c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3308      	adds	r3, #8
 8006774:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	e853 3f00 	ldrex	r3, [r3]
 800677c:	61fb      	str	r3, [r7, #28]
   return(result);
 800677e:	69fa      	ldr	r2, [r7, #28]
 8006780:	4b1e      	ldr	r3, [pc, #120]	@ (80067fc <UART_EndRxTransfer+0xc8>)
 8006782:	4013      	ands	r3, r2
 8006784:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3308      	adds	r3, #8
 800678c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800678e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006790:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006792:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006794:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006796:	e841 2300 	strex	r3, r2, [r1]
 800679a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800679c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1e5      	bne.n	800676e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d118      	bne.n	80067dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	e853 3f00 	ldrex	r3, [r3]
 80067b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	f023 0310 	bic.w	r3, r3, #16
 80067be:	647b      	str	r3, [r7, #68]	@ 0x44
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	461a      	mov	r2, r3
 80067c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067c8:	61bb      	str	r3, [r7, #24]
 80067ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067cc:	6979      	ldr	r1, [r7, #20]
 80067ce:	69ba      	ldr	r2, [r7, #24]
 80067d0:	e841 2300 	strex	r3, r2, [r1]
 80067d4:	613b      	str	r3, [r7, #16]
   return(result);
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1e6      	bne.n	80067aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2220      	movs	r2, #32
 80067e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80067f0:	bf00      	nop
 80067f2:	3754      	adds	r7, #84	@ 0x54
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	effffffe 	.word	0xeffffffe

08006800 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800680e:	2b01      	cmp	r3, #1
 8006810:	d101      	bne.n	8006816 <HAL_UARTEx_DisableFifoMode+0x16>
 8006812:	2302      	movs	r3, #2
 8006814:	e027      	b.n	8006866 <HAL_UARTEx_DisableFifoMode+0x66>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2224      	movs	r2, #36	@ 0x24
 8006822:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f022 0201 	bic.w	r2, r2, #1
 800683c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006844:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2220      	movs	r2, #32
 8006858:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006882:	2b01      	cmp	r3, #1
 8006884:	d101      	bne.n	800688a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006886:	2302      	movs	r3, #2
 8006888:	e02d      	b.n	80068e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2224      	movs	r2, #36	@ 0x24
 8006896:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0201 	bic.w	r2, r2, #1
 80068b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	430a      	orrs	r2, r1
 80068c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f850 	bl	800696c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b084      	sub	sp, #16
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d101      	bne.n	8006906 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006902:	2302      	movs	r3, #2
 8006904:	e02d      	b.n	8006962 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2224      	movs	r2, #36	@ 0x24
 8006912:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 0201 	bic.w	r2, r2, #1
 800692c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	683a      	ldr	r2, [r7, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f812 	bl	800696c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2220      	movs	r2, #32
 8006954:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
	...

0800696c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006978:	2b00      	cmp	r3, #0
 800697a:	d108      	bne.n	800698e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800698c:	e031      	b.n	80069f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800698e:	2310      	movs	r3, #16
 8006990:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006992:	2310      	movs	r3, #16
 8006994:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	0e5b      	lsrs	r3, r3, #25
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	f003 0307 	and.w	r3, r3, #7
 80069a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	0f5b      	lsrs	r3, r3, #29
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	f003 0307 	and.w	r3, r3, #7
 80069b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069b6:	7bbb      	ldrb	r3, [r7, #14]
 80069b8:	7b3a      	ldrb	r2, [r7, #12]
 80069ba:	4911      	ldr	r1, [pc, #68]	@ (8006a00 <UARTEx_SetNbDataToProcess+0x94>)
 80069bc:	5c8a      	ldrb	r2, [r1, r2]
 80069be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80069c2:	7b3a      	ldrb	r2, [r7, #12]
 80069c4:	490f      	ldr	r1, [pc, #60]	@ (8006a04 <UARTEx_SetNbDataToProcess+0x98>)
 80069c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
 80069d6:	7b7a      	ldrb	r2, [r7, #13]
 80069d8:	4909      	ldr	r1, [pc, #36]	@ (8006a00 <UARTEx_SetNbDataToProcess+0x94>)
 80069da:	5c8a      	ldrb	r2, [r1, r2]
 80069dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80069e0:	7b7a      	ldrb	r2, [r7, #13]
 80069e2:	4908      	ldr	r1, [pc, #32]	@ (8006a04 <UARTEx_SetNbDataToProcess+0x98>)
 80069e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80069f2:	bf00      	nop
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	0800ab34 	.word	0x0800ab34
 8006a04:	0800ab3c 	.word	0x0800ab3c

08006a08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a08:	b084      	sub	sp, #16
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b084      	sub	sp, #16
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	f107 001c 	add.w	r0, r7, #28
 8006a16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a1a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d121      	bne.n	8006a66 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a26:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68da      	ldr	r2, [r3, #12]
 8006a32:	4b2c      	ldr	r3, [pc, #176]	@ (8006ae4 <USB_CoreInit+0xdc>)
 8006a34:	4013      	ands	r3, r2
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d105      	bne.n	8006a5a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 faaa 	bl	8006fb4 <USB_CoreReset>
 8006a60:	4603      	mov	r3, r0
 8006a62:	73fb      	strb	r3, [r7, #15]
 8006a64:	e01b      	b.n	8006a9e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fa9e 	bl	8006fb4 <USB_CoreReset>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006a7c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d106      	bne.n	8006a92 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a88:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006a90:	e005      	b.n	8006a9e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a96:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006a9e:	7fbb      	ldrb	r3, [r7, #30]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d116      	bne.n	8006ad2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae8 <USB_CoreInit+0xe0>)
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f043 0206 	orr.w	r2, r3, #6
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f043 0220 	orr.w	r2, r3, #32
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ade:	b004      	add	sp, #16
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	ffbdffbf 	.word	0xffbdffbf
 8006ae8:	03ee0000 	.word	0x03ee0000

08006aec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f023 0201 	bic.w	r2, r3, #1
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	370c      	adds	r7, #12
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b084      	sub	sp, #16
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
 8006b16:	460b      	mov	r3, r1
 8006b18:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b2a:	78fb      	ldrb	r3, [r7, #3]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d115      	bne.n	8006b5c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b3c:	200a      	movs	r0, #10
 8006b3e:	f7fa fc09 	bl	8001354 <HAL_Delay>
      ms += 10U;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	330a      	adds	r3, #10
 8006b46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fa25 	bl	8006f98 <USB_GetMode>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d01e      	beq.n	8006b92 <USB_SetCurrentMode+0x84>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2bc7      	cmp	r3, #199	@ 0xc7
 8006b58:	d9f0      	bls.n	8006b3c <USB_SetCurrentMode+0x2e>
 8006b5a:	e01a      	b.n	8006b92 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b5c:	78fb      	ldrb	r3, [r7, #3]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d115      	bne.n	8006b8e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b6e:	200a      	movs	r0, #10
 8006b70:	f7fa fbf0 	bl	8001354 <HAL_Delay>
      ms += 10U;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	330a      	adds	r3, #10
 8006b78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fa0c 	bl	8006f98 <USB_GetMode>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d005      	beq.n	8006b92 <USB_SetCurrentMode+0x84>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2bc7      	cmp	r3, #199	@ 0xc7
 8006b8a:	d9f0      	bls.n	8006b6e <USB_SetCurrentMode+0x60>
 8006b8c:	e001      	b.n	8006b92 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e005      	b.n	8006b9e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2bc8      	cmp	r3, #200	@ 0xc8
 8006b96:	d101      	bne.n	8006b9c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e000      	b.n	8006b9e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
	...

08006ba8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ba8:	b084      	sub	sp, #16
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b086      	sub	sp, #24
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006bb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	613b      	str	r3, [r7, #16]
 8006bc6:	e009      	b.n	8006bdc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	3340      	adds	r3, #64	@ 0x40
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	613b      	str	r3, [r7, #16]
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	2b0e      	cmp	r3, #14
 8006be0:	d9f2      	bls.n	8006bc8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006be2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d11c      	bne.n	8006c24 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006bf8:	f043 0302 	orr.w	r3, r3, #2
 8006bfc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c02:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	601a      	str	r2, [r3, #0]
 8006c22:	e005      	b.n	8006c30 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c28:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006c36:	461a      	mov	r2, r3
 8006c38:	2300      	movs	r3, #0
 8006c3a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c3c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d10d      	bne.n	8006c60 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d104      	bne.n	8006c56 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f968 	bl	8006f24 <USB_SetDevSpeed>
 8006c54:	e008      	b.n	8006c68 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c56:	2101      	movs	r1, #1
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f963 	bl	8006f24 <USB_SetDevSpeed>
 8006c5e:	e003      	b.n	8006c68 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c60:	2103      	movs	r1, #3
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f95e 	bl	8006f24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c68:	2110      	movs	r1, #16
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f8fa 	bl	8006e64 <USB_FlushTxFifo>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f924 	bl	8006ec8 <USB_FlushRxFifo>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c90:	461a      	mov	r2, r3
 8006c92:	2300      	movs	r3, #0
 8006c94:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ca8:	461a      	mov	r2, r3
 8006caa:	2300      	movs	r3, #0
 8006cac:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cae:	2300      	movs	r3, #0
 8006cb0:	613b      	str	r3, [r7, #16]
 8006cb2:	e043      	b.n	8006d3c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cc6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cca:	d118      	bne.n	8006cfe <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10a      	bne.n	8006ce8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	015a      	lsls	r2, r3, #5
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4413      	add	r3, r2
 8006cda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006ce4:	6013      	str	r3, [r2, #0]
 8006ce6:	e013      	b.n	8006d10 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	015a      	lsls	r2, r3, #5
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4413      	add	r3, r2
 8006cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006cfa:	6013      	str	r3, [r2, #0]
 8006cfc:	e008      	b.n	8006d10 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	015a      	lsls	r2, r3, #5
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	4413      	add	r3, r2
 8006d06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	015a      	lsls	r2, r3, #5
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	2300      	movs	r3, #0
 8006d20:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	015a      	lsls	r2, r3, #5
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	4413      	add	r3, r2
 8006d2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d2e:	461a      	mov	r2, r3
 8006d30:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006d34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	613b      	str	r3, [r7, #16]
 8006d3c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006d40:	461a      	mov	r2, r3
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d3b5      	bcc.n	8006cb4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d48:	2300      	movs	r3, #0
 8006d4a:	613b      	str	r3, [r7, #16]
 8006d4c:	e043      	b.n	8006dd6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	015a      	lsls	r2, r3, #5
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d64:	d118      	bne.n	8006d98 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10a      	bne.n	8006d82 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	015a      	lsls	r2, r3, #5
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	4413      	add	r3, r2
 8006d74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d78:	461a      	mov	r2, r3
 8006d7a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006d7e:	6013      	str	r3, [r2, #0]
 8006d80:	e013      	b.n	8006daa <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	015a      	lsls	r2, r3, #5
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	4413      	add	r3, r2
 8006d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006d94:	6013      	str	r3, [r2, #0]
 8006d96:	e008      	b.n	8006daa <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006da4:	461a      	mov	r2, r3
 8006da6:	2300      	movs	r3, #0
 8006da8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	015a      	lsls	r2, r3, #5
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	4413      	add	r3, r2
 8006db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006db6:	461a      	mov	r2, r3
 8006db8:	2300      	movs	r3, #0
 8006dba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	015a      	lsls	r2, r3, #5
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dc8:	461a      	mov	r2, r3
 8006dca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006dce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	613b      	str	r3, [r7, #16]
 8006dd6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006dda:	461a      	mov	r2, r3
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d3b5      	bcc.n	8006d4e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006df0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006df4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006e02:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d105      	bne.n	8006e18 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	f043 0210 	orr.w	r2, r3, #16
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	699a      	ldr	r2, [r3, #24]
 8006e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8006e5c <USB_DevInit+0x2b4>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e24:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d005      	beq.n	8006e38 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	f043 0208 	orr.w	r2, r3, #8
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e38:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d105      	bne.n	8006e4c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	699a      	ldr	r2, [r3, #24]
 8006e44:	4b06      	ldr	r3, [pc, #24]	@ (8006e60 <USB_DevInit+0x2b8>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3718      	adds	r7, #24
 8006e52:	46bd      	mov	sp, r7
 8006e54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e58:	b004      	add	sp, #16
 8006e5a:	4770      	bx	lr
 8006e5c:	803c3800 	.word	0x803c3800
 8006e60:	40000004 	.word	0x40000004

08006e64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	3301      	adds	r3, #1
 8006e76:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e7e:	d901      	bls.n	8006e84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e01b      	b.n	8006ebc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	daf2      	bge.n	8006e72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	019b      	lsls	r3, r3, #6
 8006e94:	f043 0220 	orr.w	r2, r3, #32
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ea8:	d901      	bls.n	8006eae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e006      	b.n	8006ebc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	f003 0320 	and.w	r3, r3, #32
 8006eb6:	2b20      	cmp	r3, #32
 8006eb8:	d0f0      	beq.n	8006e9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3714      	adds	r7, #20
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ee0:	d901      	bls.n	8006ee6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e018      	b.n	8006f18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	daf2      	bge.n	8006ed4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2210      	movs	r2, #16
 8006ef6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	3301      	adds	r3, #1
 8006efc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f04:	d901      	bls.n	8006f0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e006      	b.n	8006f18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	f003 0310 	and.w	r3, r3, #16
 8006f12:	2b10      	cmp	r3, #16
 8006f14:	d0f0      	beq.n	8006ef8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	78fb      	ldrb	r3, [r7, #3]
 8006f3e:	68f9      	ldr	r1, [r7, #12]
 8006f40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f44:	4313      	orrs	r3, r2
 8006f46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b085      	sub	sp, #20
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006f70:	f023 0303 	bic.w	r3, r3, #3
 8006f74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f84:	f043 0302 	orr.w	r3, r3, #2
 8006f88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3714      	adds	r7, #20
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	695b      	ldr	r3, [r3, #20]
 8006fa4:	f003 0301 	and.w	r3, r3, #1
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fcc:	d901      	bls.n	8006fd2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e01b      	b.n	800700a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	daf2      	bge.n	8006fc0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	f043 0201 	orr.w	r2, r3, #1
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	3301      	adds	r3, #1
 8006fee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ff6:	d901      	bls.n	8006ffc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e006      	b.n	800700a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	2b01      	cmp	r3, #1
 8007006:	d0f0      	beq.n	8006fea <USB_CoreReset+0x36>

  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3714      	adds	r7, #20
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
	...

08007018 <__NVIC_SetPriority>:
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	4603      	mov	r3, r0
 8007020:	6039      	str	r1, [r7, #0]
 8007022:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007024:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007028:	2b00      	cmp	r3, #0
 800702a:	db0a      	blt.n	8007042 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	b2da      	uxtb	r2, r3
 8007030:	490c      	ldr	r1, [pc, #48]	@ (8007064 <__NVIC_SetPriority+0x4c>)
 8007032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007036:	0112      	lsls	r2, r2, #4
 8007038:	b2d2      	uxtb	r2, r2
 800703a:	440b      	add	r3, r1
 800703c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007040:	e00a      	b.n	8007058 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	b2da      	uxtb	r2, r3
 8007046:	4908      	ldr	r1, [pc, #32]	@ (8007068 <__NVIC_SetPriority+0x50>)
 8007048:	88fb      	ldrh	r3, [r7, #6]
 800704a:	f003 030f 	and.w	r3, r3, #15
 800704e:	3b04      	subs	r3, #4
 8007050:	0112      	lsls	r2, r2, #4
 8007052:	b2d2      	uxtb	r2, r2
 8007054:	440b      	add	r3, r1
 8007056:	761a      	strb	r2, [r3, #24]
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	e000e100 	.word	0xe000e100
 8007068:	e000ed00 	.word	0xe000ed00

0800706c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800706c:	b580      	push	{r7, lr}
 800706e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007070:	4b05      	ldr	r3, [pc, #20]	@ (8007088 <SysTick_Handler+0x1c>)
 8007072:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007074:	f002 fa32 	bl	80094dc <xTaskGetSchedulerState>
 8007078:	4603      	mov	r3, r0
 800707a:	2b01      	cmp	r3, #1
 800707c:	d001      	beq.n	8007082 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800707e:	f003 f92b 	bl	800a2d8 <xPortSysTickHandler>
  }
}
 8007082:	bf00      	nop
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	e000e010 	.word	0xe000e010

0800708c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800708c:	b580      	push	{r7, lr}
 800708e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007090:	2100      	movs	r1, #0
 8007092:	f06f 0004 	mvn.w	r0, #4
 8007096:	f7ff ffbf 	bl	8007018 <__NVIC_SetPriority>
#endif
}
 800709a:	bf00      	nop
 800709c:	bd80      	pop	{r7, pc}
	...

080070a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070a6:	f3ef 8305 	mrs	r3, IPSR
 80070aa:	603b      	str	r3, [r7, #0]
  return(result);
 80070ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d003      	beq.n	80070ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80070b2:	f06f 0305 	mvn.w	r3, #5
 80070b6:	607b      	str	r3, [r7, #4]
 80070b8:	e00c      	b.n	80070d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80070ba:	4b0a      	ldr	r3, [pc, #40]	@ (80070e4 <osKernelInitialize+0x44>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d105      	bne.n	80070ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80070c2:	4b08      	ldr	r3, [pc, #32]	@ (80070e4 <osKernelInitialize+0x44>)
 80070c4:	2201      	movs	r2, #1
 80070c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80070c8:	2300      	movs	r3, #0
 80070ca:	607b      	str	r3, [r7, #4]
 80070cc:	e002      	b.n	80070d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80070ce:	f04f 33ff 	mov.w	r3, #4294967295
 80070d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80070d4:	687b      	ldr	r3, [r7, #4]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	24000810 	.word	0x24000810

080070e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070ee:	f3ef 8305 	mrs	r3, IPSR
 80070f2:	603b      	str	r3, [r7, #0]
  return(result);
 80070f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <osKernelStart+0x1a>
    stat = osErrorISR;
 80070fa:	f06f 0305 	mvn.w	r3, #5
 80070fe:	607b      	str	r3, [r7, #4]
 8007100:	e010      	b.n	8007124 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007102:	4b0b      	ldr	r3, [pc, #44]	@ (8007130 <osKernelStart+0x48>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d109      	bne.n	800711e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800710a:	f7ff ffbf 	bl	800708c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800710e:	4b08      	ldr	r3, [pc, #32]	@ (8007130 <osKernelStart+0x48>)
 8007110:	2202      	movs	r2, #2
 8007112:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007114:	f001 fd6e 	bl	8008bf4 <vTaskStartScheduler>
      stat = osOK;
 8007118:	2300      	movs	r3, #0
 800711a:	607b      	str	r3, [r7, #4]
 800711c:	e002      	b.n	8007124 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800711e:	f04f 33ff 	mov.w	r3, #4294967295
 8007122:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007124:	687b      	ldr	r3, [r7, #4]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	24000810 	.word	0x24000810

08007134 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007134:	b580      	push	{r7, lr}
 8007136:	b08e      	sub	sp, #56	@ 0x38
 8007138:	af04      	add	r7, sp, #16
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007140:	2300      	movs	r3, #0
 8007142:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007144:	f3ef 8305 	mrs	r3, IPSR
 8007148:	617b      	str	r3, [r7, #20]
  return(result);
 800714a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800714c:	2b00      	cmp	r3, #0
 800714e:	d17e      	bne.n	800724e <osThreadNew+0x11a>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d07b      	beq.n	800724e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007156:	2380      	movs	r3, #128	@ 0x80
 8007158:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800715a:	2318      	movs	r3, #24
 800715c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800715e:	2300      	movs	r3, #0
 8007160:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007162:	f04f 33ff 	mov.w	r3, #4294967295
 8007166:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d045      	beq.n	80071fa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d002      	beq.n	800717c <osThreadNew+0x48>
        name = attr->name;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d002      	beq.n	800718a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d008      	beq.n	80071a2 <osThreadNew+0x6e>
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	2b38      	cmp	r3, #56	@ 0x38
 8007194:	d805      	bhi.n	80071a2 <osThreadNew+0x6e>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <osThreadNew+0x72>
        return (NULL);
 80071a2:	2300      	movs	r3, #0
 80071a4:	e054      	b.n	8007250 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	089b      	lsrs	r3, r3, #2
 80071b4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00e      	beq.n	80071dc <osThreadNew+0xa8>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	2ba7      	cmp	r3, #167	@ 0xa7
 80071c4:	d90a      	bls.n	80071dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d006      	beq.n	80071dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d002      	beq.n	80071dc <osThreadNew+0xa8>
        mem = 1;
 80071d6:	2301      	movs	r3, #1
 80071d8:	61bb      	str	r3, [r7, #24]
 80071da:	e010      	b.n	80071fe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10c      	bne.n	80071fe <osThreadNew+0xca>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d108      	bne.n	80071fe <osThreadNew+0xca>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d104      	bne.n	80071fe <osThreadNew+0xca>
          mem = 0;
 80071f4:	2300      	movs	r3, #0
 80071f6:	61bb      	str	r3, [r7, #24]
 80071f8:	e001      	b.n	80071fe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80071fa:	2300      	movs	r3, #0
 80071fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d110      	bne.n	8007226 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800720c:	9202      	str	r2, [sp, #8]
 800720e:	9301      	str	r3, [sp, #4]
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	6a3a      	ldr	r2, [r7, #32]
 8007218:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f001 faf6 	bl	800880c <xTaskCreateStatic>
 8007220:	4603      	mov	r3, r0
 8007222:	613b      	str	r3, [r7, #16]
 8007224:	e013      	b.n	800724e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d110      	bne.n	800724e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800722c:	6a3b      	ldr	r3, [r7, #32]
 800722e:	b29a      	uxth	r2, r3
 8007230:	f107 0310 	add.w	r3, r7, #16
 8007234:	9301      	str	r3, [sp, #4]
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f001 fb44 	bl	80088cc <xTaskCreate>
 8007244:	4603      	mov	r3, r0
 8007246:	2b01      	cmp	r3, #1
 8007248:	d001      	beq.n	800724e <osThreadNew+0x11a>
            hTask = NULL;
 800724a:	2300      	movs	r3, #0
 800724c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800724e:	693b      	ldr	r3, [r7, #16]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3728      	adds	r7, #40	@ 0x28
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007260:	f3ef 8305 	mrs	r3, IPSR
 8007264:	60bb      	str	r3, [r7, #8]
  return(result);
 8007266:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <osDelay+0x1c>
    stat = osErrorISR;
 800726c:	f06f 0305 	mvn.w	r3, #5
 8007270:	60fb      	str	r3, [r7, #12]
 8007272:	e007      	b.n	8007284 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007274:	2300      	movs	r3, #0
 8007276:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d002      	beq.n	8007284 <osDelay+0x2c>
      vTaskDelay(ticks);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f001 fc82 	bl	8008b88 <vTaskDelay>
    }
  }

  return (stat);
 8007284:	68fb      	ldr	r3, [r7, #12]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800728e:	b580      	push	{r7, lr}
 8007290:	b088      	sub	sp, #32
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007296:	2300      	movs	r3, #0
 8007298:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800729a:	f3ef 8305 	mrs	r3, IPSR
 800729e:	60bb      	str	r3, [r7, #8]
  return(result);
 80072a0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d174      	bne.n	8007390 <osMutexNew+0x102>
    if (attr != NULL) {
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d003      	beq.n	80072b4 <osMutexNew+0x26>
      type = attr->attr_bits;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	61bb      	str	r3, [r7, #24]
 80072b2:	e001      	b.n	80072b8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d002      	beq.n	80072c8 <osMutexNew+0x3a>
      rmtx = 1U;
 80072c2:	2301      	movs	r3, #1
 80072c4:	617b      	str	r3, [r7, #20]
 80072c6:	e001      	b.n	80072cc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80072c8:	2300      	movs	r3, #0
 80072ca:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	f003 0308 	and.w	r3, r3, #8
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d15c      	bne.n	8007390 <osMutexNew+0x102>
      mem = -1;
 80072d6:	f04f 33ff 	mov.w	r3, #4294967295
 80072da:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d015      	beq.n	800730e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d006      	beq.n	80072f8 <osMutexNew+0x6a>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	2b4f      	cmp	r3, #79	@ 0x4f
 80072f0:	d902      	bls.n	80072f8 <osMutexNew+0x6a>
          mem = 1;
 80072f2:	2301      	movs	r3, #1
 80072f4:	613b      	str	r3, [r7, #16]
 80072f6:	e00c      	b.n	8007312 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d108      	bne.n	8007312 <osMutexNew+0x84>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d104      	bne.n	8007312 <osMutexNew+0x84>
            mem = 0;
 8007308:	2300      	movs	r3, #0
 800730a:	613b      	str	r3, [r7, #16]
 800730c:	e001      	b.n	8007312 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800730e:	2300      	movs	r3, #0
 8007310:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d112      	bne.n	800733e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d007      	beq.n	800732e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	4619      	mov	r1, r3
 8007324:	2004      	movs	r0, #4
 8007326:	f000 fc50 	bl	8007bca <xQueueCreateMutexStatic>
 800732a:	61f8      	str	r0, [r7, #28]
 800732c:	e016      	b.n	800735c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	4619      	mov	r1, r3
 8007334:	2001      	movs	r0, #1
 8007336:	f000 fc48 	bl	8007bca <xQueueCreateMutexStatic>
 800733a:	61f8      	str	r0, [r7, #28]
 800733c:	e00e      	b.n	800735c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10b      	bne.n	800735c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d004      	beq.n	8007354 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800734a:	2004      	movs	r0, #4
 800734c:	f000 fc25 	bl	8007b9a <xQueueCreateMutex>
 8007350:	61f8      	str	r0, [r7, #28]
 8007352:	e003      	b.n	800735c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007354:	2001      	movs	r0, #1
 8007356:	f000 fc20 	bl	8007b9a <xQueueCreateMutex>
 800735a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00c      	beq.n	800737c <osMutexNew+0xee>
        if (attr != NULL) {
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d003      	beq.n	8007370 <osMutexNew+0xe2>
          name = attr->name;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	60fb      	str	r3, [r7, #12]
 800736e:	e001      	b.n	8007374 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007370:	2300      	movs	r3, #0
 8007372:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007374:	68f9      	ldr	r1, [r7, #12]
 8007376:	69f8      	ldr	r0, [r7, #28]
 8007378:	f001 f9ea 	bl	8008750 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d006      	beq.n	8007390 <osMutexNew+0x102>
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	f043 0301 	orr.w	r3, r3, #1
 800738e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007390:	69fb      	ldr	r3, [r7, #28]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3720      	adds	r7, #32
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800739a:	b580      	push	{r7, lr}
 800739c:	b086      	sub	sp, #24
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f023 0301 	bic.w	r3, r3, #1
 80073aa:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80073b4:	2300      	movs	r3, #0
 80073b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073b8:	f3ef 8305 	mrs	r3, IPSR
 80073bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80073be:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d003      	beq.n	80073cc <osMutexAcquire+0x32>
    stat = osErrorISR;
 80073c4:	f06f 0305 	mvn.w	r3, #5
 80073c8:	617b      	str	r3, [r7, #20]
 80073ca:	e02c      	b.n	8007426 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d103      	bne.n	80073da <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80073d2:	f06f 0303 	mvn.w	r3, #3
 80073d6:	617b      	str	r3, [r7, #20]
 80073d8:	e025      	b.n	8007426 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d011      	beq.n	8007404 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80073e0:	6839      	ldr	r1, [r7, #0]
 80073e2:	6938      	ldr	r0, [r7, #16]
 80073e4:	f000 fc41 	bl	8007c6a <xQueueTakeMutexRecursive>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d01b      	beq.n	8007426 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80073f4:	f06f 0301 	mvn.w	r3, #1
 80073f8:	617b      	str	r3, [r7, #20]
 80073fa:	e014      	b.n	8007426 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80073fc:	f06f 0302 	mvn.w	r3, #2
 8007400:	617b      	str	r3, [r7, #20]
 8007402:	e010      	b.n	8007426 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007404:	6839      	ldr	r1, [r7, #0]
 8007406:	6938      	ldr	r0, [r7, #16]
 8007408:	f000 fee8 	bl	80081dc <xQueueSemaphoreTake>
 800740c:	4603      	mov	r3, r0
 800740e:	2b01      	cmp	r3, #1
 8007410:	d009      	beq.n	8007426 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d003      	beq.n	8007420 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8007418:	f06f 0301 	mvn.w	r3, #1
 800741c:	617b      	str	r3, [r7, #20]
 800741e:	e002      	b.n	8007426 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007420:	f06f 0302 	mvn.w	r3, #2
 8007424:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8007426:	697b      	ldr	r3, [r7, #20]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3718      	adds	r7, #24
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f023 0301 	bic.w	r3, r3, #1
 800743e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007448:	2300      	movs	r3, #0
 800744a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800744c:	f3ef 8305 	mrs	r3, IPSR
 8007450:	60bb      	str	r3, [r7, #8]
  return(result);
 8007452:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007454:	2b00      	cmp	r3, #0
 8007456:	d003      	beq.n	8007460 <osMutexRelease+0x30>
    stat = osErrorISR;
 8007458:	f06f 0305 	mvn.w	r3, #5
 800745c:	617b      	str	r3, [r7, #20]
 800745e:	e01f      	b.n	80074a0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d103      	bne.n	800746e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007466:	f06f 0303 	mvn.w	r3, #3
 800746a:	617b      	str	r3, [r7, #20]
 800746c:	e018      	b.n	80074a0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d009      	beq.n	8007488 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007474:	6938      	ldr	r0, [r7, #16]
 8007476:	f000 fbc3 	bl	8007c00 <xQueueGiveMutexRecursive>
 800747a:	4603      	mov	r3, r0
 800747c:	2b01      	cmp	r3, #1
 800747e:	d00f      	beq.n	80074a0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007480:	f06f 0302 	mvn.w	r3, #2
 8007484:	617b      	str	r3, [r7, #20]
 8007486:	e00b      	b.n	80074a0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007488:	2300      	movs	r3, #0
 800748a:	2200      	movs	r2, #0
 800748c:	2100      	movs	r1, #0
 800748e:	6938      	ldr	r0, [r7, #16]
 8007490:	f000 fc22 	bl	8007cd8 <xQueueGenericSend>
 8007494:	4603      	mov	r3, r0
 8007496:	2b01      	cmp	r3, #1
 8007498:	d002      	beq.n	80074a0 <osMutexRelease+0x70>
        stat = osErrorResource;
 800749a:	f06f 0302 	mvn.w	r3, #2
 800749e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80074a0:	697b      	ldr	r3, [r7, #20]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3718      	adds	r7, #24
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b08a      	sub	sp, #40	@ 0x28
 80074ae:	af02      	add	r7, sp, #8
 80074b0:	60f8      	str	r0, [r7, #12]
 80074b2:	60b9      	str	r1, [r7, #8]
 80074b4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80074b6:	2300      	movs	r3, #0
 80074b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074ba:	f3ef 8305 	mrs	r3, IPSR
 80074be:	613b      	str	r3, [r7, #16]
  return(result);
 80074c0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d15f      	bne.n	8007586 <osMessageQueueNew+0xdc>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d05c      	beq.n	8007586 <osMessageQueueNew+0xdc>
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d059      	beq.n	8007586 <osMessageQueueNew+0xdc>
    mem = -1;
 80074d2:	f04f 33ff 	mov.w	r3, #4294967295
 80074d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d029      	beq.n	8007532 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d012      	beq.n	800750c <osMessageQueueNew+0x62>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	2b4f      	cmp	r3, #79	@ 0x4f
 80074ec:	d90e      	bls.n	800750c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00a      	beq.n	800750c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	695a      	ldr	r2, [r3, #20]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	68b9      	ldr	r1, [r7, #8]
 80074fe:	fb01 f303 	mul.w	r3, r1, r3
 8007502:	429a      	cmp	r2, r3
 8007504:	d302      	bcc.n	800750c <osMessageQueueNew+0x62>
        mem = 1;
 8007506:	2301      	movs	r3, #1
 8007508:	61bb      	str	r3, [r7, #24]
 800750a:	e014      	b.n	8007536 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d110      	bne.n	8007536 <osMessageQueueNew+0x8c>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10c      	bne.n	8007536 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007520:	2b00      	cmp	r3, #0
 8007522:	d108      	bne.n	8007536 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d104      	bne.n	8007536 <osMessageQueueNew+0x8c>
          mem = 0;
 800752c:	2300      	movs	r3, #0
 800752e:	61bb      	str	r3, [r7, #24]
 8007530:	e001      	b.n	8007536 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007532:	2300      	movs	r3, #0
 8007534:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d10b      	bne.n	8007554 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	691a      	ldr	r2, [r3, #16]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	2100      	movs	r1, #0
 8007546:	9100      	str	r1, [sp, #0]
 8007548:	68b9      	ldr	r1, [r7, #8]
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f000 fa30 	bl	80079b0 <xQueueGenericCreateStatic>
 8007550:	61f8      	str	r0, [r7, #28]
 8007552:	e008      	b.n	8007566 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d105      	bne.n	8007566 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800755a:	2200      	movs	r2, #0
 800755c:	68b9      	ldr	r1, [r7, #8]
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f000 faa3 	bl	8007aaa <xQueueGenericCreate>
 8007564:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00c      	beq.n	8007586 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d003      	beq.n	800757a <osMessageQueueNew+0xd0>
        name = attr->name;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	617b      	str	r3, [r7, #20]
 8007578:	e001      	b.n	800757e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800757a:	2300      	movs	r3, #0
 800757c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800757e:	6979      	ldr	r1, [r7, #20]
 8007580:	69f8      	ldr	r0, [r7, #28]
 8007582:	f001 f8e5 	bl	8008750 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007586:	69fb      	ldr	r3, [r7, #28]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3720      	adds	r7, #32
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007590:	b580      	push	{r7, lr}
 8007592:	b088      	sub	sp, #32
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	603b      	str	r3, [r7, #0]
 800759c:	4613      	mov	r3, r2
 800759e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80075a4:	2300      	movs	r3, #0
 80075a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075a8:	f3ef 8305 	mrs	r3, IPSR
 80075ac:	617b      	str	r3, [r7, #20]
  return(result);
 80075ae:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d028      	beq.n	8007606 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d005      	beq.n	80075c6 <osMessageQueuePut+0x36>
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d002      	beq.n	80075c6 <osMessageQueuePut+0x36>
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d003      	beq.n	80075ce <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80075c6:	f06f 0303 	mvn.w	r3, #3
 80075ca:	61fb      	str	r3, [r7, #28]
 80075cc:	e038      	b.n	8007640 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80075ce:	2300      	movs	r3, #0
 80075d0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80075d2:	f107 0210 	add.w	r2, r7, #16
 80075d6:	2300      	movs	r3, #0
 80075d8:	68b9      	ldr	r1, [r7, #8]
 80075da:	69b8      	ldr	r0, [r7, #24]
 80075dc:	f000 fc7e 	bl	8007edc <xQueueGenericSendFromISR>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d003      	beq.n	80075ee <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80075e6:	f06f 0302 	mvn.w	r3, #2
 80075ea:	61fb      	str	r3, [r7, #28]
 80075ec:	e028      	b.n	8007640 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d025      	beq.n	8007640 <osMessageQueuePut+0xb0>
 80075f4:	4b15      	ldr	r3, [pc, #84]	@ (800764c <osMessageQueuePut+0xbc>)
 80075f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075fa:	601a      	str	r2, [r3, #0]
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	f3bf 8f6f 	isb	sy
 8007604:	e01c      	b.n	8007640 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d002      	beq.n	8007612 <osMessageQueuePut+0x82>
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d103      	bne.n	800761a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007612:	f06f 0303 	mvn.w	r3, #3
 8007616:	61fb      	str	r3, [r7, #28]
 8007618:	e012      	b.n	8007640 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800761a:	2300      	movs	r3, #0
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	68b9      	ldr	r1, [r7, #8]
 8007620:	69b8      	ldr	r0, [r7, #24]
 8007622:	f000 fb59 	bl	8007cd8 <xQueueGenericSend>
 8007626:	4603      	mov	r3, r0
 8007628:	2b01      	cmp	r3, #1
 800762a:	d009      	beq.n	8007640 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d003      	beq.n	800763a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007632:	f06f 0301 	mvn.w	r3, #1
 8007636:	61fb      	str	r3, [r7, #28]
 8007638:	e002      	b.n	8007640 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800763a:	f06f 0302 	mvn.w	r3, #2
 800763e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007640:	69fb      	ldr	r3, [r7, #28]
}
 8007642:	4618      	mov	r0, r3
 8007644:	3720      	adds	r7, #32
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	e000ed04 	.word	0xe000ed04

08007650 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007650:	b580      	push	{r7, lr}
 8007652:	b088      	sub	sp, #32
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
 800765c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007662:	2300      	movs	r3, #0
 8007664:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007666:	f3ef 8305 	mrs	r3, IPSR
 800766a:	617b      	str	r3, [r7, #20]
  return(result);
 800766c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800766e:	2b00      	cmp	r3, #0
 8007670:	d028      	beq.n	80076c4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d005      	beq.n	8007684 <osMessageQueueGet+0x34>
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d002      	beq.n	8007684 <osMessageQueueGet+0x34>
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d003      	beq.n	800768c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007684:	f06f 0303 	mvn.w	r3, #3
 8007688:	61fb      	str	r3, [r7, #28]
 800768a:	e037      	b.n	80076fc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800768c:	2300      	movs	r3, #0
 800768e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007690:	f107 0310 	add.w	r3, r7, #16
 8007694:	461a      	mov	r2, r3
 8007696:	68b9      	ldr	r1, [r7, #8]
 8007698:	69b8      	ldr	r0, [r7, #24]
 800769a:	f000 feaf 	bl	80083fc <xQueueReceiveFromISR>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d003      	beq.n	80076ac <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80076a4:	f06f 0302 	mvn.w	r3, #2
 80076a8:	61fb      	str	r3, [r7, #28]
 80076aa:	e027      	b.n	80076fc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d024      	beq.n	80076fc <osMessageQueueGet+0xac>
 80076b2:	4b15      	ldr	r3, [pc, #84]	@ (8007708 <osMessageQueueGet+0xb8>)
 80076b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076b8:	601a      	str	r2, [r3, #0]
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	e01b      	b.n	80076fc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d002      	beq.n	80076d0 <osMessageQueueGet+0x80>
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d103      	bne.n	80076d8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80076d0:	f06f 0303 	mvn.w	r3, #3
 80076d4:	61fb      	str	r3, [r7, #28]
 80076d6:	e011      	b.n	80076fc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80076d8:	683a      	ldr	r2, [r7, #0]
 80076da:	68b9      	ldr	r1, [r7, #8]
 80076dc:	69b8      	ldr	r0, [r7, #24]
 80076de:	f000 fc9b 	bl	8008018 <xQueueReceive>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d009      	beq.n	80076fc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d003      	beq.n	80076f6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80076ee:	f06f 0301 	mvn.w	r3, #1
 80076f2:	61fb      	str	r3, [r7, #28]
 80076f4:	e002      	b.n	80076fc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80076f6:	f06f 0302 	mvn.w	r3, #2
 80076fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80076fc:	69fb      	ldr	r3, [r7, #28]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3720      	adds	r7, #32
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	e000ed04 	.word	0xe000ed04

0800770c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4a07      	ldr	r2, [pc, #28]	@ (8007738 <vApplicationGetIdleTaskMemory+0x2c>)
 800771c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	4a06      	ldr	r2, [pc, #24]	@ (800773c <vApplicationGetIdleTaskMemory+0x30>)
 8007722:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2280      	movs	r2, #128	@ 0x80
 8007728:	601a      	str	r2, [r3, #0]
}
 800772a:	bf00      	nop
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	24000814 	.word	0x24000814
 800773c:	240008bc 	.word	0x240008bc

08007740 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	4a07      	ldr	r2, [pc, #28]	@ (800776c <vApplicationGetTimerTaskMemory+0x2c>)
 8007750:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	4a06      	ldr	r2, [pc, #24]	@ (8007770 <vApplicationGetTimerTaskMemory+0x30>)
 8007756:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800775e:	601a      	str	r2, [r3, #0]
}
 8007760:	bf00      	nop
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	24000abc 	.word	0x24000abc
 8007770:	24000b64 	.word	0x24000b64

08007774 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f103 0208 	add.w	r2, r3, #8
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f04f 32ff 	mov.w	r2, #4294967295
 800778c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f103 0208 	add.w	r2, r3, #8
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f103 0208 	add.w	r2, r3, #8
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80077a8:	bf00      	nop
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80077c2:	bf00      	nop
 80077c4:	370c      	adds	r7, #12
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077ce:	b480      	push	{r7}
 80077d0:	b085      	sub	sp, #20
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
 80077d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	689a      	ldr	r2, [r3, #8]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	683a      	ldr	r2, [r7, #0]
 80077f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	1c5a      	adds	r2, r3, #1
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	601a      	str	r2, [r3, #0]
}
 800780a:	bf00      	nop
 800780c:	3714      	adds	r7, #20
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007816:	b480      	push	{r7}
 8007818:	b085      	sub	sp, #20
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782c:	d103      	bne.n	8007836 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	60fb      	str	r3, [r7, #12]
 8007834:	e00c      	b.n	8007850 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	3308      	adds	r3, #8
 800783a:	60fb      	str	r3, [r7, #12]
 800783c:	e002      	b.n	8007844 <vListInsert+0x2e>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	60fb      	str	r3, [r7, #12]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	429a      	cmp	r2, r3
 800784e:	d2f6      	bcs.n	800783e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	685a      	ldr	r2, [r3, #4]
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	683a      	ldr	r2, [r7, #0]
 800785e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	1c5a      	adds	r2, r3, #1
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	601a      	str	r2, [r3, #0]
}
 800787c:	bf00      	nop
 800787e:	3714      	adds	r7, #20
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	6892      	ldr	r2, [r2, #8]
 800789e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	6852      	ldr	r2, [r2, #4]
 80078a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d103      	bne.n	80078bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	689a      	ldr	r2, [r3, #8]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	1e5a      	subs	r2, r3, #1
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3714      	adds	r7, #20
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10b      	bne.n	8007908 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80078f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f4:	f383 8811 	msr	BASEPRI, r3
 80078f8:	f3bf 8f6f 	isb	sy
 80078fc:	f3bf 8f4f 	dsb	sy
 8007900:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007902:	bf00      	nop
 8007904:	bf00      	nop
 8007906:	e7fd      	b.n	8007904 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007908:	f002 fc56 	bl	800a1b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007914:	68f9      	ldr	r1, [r7, #12]
 8007916:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007918:	fb01 f303 	mul.w	r3, r1, r3
 800791c:	441a      	add	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2200      	movs	r2, #0
 8007926:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007938:	3b01      	subs	r3, #1
 800793a:	68f9      	ldr	r1, [r7, #12]
 800793c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800793e:	fb01 f303 	mul.w	r3, r1, r3
 8007942:	441a      	add	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	22ff      	movs	r2, #255	@ 0xff
 800794c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	22ff      	movs	r2, #255	@ 0xff
 8007954:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d114      	bne.n	8007988 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d01a      	beq.n	800799c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	3310      	adds	r3, #16
 800796a:	4618      	mov	r0, r3
 800796c:	f001 fbe0 	bl	8009130 <xTaskRemoveFromEventList>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d012      	beq.n	800799c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007976:	4b0d      	ldr	r3, [pc, #52]	@ (80079ac <xQueueGenericReset+0xd0>)
 8007978:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800797c:	601a      	str	r2, [r3, #0]
 800797e:	f3bf 8f4f 	dsb	sy
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	e009      	b.n	800799c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	3310      	adds	r3, #16
 800798c:	4618      	mov	r0, r3
 800798e:	f7ff fef1 	bl	8007774 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	3324      	adds	r3, #36	@ 0x24
 8007996:	4618      	mov	r0, r3
 8007998:	f7ff feec 	bl	8007774 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800799c:	f002 fc3e 	bl	800a21c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80079a0:	2301      	movs	r3, #1
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	e000ed04 	.word	0xe000ed04

080079b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b08e      	sub	sp, #56	@ 0x38
 80079b4:	af02      	add	r7, sp, #8
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
 80079bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10b      	bne.n	80079dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80079c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c8:	f383 8811 	msr	BASEPRI, r3
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80079d6:	bf00      	nop
 80079d8:	bf00      	nop
 80079da:	e7fd      	b.n	80079d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10b      	bne.n	80079fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80079e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e6:	f383 8811 	msr	BASEPRI, r3
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80079f4:	bf00      	nop
 80079f6:	bf00      	nop
 80079f8:	e7fd      	b.n	80079f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d002      	beq.n	8007a06 <xQueueGenericCreateStatic+0x56>
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d001      	beq.n	8007a0a <xQueueGenericCreateStatic+0x5a>
 8007a06:	2301      	movs	r3, #1
 8007a08:	e000      	b.n	8007a0c <xQueueGenericCreateStatic+0x5c>
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10b      	bne.n	8007a28 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	623b      	str	r3, [r7, #32]
}
 8007a22:	bf00      	nop
 8007a24:	bf00      	nop
 8007a26:	e7fd      	b.n	8007a24 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d102      	bne.n	8007a34 <xQueueGenericCreateStatic+0x84>
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d101      	bne.n	8007a38 <xQueueGenericCreateStatic+0x88>
 8007a34:	2301      	movs	r3, #1
 8007a36:	e000      	b.n	8007a3a <xQueueGenericCreateStatic+0x8a>
 8007a38:	2300      	movs	r3, #0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10b      	bne.n	8007a56 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	61fb      	str	r3, [r7, #28]
}
 8007a50:	bf00      	nop
 8007a52:	bf00      	nop
 8007a54:	e7fd      	b.n	8007a52 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a56:	2350      	movs	r3, #80	@ 0x50
 8007a58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	2b50      	cmp	r3, #80	@ 0x50
 8007a5e:	d00b      	beq.n	8007a78 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	61bb      	str	r3, [r7, #24]
}
 8007a72:	bf00      	nop
 8007a74:	bf00      	nop
 8007a76:	e7fd      	b.n	8007a74 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007a78:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00d      	beq.n	8007aa0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a8c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	4613      	mov	r3, r2
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	68b9      	ldr	r1, [r7, #8]
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f000 f840 	bl	8007b20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3730      	adds	r7, #48	@ 0x30
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b08a      	sub	sp, #40	@ 0x28
 8007aae:	af02      	add	r7, sp, #8
 8007ab0:	60f8      	str	r0, [r7, #12]
 8007ab2:	60b9      	str	r1, [r7, #8]
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10b      	bne.n	8007ad6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8007abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	613b      	str	r3, [r7, #16]
}
 8007ad0:	bf00      	nop
 8007ad2:	bf00      	nop
 8007ad4:	e7fd      	b.n	8007ad2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	fb02 f303 	mul.w	r3, r2, r3
 8007ade:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	3350      	adds	r3, #80	@ 0x50
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f002 fc89 	bl	800a3fc <pvPortMalloc>
 8007aea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d011      	beq.n	8007b16 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	3350      	adds	r3, #80	@ 0x50
 8007afa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b04:	79fa      	ldrb	r2, [r7, #7]
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	68b9      	ldr	r1, [r7, #8]
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f000 f805 	bl	8007b20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b16:	69bb      	ldr	r3, [r7, #24]
	}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3720      	adds	r7, #32
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
 8007b2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d103      	bne.n	8007b3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	69ba      	ldr	r2, [r7, #24]
 8007b38:	601a      	str	r2, [r3, #0]
 8007b3a:	e002      	b.n	8007b42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	68ba      	ldr	r2, [r7, #8]
 8007b4c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b4e:	2101      	movs	r1, #1
 8007b50:	69b8      	ldr	r0, [r7, #24]
 8007b52:	f7ff fec3 	bl	80078dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	78fa      	ldrb	r2, [r7, #3]
 8007b5a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007b5e:	bf00      	nop
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b082      	sub	sp, #8
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00e      	beq.n	8007b92 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007b86:	2300      	movs	r3, #0
 8007b88:	2200      	movs	r2, #0
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f8a3 	bl	8007cd8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007b92:	bf00      	nop
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b086      	sub	sp, #24
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	617b      	str	r3, [r7, #20]
 8007ba8:	2300      	movs	r3, #0
 8007baa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007bac:	79fb      	ldrb	r3, [r7, #7]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	6939      	ldr	r1, [r7, #16]
 8007bb2:	6978      	ldr	r0, [r7, #20]
 8007bb4:	f7ff ff79 	bl	8007aaa <xQueueGenericCreate>
 8007bb8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f7ff ffd3 	bl	8007b66 <prvInitialiseMutex>

		return xNewQueue;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
	}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3718      	adds	r7, #24
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b088      	sub	sp, #32
 8007bce:	af02      	add	r7, sp, #8
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	6039      	str	r1, [r7, #0]
 8007bd4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	617b      	str	r3, [r7, #20]
 8007bda:	2300      	movs	r3, #0
 8007bdc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007bde:	79fb      	ldrb	r3, [r7, #7]
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2200      	movs	r2, #0
 8007be6:	6939      	ldr	r1, [r7, #16]
 8007be8:	6978      	ldr	r0, [r7, #20]
 8007bea:	f7ff fee1 	bl	80079b0 <xQueueGenericCreateStatic>
 8007bee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f7ff ffb8 	bl	8007b66 <prvInitialiseMutex>

		return xNewQueue;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
	}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3718      	adds	r7, #24
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007c00:	b590      	push	{r4, r7, lr}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d10b      	bne.n	8007c2a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8007c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c16:	f383 8811 	msr	BASEPRI, r3
 8007c1a:	f3bf 8f6f 	isb	sy
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	60fb      	str	r3, [r7, #12]
}
 8007c24:	bf00      	nop
 8007c26:	bf00      	nop
 8007c28:	e7fd      	b.n	8007c26 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	689c      	ldr	r4, [r3, #8]
 8007c2e:	f001 fc45 	bl	80094bc <xTaskGetCurrentTaskHandle>
 8007c32:	4603      	mov	r3, r0
 8007c34:	429c      	cmp	r4, r3
 8007c36:	d111      	bne.n	8007c5c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	1e5a      	subs	r2, r3, #1
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d105      	bne.n	8007c56 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	2100      	movs	r1, #0
 8007c50:	6938      	ldr	r0, [r7, #16]
 8007c52:	f000 f841 	bl	8007cd8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007c56:	2301      	movs	r3, #1
 8007c58:	617b      	str	r3, [r7, #20]
 8007c5a:	e001      	b.n	8007c60 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007c60:	697b      	ldr	r3, [r7, #20]
	}
 8007c62:	4618      	mov	r0, r3
 8007c64:	371c      	adds	r7, #28
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd90      	pop	{r4, r7, pc}

08007c6a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007c6a:	b590      	push	{r4, r7, lr}
 8007c6c:	b087      	sub	sp, #28
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10b      	bne.n	8007c96 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	60fb      	str	r3, [r7, #12]
}
 8007c90:	bf00      	nop
 8007c92:	bf00      	nop
 8007c94:	e7fd      	b.n	8007c92 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	689c      	ldr	r4, [r3, #8]
 8007c9a:	f001 fc0f 	bl	80094bc <xTaskGetCurrentTaskHandle>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	429c      	cmp	r4, r3
 8007ca2:	d107      	bne.n	8007cb4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	1c5a      	adds	r2, r3, #1
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	617b      	str	r3, [r7, #20]
 8007cb2:	e00c      	b.n	8007cce <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007cb4:	6839      	ldr	r1, [r7, #0]
 8007cb6:	6938      	ldr	r0, [r7, #16]
 8007cb8:	f000 fa90 	bl	80081dc <xQueueSemaphoreTake>
 8007cbc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d004      	beq.n	8007cce <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	1c5a      	adds	r2, r3, #1
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007cce:	697b      	ldr	r3, [r7, #20]
	}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	371c      	adds	r7, #28
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd90      	pop	{r4, r7, pc}

08007cd8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b08e      	sub	sp, #56	@ 0x38
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
 8007ce4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10b      	bne.n	8007d0c <xQueueGenericSend+0x34>
	__asm volatile
 8007cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007d06:	bf00      	nop
 8007d08:	bf00      	nop
 8007d0a:	e7fd      	b.n	8007d08 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d103      	bne.n	8007d1a <xQueueGenericSend+0x42>
 8007d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d101      	bne.n	8007d1e <xQueueGenericSend+0x46>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e000      	b.n	8007d20 <xQueueGenericSend+0x48>
 8007d1e:	2300      	movs	r3, #0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10b      	bne.n	8007d3c <xQueueGenericSend+0x64>
	__asm volatile
 8007d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d28:	f383 8811 	msr	BASEPRI, r3
 8007d2c:	f3bf 8f6f 	isb	sy
 8007d30:	f3bf 8f4f 	dsb	sy
 8007d34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007d36:	bf00      	nop
 8007d38:	bf00      	nop
 8007d3a:	e7fd      	b.n	8007d38 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d103      	bne.n	8007d4a <xQueueGenericSend+0x72>
 8007d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d101      	bne.n	8007d4e <xQueueGenericSend+0x76>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e000      	b.n	8007d50 <xQueueGenericSend+0x78>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d10b      	bne.n	8007d6c <xQueueGenericSend+0x94>
	__asm volatile
 8007d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d58:	f383 8811 	msr	BASEPRI, r3
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	f3bf 8f4f 	dsb	sy
 8007d64:	623b      	str	r3, [r7, #32]
}
 8007d66:	bf00      	nop
 8007d68:	bf00      	nop
 8007d6a:	e7fd      	b.n	8007d68 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d6c:	f001 fbb6 	bl	80094dc <xTaskGetSchedulerState>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d102      	bne.n	8007d7c <xQueueGenericSend+0xa4>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d101      	bne.n	8007d80 <xQueueGenericSend+0xa8>
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e000      	b.n	8007d82 <xQueueGenericSend+0xaa>
 8007d80:	2300      	movs	r3, #0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10b      	bne.n	8007d9e <xQueueGenericSend+0xc6>
	__asm volatile
 8007d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	61fb      	str	r3, [r7, #28]
}
 8007d98:	bf00      	nop
 8007d9a:	bf00      	nop
 8007d9c:	e7fd      	b.n	8007d9a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d9e:	f002 fa0b 	bl	800a1b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d302      	bcc.n	8007db4 <xQueueGenericSend+0xdc>
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d129      	bne.n	8007e08 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007db4:	683a      	ldr	r2, [r7, #0]
 8007db6:	68b9      	ldr	r1, [r7, #8]
 8007db8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007dba:	f000 fbb9 	bl	8008530 <prvCopyDataToQueue>
 8007dbe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d010      	beq.n	8007dea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dca:	3324      	adds	r3, #36	@ 0x24
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f001 f9af 	bl	8009130 <xTaskRemoveFromEventList>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d013      	beq.n	8007e00 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007dd8:	4b3f      	ldr	r3, [pc, #252]	@ (8007ed8 <xQueueGenericSend+0x200>)
 8007dda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dde:	601a      	str	r2, [r3, #0]
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	f3bf 8f6f 	isb	sy
 8007de8:	e00a      	b.n	8007e00 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d007      	beq.n	8007e00 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007df0:	4b39      	ldr	r3, [pc, #228]	@ (8007ed8 <xQueueGenericSend+0x200>)
 8007df2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007df6:	601a      	str	r2, [r3, #0]
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e00:	f002 fa0c 	bl	800a21c <vPortExitCritical>
				return pdPASS;
 8007e04:	2301      	movs	r3, #1
 8007e06:	e063      	b.n	8007ed0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d103      	bne.n	8007e16 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e0e:	f002 fa05 	bl	800a21c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007e12:	2300      	movs	r3, #0
 8007e14:	e05c      	b.n	8007ed0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d106      	bne.n	8007e2a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e1c:	f107 0314 	add.w	r3, r7, #20
 8007e20:	4618      	mov	r0, r3
 8007e22:	f001 f9e9 	bl	80091f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e26:	2301      	movs	r3, #1
 8007e28:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e2a:	f002 f9f7 	bl	800a21c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e2e:	f000 ff51 	bl	8008cd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e32:	f002 f9c1 	bl	800a1b8 <vPortEnterCritical>
 8007e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e3c:	b25b      	sxtb	r3, r3
 8007e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e42:	d103      	bne.n	8007e4c <xQueueGenericSend+0x174>
 8007e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e52:	b25b      	sxtb	r3, r3
 8007e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e58:	d103      	bne.n	8007e62 <xQueueGenericSend+0x18a>
 8007e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e62:	f002 f9db 	bl	800a21c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e66:	1d3a      	adds	r2, r7, #4
 8007e68:	f107 0314 	add.w	r3, r7, #20
 8007e6c:	4611      	mov	r1, r2
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f001 f9d8 	bl	8009224 <xTaskCheckForTimeOut>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d124      	bne.n	8007ec4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e7c:	f000 fc50 	bl	8008720 <prvIsQueueFull>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d018      	beq.n	8007eb8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e88:	3310      	adds	r3, #16
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	4611      	mov	r1, r2
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f001 f8fc 	bl	800908c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e96:	f000 fbdb 	bl	8008650 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e9a:	f000 ff29 	bl	8008cf0 <xTaskResumeAll>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f47f af7c 	bne.w	8007d9e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8007ed8 <xQueueGenericSend+0x200>)
 8007ea8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007eac:	601a      	str	r2, [r3, #0]
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	f3bf 8f6f 	isb	sy
 8007eb6:	e772      	b.n	8007d9e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007eb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007eba:	f000 fbc9 	bl	8008650 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ebe:	f000 ff17 	bl	8008cf0 <xTaskResumeAll>
 8007ec2:	e76c      	b.n	8007d9e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007ec4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ec6:	f000 fbc3 	bl	8008650 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007eca:	f000 ff11 	bl	8008cf0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007ece:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3738      	adds	r7, #56	@ 0x38
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	e000ed04 	.word	0xe000ed04

08007edc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b090      	sub	sp, #64	@ 0x40
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
 8007ee8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10b      	bne.n	8007f0c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007f06:	bf00      	nop
 8007f08:	bf00      	nop
 8007f0a:	e7fd      	b.n	8007f08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d103      	bne.n	8007f1a <xQueueGenericSendFromISR+0x3e>
 8007f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d101      	bne.n	8007f1e <xQueueGenericSendFromISR+0x42>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e000      	b.n	8007f20 <xQueueGenericSendFromISR+0x44>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10b      	bne.n	8007f3c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f28:	f383 8811 	msr	BASEPRI, r3
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007f36:	bf00      	nop
 8007f38:	bf00      	nop
 8007f3a:	e7fd      	b.n	8007f38 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d103      	bne.n	8007f4a <xQueueGenericSendFromISR+0x6e>
 8007f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d101      	bne.n	8007f4e <xQueueGenericSendFromISR+0x72>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e000      	b.n	8007f50 <xQueueGenericSendFromISR+0x74>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10b      	bne.n	8007f6c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f58:	f383 8811 	msr	BASEPRI, r3
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	623b      	str	r3, [r7, #32]
}
 8007f66:	bf00      	nop
 8007f68:	bf00      	nop
 8007f6a:	e7fd      	b.n	8007f68 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f6c:	f002 fa04 	bl	800a378 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f70:	f3ef 8211 	mrs	r2, BASEPRI
 8007f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f78:	f383 8811 	msr	BASEPRI, r3
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	61fa      	str	r2, [r7, #28]
 8007f86:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f88:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f8a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d302      	bcc.n	8007f9e <xQueueGenericSendFromISR+0xc2>
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d12f      	bne.n	8007ffe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007fa4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fae:	683a      	ldr	r2, [r7, #0]
 8007fb0:	68b9      	ldr	r1, [r7, #8]
 8007fb2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007fb4:	f000 fabc 	bl	8008530 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007fb8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc0:	d112      	bne.n	8007fe8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d016      	beq.n	8007ff8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fcc:	3324      	adds	r3, #36	@ 0x24
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f001 f8ae 	bl	8009130 <xTaskRemoveFromEventList>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00e      	beq.n	8007ff8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00b      	beq.n	8007ff8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	601a      	str	r2, [r3, #0]
 8007fe6:	e007      	b.n	8007ff8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007fe8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007fec:	3301      	adds	r3, #1
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	b25a      	sxtb	r2, r3
 8007ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007ffc:	e001      	b.n	8008002 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ffe:	2300      	movs	r3, #0
 8008000:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008004:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800800c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800800e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008010:	4618      	mov	r0, r3
 8008012:	3740      	adds	r7, #64	@ 0x40
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b08c      	sub	sp, #48	@ 0x30
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008024:	2300      	movs	r3, #0
 8008026:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800802c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10b      	bne.n	800804a <xQueueReceive+0x32>
	__asm volatile
 8008032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008036:	f383 8811 	msr	BASEPRI, r3
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	623b      	str	r3, [r7, #32]
}
 8008044:	bf00      	nop
 8008046:	bf00      	nop
 8008048:	e7fd      	b.n	8008046 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d103      	bne.n	8008058 <xQueueReceive+0x40>
 8008050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008054:	2b00      	cmp	r3, #0
 8008056:	d101      	bne.n	800805c <xQueueReceive+0x44>
 8008058:	2301      	movs	r3, #1
 800805a:	e000      	b.n	800805e <xQueueReceive+0x46>
 800805c:	2300      	movs	r3, #0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d10b      	bne.n	800807a <xQueueReceive+0x62>
	__asm volatile
 8008062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008066:	f383 8811 	msr	BASEPRI, r3
 800806a:	f3bf 8f6f 	isb	sy
 800806e:	f3bf 8f4f 	dsb	sy
 8008072:	61fb      	str	r3, [r7, #28]
}
 8008074:	bf00      	nop
 8008076:	bf00      	nop
 8008078:	e7fd      	b.n	8008076 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800807a:	f001 fa2f 	bl	80094dc <xTaskGetSchedulerState>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d102      	bne.n	800808a <xQueueReceive+0x72>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d101      	bne.n	800808e <xQueueReceive+0x76>
 800808a:	2301      	movs	r3, #1
 800808c:	e000      	b.n	8008090 <xQueueReceive+0x78>
 800808e:	2300      	movs	r3, #0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d10b      	bne.n	80080ac <xQueueReceive+0x94>
	__asm volatile
 8008094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008098:	f383 8811 	msr	BASEPRI, r3
 800809c:	f3bf 8f6f 	isb	sy
 80080a0:	f3bf 8f4f 	dsb	sy
 80080a4:	61bb      	str	r3, [r7, #24]
}
 80080a6:	bf00      	nop
 80080a8:	bf00      	nop
 80080aa:	e7fd      	b.n	80080a8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080ac:	f002 f884 	bl	800a1b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d01f      	beq.n	80080fc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80080bc:	68b9      	ldr	r1, [r7, #8]
 80080be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080c0:	f000 faa0 	bl	8008604 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80080c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c6:	1e5a      	subs	r2, r3, #1
 80080c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00f      	beq.n	80080f4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d6:	3310      	adds	r3, #16
 80080d8:	4618      	mov	r0, r3
 80080da:	f001 f829 	bl	8009130 <xTaskRemoveFromEventList>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d007      	beq.n	80080f4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80080e4:	4b3c      	ldr	r3, [pc, #240]	@ (80081d8 <xQueueReceive+0x1c0>)
 80080e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80080f4:	f002 f892 	bl	800a21c <vPortExitCritical>
				return pdPASS;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e069      	b.n	80081d0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d103      	bne.n	800810a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008102:	f002 f88b 	bl	800a21c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008106:	2300      	movs	r3, #0
 8008108:	e062      	b.n	80081d0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800810a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800810c:	2b00      	cmp	r3, #0
 800810e:	d106      	bne.n	800811e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008110:	f107 0310 	add.w	r3, r7, #16
 8008114:	4618      	mov	r0, r3
 8008116:	f001 f86f 	bl	80091f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800811a:	2301      	movs	r3, #1
 800811c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800811e:	f002 f87d 	bl	800a21c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008122:	f000 fdd7 	bl	8008cd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008126:	f002 f847 	bl	800a1b8 <vPortEnterCritical>
 800812a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800812c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008130:	b25b      	sxtb	r3, r3
 8008132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008136:	d103      	bne.n	8008140 <xQueueReceive+0x128>
 8008138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800813a:	2200      	movs	r2, #0
 800813c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008142:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008146:	b25b      	sxtb	r3, r3
 8008148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814c:	d103      	bne.n	8008156 <xQueueReceive+0x13e>
 800814e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008150:	2200      	movs	r2, #0
 8008152:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008156:	f002 f861 	bl	800a21c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800815a:	1d3a      	adds	r2, r7, #4
 800815c:	f107 0310 	add.w	r3, r7, #16
 8008160:	4611      	mov	r1, r2
 8008162:	4618      	mov	r0, r3
 8008164:	f001 f85e 	bl	8009224 <xTaskCheckForTimeOut>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d123      	bne.n	80081b6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800816e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008170:	f000 fac0 	bl	80086f4 <prvIsQueueEmpty>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d017      	beq.n	80081aa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800817a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800817c:	3324      	adds	r3, #36	@ 0x24
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	4611      	mov	r1, r2
 8008182:	4618      	mov	r0, r3
 8008184:	f000 ff82 	bl	800908c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008188:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800818a:	f000 fa61 	bl	8008650 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800818e:	f000 fdaf 	bl	8008cf0 <xTaskResumeAll>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d189      	bne.n	80080ac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008198:	4b0f      	ldr	r3, [pc, #60]	@ (80081d8 <xQueueReceive+0x1c0>)
 800819a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800819e:	601a      	str	r2, [r3, #0]
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	e780      	b.n	80080ac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80081aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081ac:	f000 fa50 	bl	8008650 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081b0:	f000 fd9e 	bl	8008cf0 <xTaskResumeAll>
 80081b4:	e77a      	b.n	80080ac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80081b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081b8:	f000 fa4a 	bl	8008650 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081bc:	f000 fd98 	bl	8008cf0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081c2:	f000 fa97 	bl	80086f4 <prvIsQueueEmpty>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f43f af6f 	beq.w	80080ac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80081ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3730      	adds	r7, #48	@ 0x30
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	e000ed04 	.word	0xe000ed04

080081dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b08e      	sub	sp, #56	@ 0x38
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80081e6:	2300      	movs	r3, #0
 80081e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80081ee:	2300      	movs	r3, #0
 80081f0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80081f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d10b      	bne.n	8008210 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80081f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081fc:	f383 8811 	msr	BASEPRI, r3
 8008200:	f3bf 8f6f 	isb	sy
 8008204:	f3bf 8f4f 	dsb	sy
 8008208:	623b      	str	r3, [r7, #32]
}
 800820a:	bf00      	nop
 800820c:	bf00      	nop
 800820e:	e7fd      	b.n	800820c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00b      	beq.n	8008230 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800821c:	f383 8811 	msr	BASEPRI, r3
 8008220:	f3bf 8f6f 	isb	sy
 8008224:	f3bf 8f4f 	dsb	sy
 8008228:	61fb      	str	r3, [r7, #28]
}
 800822a:	bf00      	nop
 800822c:	bf00      	nop
 800822e:	e7fd      	b.n	800822c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008230:	f001 f954 	bl	80094dc <xTaskGetSchedulerState>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d102      	bne.n	8008240 <xQueueSemaphoreTake+0x64>
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d101      	bne.n	8008244 <xQueueSemaphoreTake+0x68>
 8008240:	2301      	movs	r3, #1
 8008242:	e000      	b.n	8008246 <xQueueSemaphoreTake+0x6a>
 8008244:	2300      	movs	r3, #0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10b      	bne.n	8008262 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800824a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800824e:	f383 8811 	msr	BASEPRI, r3
 8008252:	f3bf 8f6f 	isb	sy
 8008256:	f3bf 8f4f 	dsb	sy
 800825a:	61bb      	str	r3, [r7, #24]
}
 800825c:	bf00      	nop
 800825e:	bf00      	nop
 8008260:	e7fd      	b.n	800825e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008262:	f001 ffa9 	bl	800a1b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800826a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800826c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800826e:	2b00      	cmp	r3, #0
 8008270:	d024      	beq.n	80082bc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008274:	1e5a      	subs	r2, r3, #1
 8008276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008278:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800827a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d104      	bne.n	800828c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008282:	f001 faa5 	bl	80097d0 <pvTaskIncrementMutexHeldCount>
 8008286:	4602      	mov	r2, r0
 8008288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800828a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800828c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00f      	beq.n	80082b4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008296:	3310      	adds	r3, #16
 8008298:	4618      	mov	r0, r3
 800829a:	f000 ff49 	bl	8009130 <xTaskRemoveFromEventList>
 800829e:	4603      	mov	r3, r0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d007      	beq.n	80082b4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80082a4:	4b54      	ldr	r3, [pc, #336]	@ (80083f8 <xQueueSemaphoreTake+0x21c>)
 80082a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082aa:	601a      	str	r2, [r3, #0]
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082b4:	f001 ffb2 	bl	800a21c <vPortExitCritical>
				return pdPASS;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e098      	b.n	80083ee <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d112      	bne.n	80082e8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80082c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00b      	beq.n	80082e0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80082c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082cc:	f383 8811 	msr	BASEPRI, r3
 80082d0:	f3bf 8f6f 	isb	sy
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	617b      	str	r3, [r7, #20]
}
 80082da:	bf00      	nop
 80082dc:	bf00      	nop
 80082de:	e7fd      	b.n	80082dc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80082e0:	f001 ff9c 	bl	800a21c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082e4:	2300      	movs	r3, #0
 80082e6:	e082      	b.n	80083ee <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d106      	bne.n	80082fc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082ee:	f107 030c 	add.w	r3, r7, #12
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 ff80 	bl	80091f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082f8:	2301      	movs	r3, #1
 80082fa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082fc:	f001 ff8e 	bl	800a21c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008300:	f000 fce8 	bl	8008cd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008304:	f001 ff58 	bl	800a1b8 <vPortEnterCritical>
 8008308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800830a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800830e:	b25b      	sxtb	r3, r3
 8008310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008314:	d103      	bne.n	800831e <xQueueSemaphoreTake+0x142>
 8008316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008318:	2200      	movs	r2, #0
 800831a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800831e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008320:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008324:	b25b      	sxtb	r3, r3
 8008326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800832a:	d103      	bne.n	8008334 <xQueueSemaphoreTake+0x158>
 800832c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800832e:	2200      	movs	r2, #0
 8008330:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008334:	f001 ff72 	bl	800a21c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008338:	463a      	mov	r2, r7
 800833a:	f107 030c 	add.w	r3, r7, #12
 800833e:	4611      	mov	r1, r2
 8008340:	4618      	mov	r0, r3
 8008342:	f000 ff6f 	bl	8009224 <xTaskCheckForTimeOut>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d132      	bne.n	80083b2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800834c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800834e:	f000 f9d1 	bl	80086f4 <prvIsQueueEmpty>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d026      	beq.n	80083a6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d109      	bne.n	8008374 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008360:	f001 ff2a 	bl	800a1b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	4618      	mov	r0, r3
 800836a:	f001 f8d5 	bl	8009518 <xTaskPriorityInherit>
 800836e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008370:	f001 ff54 	bl	800a21c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008376:	3324      	adds	r3, #36	@ 0x24
 8008378:	683a      	ldr	r2, [r7, #0]
 800837a:	4611      	mov	r1, r2
 800837c:	4618      	mov	r0, r3
 800837e:	f000 fe85 	bl	800908c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008382:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008384:	f000 f964 	bl	8008650 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008388:	f000 fcb2 	bl	8008cf0 <xTaskResumeAll>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	f47f af67 	bne.w	8008262 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008394:	4b18      	ldr	r3, [pc, #96]	@ (80083f8 <xQueueSemaphoreTake+0x21c>)
 8008396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800839a:	601a      	str	r2, [r3, #0]
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	e75d      	b.n	8008262 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80083a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80083a8:	f000 f952 	bl	8008650 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083ac:	f000 fca0 	bl	8008cf0 <xTaskResumeAll>
 80083b0:	e757      	b.n	8008262 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80083b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80083b4:	f000 f94c 	bl	8008650 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083b8:	f000 fc9a 	bl	8008cf0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80083be:	f000 f999 	bl	80086f4 <prvIsQueueEmpty>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f43f af4c 	beq.w	8008262 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80083ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00d      	beq.n	80083ec <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80083d0:	f001 fef2 	bl	800a1b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80083d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80083d6:	f000 f893 	bl	8008500 <prvGetDisinheritPriorityAfterTimeout>
 80083da:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80083dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80083e2:	4618      	mov	r0, r3
 80083e4:	f001 f970 	bl	80096c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80083e8:	f001 ff18 	bl	800a21c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80083ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3738      	adds	r7, #56	@ 0x38
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	e000ed04 	.word	0xe000ed04

080083fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b08e      	sub	sp, #56	@ 0x38
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800840c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10b      	bne.n	800842a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	623b      	str	r3, [r7, #32]
}
 8008424:	bf00      	nop
 8008426:	bf00      	nop
 8008428:	e7fd      	b.n	8008426 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d103      	bne.n	8008438 <xQueueReceiveFromISR+0x3c>
 8008430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008434:	2b00      	cmp	r3, #0
 8008436:	d101      	bne.n	800843c <xQueueReceiveFromISR+0x40>
 8008438:	2301      	movs	r3, #1
 800843a:	e000      	b.n	800843e <xQueueReceiveFromISR+0x42>
 800843c:	2300      	movs	r3, #0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d10b      	bne.n	800845a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8008442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008446:	f383 8811 	msr	BASEPRI, r3
 800844a:	f3bf 8f6f 	isb	sy
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	61fb      	str	r3, [r7, #28]
}
 8008454:	bf00      	nop
 8008456:	bf00      	nop
 8008458:	e7fd      	b.n	8008456 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800845a:	f001 ff8d 	bl	800a378 <vPortValidateInterruptPriority>
	__asm volatile
 800845e:	f3ef 8211 	mrs	r2, BASEPRI
 8008462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008466:	f383 8811 	msr	BASEPRI, r3
 800846a:	f3bf 8f6f 	isb	sy
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	61ba      	str	r2, [r7, #24]
 8008474:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008476:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008478:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800847a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800847e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008482:	2b00      	cmp	r3, #0
 8008484:	d02f      	beq.n	80084e6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008488:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800848c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008490:	68b9      	ldr	r1, [r7, #8]
 8008492:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008494:	f000 f8b6 	bl	8008604 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800849a:	1e5a      	subs	r2, r3, #1
 800849c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80084a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80084a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a8:	d112      	bne.n	80084d0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d016      	beq.n	80084e0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b4:	3310      	adds	r3, #16
 80084b6:	4618      	mov	r0, r3
 80084b8:	f000 fe3a 	bl	8009130 <xTaskRemoveFromEventList>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00e      	beq.n	80084e0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00b      	beq.n	80084e0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	601a      	str	r2, [r3, #0]
 80084ce:	e007      	b.n	80084e0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80084d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084d4:	3301      	adds	r3, #1
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	b25a      	sxtb	r2, r3
 80084da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80084e0:	2301      	movs	r3, #1
 80084e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80084e4:	e001      	b.n	80084ea <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80084e6:	2300      	movs	r3, #0
 80084e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80084ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	f383 8811 	msr	BASEPRI, r3
}
 80084f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3738      	adds	r7, #56	@ 0x38
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800850c:	2b00      	cmp	r3, #0
 800850e:	d006      	beq.n	800851e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	e001      	b.n	8008522 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800851e:	2300      	movs	r3, #0
 8008520:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008522:	68fb      	ldr	r3, [r7, #12]
	}
 8008524:	4618      	mov	r0, r3
 8008526:	3714      	adds	r7, #20
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800853c:	2300      	movs	r3, #0
 800853e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008544:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10d      	bne.n	800856a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d14d      	bne.n	80085f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	4618      	mov	r0, r3
 800855c:	f001 f844 	bl	80095e8 <xTaskPriorityDisinherit>
 8008560:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	609a      	str	r2, [r3, #8]
 8008568:	e043      	b.n	80085f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d119      	bne.n	80085a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6858      	ldr	r0, [r3, #4]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008578:	461a      	mov	r2, r3
 800857a:	68b9      	ldr	r1, [r7, #8]
 800857c:	f002 f9b0 	bl	800a8e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	685a      	ldr	r2, [r3, #4]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008588:	441a      	add	r2, r3
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	685a      	ldr	r2, [r3, #4]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	429a      	cmp	r2, r3
 8008598:	d32b      	bcc.n	80085f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	605a      	str	r2, [r3, #4]
 80085a2:	e026      	b.n	80085f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	68d8      	ldr	r0, [r3, #12]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ac:	461a      	mov	r2, r3
 80085ae:	68b9      	ldr	r1, [r7, #8]
 80085b0:	f002 f996 	bl	800a8e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	68da      	ldr	r2, [r3, #12]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085bc:	425b      	negs	r3, r3
 80085be:	441a      	add	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	68da      	ldr	r2, [r3, #12]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d207      	bcs.n	80085e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	689a      	ldr	r2, [r3, #8]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085d8:	425b      	negs	r3, r3
 80085da:	441a      	add	r2, r3
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d105      	bne.n	80085f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d002      	beq.n	80085f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	3b01      	subs	r3, #1
 80085f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	1c5a      	adds	r2, r3, #1
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80085fa:	697b      	ldr	r3, [r7, #20]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3718      	adds	r7, #24
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008612:	2b00      	cmp	r3, #0
 8008614:	d018      	beq.n	8008648 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	68da      	ldr	r2, [r3, #12]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800861e:	441a      	add	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	68da      	ldr	r2, [r3, #12]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	429a      	cmp	r2, r3
 800862e:	d303      	bcc.n	8008638 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	68d9      	ldr	r1, [r3, #12]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008640:	461a      	mov	r2, r3
 8008642:	6838      	ldr	r0, [r7, #0]
 8008644:	f002 f94c 	bl	800a8e0 <memcpy>
	}
}
 8008648:	bf00      	nop
 800864a:	3708      	adds	r7, #8
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008658:	f001 fdae 	bl	800a1b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008662:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008664:	e011      	b.n	800868a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800866a:	2b00      	cmp	r3, #0
 800866c:	d012      	beq.n	8008694 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	3324      	adds	r3, #36	@ 0x24
 8008672:	4618      	mov	r0, r3
 8008674:	f000 fd5c 	bl	8009130 <xTaskRemoveFromEventList>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d001      	beq.n	8008682 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800867e:	f000 fe35 	bl	80092ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008682:	7bfb      	ldrb	r3, [r7, #15]
 8008684:	3b01      	subs	r3, #1
 8008686:	b2db      	uxtb	r3, r3
 8008688:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800868a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800868e:	2b00      	cmp	r3, #0
 8008690:	dce9      	bgt.n	8008666 <prvUnlockQueue+0x16>
 8008692:	e000      	b.n	8008696 <prvUnlockQueue+0x46>
					break;
 8008694:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	22ff      	movs	r2, #255	@ 0xff
 800869a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800869e:	f001 fdbd 	bl	800a21c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80086a2:	f001 fd89 	bl	800a1b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80086ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086ae:	e011      	b.n	80086d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d012      	beq.n	80086de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	3310      	adds	r3, #16
 80086bc:	4618      	mov	r0, r3
 80086be:	f000 fd37 	bl	8009130 <xTaskRemoveFromEventList>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d001      	beq.n	80086cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80086c8:	f000 fe10 	bl	80092ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80086cc:	7bbb      	ldrb	r3, [r7, #14]
 80086ce:	3b01      	subs	r3, #1
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	dce9      	bgt.n	80086b0 <prvUnlockQueue+0x60>
 80086dc:	e000      	b.n	80086e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80086de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	22ff      	movs	r2, #255	@ 0xff
 80086e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80086e8:	f001 fd98 	bl	800a21c <vPortExitCritical>
}
 80086ec:	bf00      	nop
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086fc:	f001 fd5c 	bl	800a1b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008704:	2b00      	cmp	r3, #0
 8008706:	d102      	bne.n	800870e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008708:	2301      	movs	r3, #1
 800870a:	60fb      	str	r3, [r7, #12]
 800870c:	e001      	b.n	8008712 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800870e:	2300      	movs	r3, #0
 8008710:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008712:	f001 fd83 	bl	800a21c <vPortExitCritical>

	return xReturn;
 8008716:	68fb      	ldr	r3, [r7, #12]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008728:	f001 fd46 	bl	800a1b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008734:	429a      	cmp	r2, r3
 8008736:	d102      	bne.n	800873e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008738:	2301      	movs	r3, #1
 800873a:	60fb      	str	r3, [r7, #12]
 800873c:	e001      	b.n	8008742 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800873e:	2300      	movs	r3, #0
 8008740:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008742:	f001 fd6b 	bl	800a21c <vPortExitCritical>

	return xReturn;
 8008746:	68fb      	ldr	r3, [r7, #12]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800875a:	2300      	movs	r3, #0
 800875c:	60fb      	str	r3, [r7, #12]
 800875e:	e014      	b.n	800878a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008760:	4a0f      	ldr	r2, [pc, #60]	@ (80087a0 <vQueueAddToRegistry+0x50>)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10b      	bne.n	8008784 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800876c:	490c      	ldr	r1, [pc, #48]	@ (80087a0 <vQueueAddToRegistry+0x50>)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	683a      	ldr	r2, [r7, #0]
 8008772:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008776:	4a0a      	ldr	r2, [pc, #40]	@ (80087a0 <vQueueAddToRegistry+0x50>)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	00db      	lsls	r3, r3, #3
 800877c:	4413      	add	r3, r2
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008782:	e006      	b.n	8008792 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	3301      	adds	r3, #1
 8008788:	60fb      	str	r3, [r7, #12]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2b07      	cmp	r3, #7
 800878e:	d9e7      	bls.n	8008760 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008790:	bf00      	nop
 8008792:	bf00      	nop
 8008794:	3714      	adds	r7, #20
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	24000f64 	.word	0x24000f64

080087a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80087b4:	f001 fd00 	bl	800a1b8 <vPortEnterCritical>
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80087be:	b25b      	sxtb	r3, r3
 80087c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c4:	d103      	bne.n	80087ce <vQueueWaitForMessageRestricted+0x2a>
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80087d4:	b25b      	sxtb	r3, r3
 80087d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087da:	d103      	bne.n	80087e4 <vQueueWaitForMessageRestricted+0x40>
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087e4:	f001 fd1a 	bl	800a21c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d106      	bne.n	80087fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	3324      	adds	r3, #36	@ 0x24
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	68b9      	ldr	r1, [r7, #8]
 80087f8:	4618      	mov	r0, r3
 80087fa:	f000 fc6d 	bl	80090d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80087fe:	6978      	ldr	r0, [r7, #20]
 8008800:	f7ff ff26 	bl	8008650 <prvUnlockQueue>
	}
 8008804:	bf00      	nop
 8008806:	3718      	adds	r7, #24
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800880c:	b580      	push	{r7, lr}
 800880e:	b08e      	sub	sp, #56	@ 0x38
 8008810:	af04      	add	r7, sp, #16
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
 8008818:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800881a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800881c:	2b00      	cmp	r3, #0
 800881e:	d10b      	bne.n	8008838 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008824:	f383 8811 	msr	BASEPRI, r3
 8008828:	f3bf 8f6f 	isb	sy
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	623b      	str	r3, [r7, #32]
}
 8008832:	bf00      	nop
 8008834:	bf00      	nop
 8008836:	e7fd      	b.n	8008834 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10b      	bne.n	8008856 <xTaskCreateStatic+0x4a>
	__asm volatile
 800883e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	61fb      	str	r3, [r7, #28]
}
 8008850:	bf00      	nop
 8008852:	bf00      	nop
 8008854:	e7fd      	b.n	8008852 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008856:	23a8      	movs	r3, #168	@ 0xa8
 8008858:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	2ba8      	cmp	r3, #168	@ 0xa8
 800885e:	d00b      	beq.n	8008878 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008864:	f383 8811 	msr	BASEPRI, r3
 8008868:	f3bf 8f6f 	isb	sy
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	61bb      	str	r3, [r7, #24]
}
 8008872:	bf00      	nop
 8008874:	bf00      	nop
 8008876:	e7fd      	b.n	8008874 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008878:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800887a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800887c:	2b00      	cmp	r3, #0
 800887e:	d01e      	beq.n	80088be <xTaskCreateStatic+0xb2>
 8008880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008882:	2b00      	cmp	r3, #0
 8008884:	d01b      	beq.n	80088be <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008888:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800888a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800888e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008892:	2202      	movs	r2, #2
 8008894:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008898:	2300      	movs	r3, #0
 800889a:	9303      	str	r3, [sp, #12]
 800889c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800889e:	9302      	str	r3, [sp, #8]
 80088a0:	f107 0314 	add.w	r3, r7, #20
 80088a4:	9301      	str	r3, [sp, #4]
 80088a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a8:	9300      	str	r3, [sp, #0]
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	68b9      	ldr	r1, [r7, #8]
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f000 f851 	bl	8008958 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80088b8:	f000 f8f6 	bl	8008aa8 <prvAddNewTaskToReadyList>
 80088bc:	e001      	b.n	80088c2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80088be:	2300      	movs	r3, #0
 80088c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80088c2:	697b      	ldr	r3, [r7, #20]
	}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3728      	adds	r7, #40	@ 0x28
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b08c      	sub	sp, #48	@ 0x30
 80088d0:	af04      	add	r7, sp, #16
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	603b      	str	r3, [r7, #0]
 80088d8:	4613      	mov	r3, r2
 80088da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80088dc:	88fb      	ldrh	r3, [r7, #6]
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	4618      	mov	r0, r3
 80088e2:	f001 fd8b 	bl	800a3fc <pvPortMalloc>
 80088e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00e      	beq.n	800890c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80088ee:	20a8      	movs	r0, #168	@ 0xa8
 80088f0:	f001 fd84 	bl	800a3fc <pvPortMalloc>
 80088f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d003      	beq.n	8008904 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	697a      	ldr	r2, [r7, #20]
 8008900:	631a      	str	r2, [r3, #48]	@ 0x30
 8008902:	e005      	b.n	8008910 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008904:	6978      	ldr	r0, [r7, #20]
 8008906:	f001 fe47 	bl	800a598 <vPortFree>
 800890a:	e001      	b.n	8008910 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800890c:	2300      	movs	r3, #0
 800890e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d017      	beq.n	8008946 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800891e:	88fa      	ldrh	r2, [r7, #6]
 8008920:	2300      	movs	r3, #0
 8008922:	9303      	str	r3, [sp, #12]
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	9302      	str	r3, [sp, #8]
 8008928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800892a:	9301      	str	r3, [sp, #4]
 800892c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800892e:	9300      	str	r3, [sp, #0]
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	68b9      	ldr	r1, [r7, #8]
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f000 f80f 	bl	8008958 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800893a:	69f8      	ldr	r0, [r7, #28]
 800893c:	f000 f8b4 	bl	8008aa8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008940:	2301      	movs	r3, #1
 8008942:	61bb      	str	r3, [r7, #24]
 8008944:	e002      	b.n	800894c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008946:	f04f 33ff 	mov.w	r3, #4294967295
 800894a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800894c:	69bb      	ldr	r3, [r7, #24]
	}
 800894e:	4618      	mov	r0, r3
 8008950:	3720      	adds	r7, #32
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
	...

08008958 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b088      	sub	sp, #32
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
 8008964:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008968:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	461a      	mov	r2, r3
 8008970:	21a5      	movs	r1, #165	@ 0xa5
 8008972:	f001 ff31 	bl	800a7d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008978:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800897a:	6879      	ldr	r1, [r7, #4]
 800897c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008980:	440b      	add	r3, r1
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	4413      	add	r3, r2
 8008986:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	f023 0307 	bic.w	r3, r3, #7
 800898e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	f003 0307 	and.w	r3, r3, #7
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00b      	beq.n	80089b2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800899a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800899e:	f383 8811 	msr	BASEPRI, r3
 80089a2:	f3bf 8f6f 	isb	sy
 80089a6:	f3bf 8f4f 	dsb	sy
 80089aa:	617b      	str	r3, [r7, #20]
}
 80089ac:	bf00      	nop
 80089ae:	bf00      	nop
 80089b0:	e7fd      	b.n	80089ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d01f      	beq.n	80089f8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089b8:	2300      	movs	r3, #0
 80089ba:	61fb      	str	r3, [r7, #28]
 80089bc:	e012      	b.n	80089e4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	4413      	add	r3, r2
 80089c4:	7819      	ldrb	r1, [r3, #0]
 80089c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	4413      	add	r3, r2
 80089cc:	3334      	adds	r3, #52	@ 0x34
 80089ce:	460a      	mov	r2, r1
 80089d0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	4413      	add	r3, r2
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d006      	beq.n	80089ec <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	3301      	adds	r3, #1
 80089e2:	61fb      	str	r3, [r7, #28]
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	2b0f      	cmp	r3, #15
 80089e8:	d9e9      	bls.n	80089be <prvInitialiseNewTask+0x66>
 80089ea:	e000      	b.n	80089ee <prvInitialiseNewTask+0x96>
			{
				break;
 80089ec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80089ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80089f6:	e003      	b.n	8008a00 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80089f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fa:	2200      	movs	r2, #0
 80089fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a02:	2b37      	cmp	r3, #55	@ 0x37
 8008a04:	d901      	bls.n	8008a0a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008a06:	2337      	movs	r3, #55	@ 0x37
 8008a08:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a0e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a14:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a18:	2200      	movs	r2, #0
 8008a1a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1e:	3304      	adds	r3, #4
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fe fec7 	bl	80077b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a28:	3318      	adds	r3, #24
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fe fec2 	bl	80077b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a34:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a38:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a44:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a58:	3354      	adds	r3, #84	@ 0x54
 8008a5a:	224c      	movs	r2, #76	@ 0x4c
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f001 feba 	bl	800a7d8 <memset>
 8008a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a66:	4a0d      	ldr	r2, [pc, #52]	@ (8008a9c <prvInitialiseNewTask+0x144>)
 8008a68:	659a      	str	r2, [r3, #88]	@ 0x58
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a6c:	4a0c      	ldr	r2, [pc, #48]	@ (8008aa0 <prvInitialiseNewTask+0x148>)
 8008a6e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a72:	4a0c      	ldr	r2, [pc, #48]	@ (8008aa4 <prvInitialiseNewTask+0x14c>)
 8008a74:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a76:	683a      	ldr	r2, [r7, #0]
 8008a78:	68f9      	ldr	r1, [r7, #12]
 8008a7a:	69b8      	ldr	r0, [r7, #24]
 8008a7c:	f001 fa6a 	bl	8009f54 <pxPortInitialiseStack>
 8008a80:	4602      	mov	r2, r0
 8008a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a84:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d002      	beq.n	8008a92 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a92:	bf00      	nop
 8008a94:	3720      	adds	r7, #32
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	240051f8 	.word	0x240051f8
 8008aa0:	24005260 	.word	0x24005260
 8008aa4:	240052c8 	.word	0x240052c8

08008aa8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008ab0:	f001 fb82 	bl	800a1b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ab4:	4b2d      	ldr	r3, [pc, #180]	@ (8008b6c <prvAddNewTaskToReadyList+0xc4>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	4a2c      	ldr	r2, [pc, #176]	@ (8008b6c <prvAddNewTaskToReadyList+0xc4>)
 8008abc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008abe:	4b2c      	ldr	r3, [pc, #176]	@ (8008b70 <prvAddNewTaskToReadyList+0xc8>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d109      	bne.n	8008ada <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008ac6:	4a2a      	ldr	r2, [pc, #168]	@ (8008b70 <prvAddNewTaskToReadyList+0xc8>)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008acc:	4b27      	ldr	r3, [pc, #156]	@ (8008b6c <prvAddNewTaskToReadyList+0xc4>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d110      	bne.n	8008af6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ad4:	f000 fc2e 	bl	8009334 <prvInitialiseTaskLists>
 8008ad8:	e00d      	b.n	8008af6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ada:	4b26      	ldr	r3, [pc, #152]	@ (8008b74 <prvAddNewTaskToReadyList+0xcc>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d109      	bne.n	8008af6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ae2:	4b23      	ldr	r3, [pc, #140]	@ (8008b70 <prvAddNewTaskToReadyList+0xc8>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d802      	bhi.n	8008af6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008af0:	4a1f      	ldr	r2, [pc, #124]	@ (8008b70 <prvAddNewTaskToReadyList+0xc8>)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008af6:	4b20      	ldr	r3, [pc, #128]	@ (8008b78 <prvAddNewTaskToReadyList+0xd0>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	3301      	adds	r3, #1
 8008afc:	4a1e      	ldr	r2, [pc, #120]	@ (8008b78 <prvAddNewTaskToReadyList+0xd0>)
 8008afe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008b00:	4b1d      	ldr	r3, [pc, #116]	@ (8008b78 <prvAddNewTaskToReadyList+0xd0>)
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8008b7c <prvAddNewTaskToReadyList+0xd4>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d903      	bls.n	8008b1c <prvAddNewTaskToReadyList+0x74>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b18:	4a18      	ldr	r2, [pc, #96]	@ (8008b7c <prvAddNewTaskToReadyList+0xd4>)
 8008b1a:	6013      	str	r3, [r2, #0]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b20:	4613      	mov	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	4a15      	ldr	r2, [pc, #84]	@ (8008b80 <prvAddNewTaskToReadyList+0xd8>)
 8008b2a:	441a      	add	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	3304      	adds	r3, #4
 8008b30:	4619      	mov	r1, r3
 8008b32:	4610      	mov	r0, r2
 8008b34:	f7fe fe4b 	bl	80077ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008b38:	f001 fb70 	bl	800a21c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8008b74 <prvAddNewTaskToReadyList+0xcc>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00e      	beq.n	8008b62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008b44:	4b0a      	ldr	r3, [pc, #40]	@ (8008b70 <prvAddNewTaskToReadyList+0xc8>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d207      	bcs.n	8008b62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008b52:	4b0c      	ldr	r3, [pc, #48]	@ (8008b84 <prvAddNewTaskToReadyList+0xdc>)
 8008b54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b58:	601a      	str	r2, [r3, #0]
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b62:	bf00      	nop
 8008b64:	3708      	adds	r7, #8
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	24001478 	.word	0x24001478
 8008b70:	24000fa4 	.word	0x24000fa4
 8008b74:	24001484 	.word	0x24001484
 8008b78:	24001494 	.word	0x24001494
 8008b7c:	24001480 	.word	0x24001480
 8008b80:	24000fa8 	.word	0x24000fa8
 8008b84:	e000ed04 	.word	0xe000ed04

08008b88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008b90:	2300      	movs	r3, #0
 8008b92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d018      	beq.n	8008bcc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008b9a:	4b14      	ldr	r3, [pc, #80]	@ (8008bec <vTaskDelay+0x64>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00b      	beq.n	8008bba <vTaskDelay+0x32>
	__asm volatile
 8008ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba6:	f383 8811 	msr	BASEPRI, r3
 8008baa:	f3bf 8f6f 	isb	sy
 8008bae:	f3bf 8f4f 	dsb	sy
 8008bb2:	60bb      	str	r3, [r7, #8]
}
 8008bb4:	bf00      	nop
 8008bb6:	bf00      	nop
 8008bb8:	e7fd      	b.n	8008bb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008bba:	f000 f88b 	bl	8008cd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 fe19 	bl	80097f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008bc6:	f000 f893 	bl	8008cf0 <xTaskResumeAll>
 8008bca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d107      	bne.n	8008be2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008bd2:	4b07      	ldr	r3, [pc, #28]	@ (8008bf0 <vTaskDelay+0x68>)
 8008bd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bd8:	601a      	str	r2, [r3, #0]
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008be2:	bf00      	nop
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	240014a0 	.word	0x240014a0
 8008bf0:	e000ed04 	.word	0xe000ed04

08008bf4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b08a      	sub	sp, #40	@ 0x28
 8008bf8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008c02:	463a      	mov	r2, r7
 8008c04:	1d39      	adds	r1, r7, #4
 8008c06:	f107 0308 	add.w	r3, r7, #8
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fe fd7e 	bl	800770c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008c10:	6839      	ldr	r1, [r7, #0]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	68ba      	ldr	r2, [r7, #8]
 8008c16:	9202      	str	r2, [sp, #8]
 8008c18:	9301      	str	r3, [sp, #4]
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	9300      	str	r3, [sp, #0]
 8008c1e:	2300      	movs	r3, #0
 8008c20:	460a      	mov	r2, r1
 8008c22:	4924      	ldr	r1, [pc, #144]	@ (8008cb4 <vTaskStartScheduler+0xc0>)
 8008c24:	4824      	ldr	r0, [pc, #144]	@ (8008cb8 <vTaskStartScheduler+0xc4>)
 8008c26:	f7ff fdf1 	bl	800880c <xTaskCreateStatic>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	4a23      	ldr	r2, [pc, #140]	@ (8008cbc <vTaskStartScheduler+0xc8>)
 8008c2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008c30:	4b22      	ldr	r3, [pc, #136]	@ (8008cbc <vTaskStartScheduler+0xc8>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d002      	beq.n	8008c3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	617b      	str	r3, [r7, #20]
 8008c3c:	e001      	b.n	8008c42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d102      	bne.n	8008c4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008c48:	f000 fe2a 	bl	80098a0 <xTimerCreateTimerTask>
 8008c4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d11b      	bne.n	8008c8c <vTaskStartScheduler+0x98>
	__asm volatile
 8008c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c58:	f383 8811 	msr	BASEPRI, r3
 8008c5c:	f3bf 8f6f 	isb	sy
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	613b      	str	r3, [r7, #16]
}
 8008c66:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c68:	4b15      	ldr	r3, [pc, #84]	@ (8008cc0 <vTaskStartScheduler+0xcc>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	3354      	adds	r3, #84	@ 0x54
 8008c6e:	4a15      	ldr	r2, [pc, #84]	@ (8008cc4 <vTaskStartScheduler+0xd0>)
 8008c70:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008c72:	4b15      	ldr	r3, [pc, #84]	@ (8008cc8 <vTaskStartScheduler+0xd4>)
 8008c74:	f04f 32ff 	mov.w	r2, #4294967295
 8008c78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008c7a:	4b14      	ldr	r3, [pc, #80]	@ (8008ccc <vTaskStartScheduler+0xd8>)
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008c80:	4b13      	ldr	r3, [pc, #76]	@ (8008cd0 <vTaskStartScheduler+0xdc>)
 8008c82:	2200      	movs	r2, #0
 8008c84:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008c86:	f001 f9f3 	bl	800a070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008c8a:	e00f      	b.n	8008cac <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c92:	d10b      	bne.n	8008cac <vTaskStartScheduler+0xb8>
	__asm volatile
 8008c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c98:	f383 8811 	msr	BASEPRI, r3
 8008c9c:	f3bf 8f6f 	isb	sy
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	60fb      	str	r3, [r7, #12]
}
 8008ca6:	bf00      	nop
 8008ca8:	bf00      	nop
 8008caa:	e7fd      	b.n	8008ca8 <vTaskStartScheduler+0xb4>
}
 8008cac:	bf00      	nop
 8008cae:	3718      	adds	r7, #24
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	0800aa3c 	.word	0x0800aa3c
 8008cb8:	08009305 	.word	0x08009305
 8008cbc:	2400149c 	.word	0x2400149c
 8008cc0:	24000fa4 	.word	0x24000fa4
 8008cc4:	24000014 	.word	0x24000014
 8008cc8:	24001498 	.word	0x24001498
 8008ccc:	24001484 	.word	0x24001484
 8008cd0:	2400147c 	.word	0x2400147c

08008cd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008cd8:	4b04      	ldr	r3, [pc, #16]	@ (8008cec <vTaskSuspendAll+0x18>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	4a03      	ldr	r2, [pc, #12]	@ (8008cec <vTaskSuspendAll+0x18>)
 8008ce0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008ce2:	bf00      	nop
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr
 8008cec:	240014a0 	.word	0x240014a0

08008cf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008cfe:	4b42      	ldr	r3, [pc, #264]	@ (8008e08 <xTaskResumeAll+0x118>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d10b      	bne.n	8008d1e <xTaskResumeAll+0x2e>
	__asm volatile
 8008d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d0a:	f383 8811 	msr	BASEPRI, r3
 8008d0e:	f3bf 8f6f 	isb	sy
 8008d12:	f3bf 8f4f 	dsb	sy
 8008d16:	603b      	str	r3, [r7, #0]
}
 8008d18:	bf00      	nop
 8008d1a:	bf00      	nop
 8008d1c:	e7fd      	b.n	8008d1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008d1e:	f001 fa4b 	bl	800a1b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008d22:	4b39      	ldr	r3, [pc, #228]	@ (8008e08 <xTaskResumeAll+0x118>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	3b01      	subs	r3, #1
 8008d28:	4a37      	ldr	r2, [pc, #220]	@ (8008e08 <xTaskResumeAll+0x118>)
 8008d2a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d2c:	4b36      	ldr	r3, [pc, #216]	@ (8008e08 <xTaskResumeAll+0x118>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d162      	bne.n	8008dfa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d34:	4b35      	ldr	r3, [pc, #212]	@ (8008e0c <xTaskResumeAll+0x11c>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d05e      	beq.n	8008dfa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d3c:	e02f      	b.n	8008d9e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d3e:	4b34      	ldr	r3, [pc, #208]	@ (8008e10 <xTaskResumeAll+0x120>)
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	3318      	adds	r3, #24
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7fe fd9c 	bl	8007888 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	3304      	adds	r3, #4
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7fe fd97 	bl	8007888 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8008e14 <xTaskResumeAll+0x124>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d903      	bls.n	8008d6e <xTaskResumeAll+0x7e>
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d6a:	4a2a      	ldr	r2, [pc, #168]	@ (8008e14 <xTaskResumeAll+0x124>)
 8008d6c:	6013      	str	r3, [r2, #0]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d72:	4613      	mov	r3, r2
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	4413      	add	r3, r2
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4a27      	ldr	r2, [pc, #156]	@ (8008e18 <xTaskResumeAll+0x128>)
 8008d7c:	441a      	add	r2, r3
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	3304      	adds	r3, #4
 8008d82:	4619      	mov	r1, r3
 8008d84:	4610      	mov	r0, r2
 8008d86:	f7fe fd22 	bl	80077ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d8e:	4b23      	ldr	r3, [pc, #140]	@ (8008e1c <xTaskResumeAll+0x12c>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d302      	bcc.n	8008d9e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008d98:	4b21      	ldr	r3, [pc, #132]	@ (8008e20 <xTaskResumeAll+0x130>)
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8008e10 <xTaskResumeAll+0x120>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1cb      	bne.n	8008d3e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d001      	beq.n	8008db0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008dac:	f000 fb66 	bl	800947c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008db0:	4b1c      	ldr	r3, [pc, #112]	@ (8008e24 <xTaskResumeAll+0x134>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d010      	beq.n	8008dde <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008dbc:	f000 f846 	bl	8008e4c <xTaskIncrementTick>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d002      	beq.n	8008dcc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008dc6:	4b16      	ldr	r3, [pc, #88]	@ (8008e20 <xTaskResumeAll+0x130>)
 8008dc8:	2201      	movs	r2, #1
 8008dca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d1f1      	bne.n	8008dbc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008dd8:	4b12      	ldr	r3, [pc, #72]	@ (8008e24 <xTaskResumeAll+0x134>)
 8008dda:	2200      	movs	r2, #0
 8008ddc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008dde:	4b10      	ldr	r3, [pc, #64]	@ (8008e20 <xTaskResumeAll+0x130>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d009      	beq.n	8008dfa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008de6:	2301      	movs	r3, #1
 8008de8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008dea:	4b0f      	ldr	r3, [pc, #60]	@ (8008e28 <xTaskResumeAll+0x138>)
 8008dec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008df0:	601a      	str	r2, [r3, #0]
 8008df2:	f3bf 8f4f 	dsb	sy
 8008df6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008dfa:	f001 fa0f 	bl	800a21c <vPortExitCritical>

	return xAlreadyYielded;
 8008dfe:	68bb      	ldr	r3, [r7, #8]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3710      	adds	r7, #16
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	240014a0 	.word	0x240014a0
 8008e0c:	24001478 	.word	0x24001478
 8008e10:	24001438 	.word	0x24001438
 8008e14:	24001480 	.word	0x24001480
 8008e18:	24000fa8 	.word	0x24000fa8
 8008e1c:	24000fa4 	.word	0x24000fa4
 8008e20:	2400148c 	.word	0x2400148c
 8008e24:	24001488 	.word	0x24001488
 8008e28:	e000ed04 	.word	0xe000ed04

08008e2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008e32:	4b05      	ldr	r3, [pc, #20]	@ (8008e48 <xTaskGetTickCount+0x1c>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008e38:	687b      	ldr	r3, [r7, #4]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	370c      	adds	r7, #12
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	2400147c 	.word	0x2400147c

08008e4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b086      	sub	sp, #24
 8008e50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008e52:	2300      	movs	r3, #0
 8008e54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e56:	4b4f      	ldr	r3, [pc, #316]	@ (8008f94 <xTaskIncrementTick+0x148>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f040 8090 	bne.w	8008f80 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008e60:	4b4d      	ldr	r3, [pc, #308]	@ (8008f98 <xTaskIncrementTick+0x14c>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	3301      	adds	r3, #1
 8008e66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008e68:	4a4b      	ldr	r2, [pc, #300]	@ (8008f98 <xTaskIncrementTick+0x14c>)
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d121      	bne.n	8008eb8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008e74:	4b49      	ldr	r3, [pc, #292]	@ (8008f9c <xTaskIncrementTick+0x150>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00b      	beq.n	8008e96 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	603b      	str	r3, [r7, #0]
}
 8008e90:	bf00      	nop
 8008e92:	bf00      	nop
 8008e94:	e7fd      	b.n	8008e92 <xTaskIncrementTick+0x46>
 8008e96:	4b41      	ldr	r3, [pc, #260]	@ (8008f9c <xTaskIncrementTick+0x150>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	60fb      	str	r3, [r7, #12]
 8008e9c:	4b40      	ldr	r3, [pc, #256]	@ (8008fa0 <xTaskIncrementTick+0x154>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a3e      	ldr	r2, [pc, #248]	@ (8008f9c <xTaskIncrementTick+0x150>)
 8008ea2:	6013      	str	r3, [r2, #0]
 8008ea4:	4a3e      	ldr	r2, [pc, #248]	@ (8008fa0 <xTaskIncrementTick+0x154>)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6013      	str	r3, [r2, #0]
 8008eaa:	4b3e      	ldr	r3, [pc, #248]	@ (8008fa4 <xTaskIncrementTick+0x158>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	4a3c      	ldr	r2, [pc, #240]	@ (8008fa4 <xTaskIncrementTick+0x158>)
 8008eb2:	6013      	str	r3, [r2, #0]
 8008eb4:	f000 fae2 	bl	800947c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008eb8:	4b3b      	ldr	r3, [pc, #236]	@ (8008fa8 <xTaskIncrementTick+0x15c>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	693a      	ldr	r2, [r7, #16]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d349      	bcc.n	8008f56 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ec2:	4b36      	ldr	r3, [pc, #216]	@ (8008f9c <xTaskIncrementTick+0x150>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d104      	bne.n	8008ed6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ecc:	4b36      	ldr	r3, [pc, #216]	@ (8008fa8 <xTaskIncrementTick+0x15c>)
 8008ece:	f04f 32ff 	mov.w	r2, #4294967295
 8008ed2:	601a      	str	r2, [r3, #0]
					break;
 8008ed4:	e03f      	b.n	8008f56 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ed6:	4b31      	ldr	r3, [pc, #196]	@ (8008f9c <xTaskIncrementTick+0x150>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ee6:	693a      	ldr	r2, [r7, #16]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d203      	bcs.n	8008ef6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008eee:	4a2e      	ldr	r2, [pc, #184]	@ (8008fa8 <xTaskIncrementTick+0x15c>)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008ef4:	e02f      	b.n	8008f56 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	3304      	adds	r3, #4
 8008efa:	4618      	mov	r0, r3
 8008efc:	f7fe fcc4 	bl	8007888 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d004      	beq.n	8008f12 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	3318      	adds	r3, #24
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f7fe fcbb 	bl	8007888 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f16:	4b25      	ldr	r3, [pc, #148]	@ (8008fac <xTaskIncrementTick+0x160>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d903      	bls.n	8008f26 <xTaskIncrementTick+0xda>
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f22:	4a22      	ldr	r2, [pc, #136]	@ (8008fac <xTaskIncrementTick+0x160>)
 8008f24:	6013      	str	r3, [r2, #0]
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4413      	add	r3, r2
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	4a1f      	ldr	r2, [pc, #124]	@ (8008fb0 <xTaskIncrementTick+0x164>)
 8008f34:	441a      	add	r2, r3
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	3304      	adds	r3, #4
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	f7fe fc46 	bl	80077ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f46:	4b1b      	ldr	r3, [pc, #108]	@ (8008fb4 <xTaskIncrementTick+0x168>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d3b8      	bcc.n	8008ec2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008f50:	2301      	movs	r3, #1
 8008f52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f54:	e7b5      	b.n	8008ec2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008f56:	4b17      	ldr	r3, [pc, #92]	@ (8008fb4 <xTaskIncrementTick+0x168>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f5c:	4914      	ldr	r1, [pc, #80]	@ (8008fb0 <xTaskIncrementTick+0x164>)
 8008f5e:	4613      	mov	r3, r2
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	4413      	add	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	440b      	add	r3, r1
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d901      	bls.n	8008f72 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008f72:	4b11      	ldr	r3, [pc, #68]	@ (8008fb8 <xTaskIncrementTick+0x16c>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d007      	beq.n	8008f8a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	617b      	str	r3, [r7, #20]
 8008f7e:	e004      	b.n	8008f8a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008f80:	4b0e      	ldr	r3, [pc, #56]	@ (8008fbc <xTaskIncrementTick+0x170>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	3301      	adds	r3, #1
 8008f86:	4a0d      	ldr	r2, [pc, #52]	@ (8008fbc <xTaskIncrementTick+0x170>)
 8008f88:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008f8a:	697b      	ldr	r3, [r7, #20]
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3718      	adds	r7, #24
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	240014a0 	.word	0x240014a0
 8008f98:	2400147c 	.word	0x2400147c
 8008f9c:	24001430 	.word	0x24001430
 8008fa0:	24001434 	.word	0x24001434
 8008fa4:	24001490 	.word	0x24001490
 8008fa8:	24001498 	.word	0x24001498
 8008fac:	24001480 	.word	0x24001480
 8008fb0:	24000fa8 	.word	0x24000fa8
 8008fb4:	24000fa4 	.word	0x24000fa4
 8008fb8:	2400148c 	.word	0x2400148c
 8008fbc:	24001488 	.word	0x24001488

08008fc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008fc6:	4b2b      	ldr	r3, [pc, #172]	@ (8009074 <vTaskSwitchContext+0xb4>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d003      	beq.n	8008fd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008fce:	4b2a      	ldr	r3, [pc, #168]	@ (8009078 <vTaskSwitchContext+0xb8>)
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008fd4:	e047      	b.n	8009066 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008fd6:	4b28      	ldr	r3, [pc, #160]	@ (8009078 <vTaskSwitchContext+0xb8>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fdc:	4b27      	ldr	r3, [pc, #156]	@ (800907c <vTaskSwitchContext+0xbc>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	60fb      	str	r3, [r7, #12]
 8008fe2:	e011      	b.n	8009008 <vTaskSwitchContext+0x48>
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d10b      	bne.n	8009002 <vTaskSwitchContext+0x42>
	__asm volatile
 8008fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fee:	f383 8811 	msr	BASEPRI, r3
 8008ff2:	f3bf 8f6f 	isb	sy
 8008ff6:	f3bf 8f4f 	dsb	sy
 8008ffa:	607b      	str	r3, [r7, #4]
}
 8008ffc:	bf00      	nop
 8008ffe:	bf00      	nop
 8009000:	e7fd      	b.n	8008ffe <vTaskSwitchContext+0x3e>
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	3b01      	subs	r3, #1
 8009006:	60fb      	str	r3, [r7, #12]
 8009008:	491d      	ldr	r1, [pc, #116]	@ (8009080 <vTaskSwitchContext+0xc0>)
 800900a:	68fa      	ldr	r2, [r7, #12]
 800900c:	4613      	mov	r3, r2
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	4413      	add	r3, r2
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	440b      	add	r3, r1
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d0e3      	beq.n	8008fe4 <vTaskSwitchContext+0x24>
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	4613      	mov	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	4413      	add	r3, r2
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	4a16      	ldr	r2, [pc, #88]	@ (8009080 <vTaskSwitchContext+0xc0>)
 8009028:	4413      	add	r3, r2
 800902a:	60bb      	str	r3, [r7, #8]
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	685a      	ldr	r2, [r3, #4]
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	605a      	str	r2, [r3, #4]
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	685a      	ldr	r2, [r3, #4]
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	3308      	adds	r3, #8
 800903e:	429a      	cmp	r2, r3
 8009040:	d104      	bne.n	800904c <vTaskSwitchContext+0x8c>
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	685a      	ldr	r2, [r3, #4]
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	605a      	str	r2, [r3, #4]
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	4a0c      	ldr	r2, [pc, #48]	@ (8009084 <vTaskSwitchContext+0xc4>)
 8009054:	6013      	str	r3, [r2, #0]
 8009056:	4a09      	ldr	r2, [pc, #36]	@ (800907c <vTaskSwitchContext+0xbc>)
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800905c:	4b09      	ldr	r3, [pc, #36]	@ (8009084 <vTaskSwitchContext+0xc4>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	3354      	adds	r3, #84	@ 0x54
 8009062:	4a09      	ldr	r2, [pc, #36]	@ (8009088 <vTaskSwitchContext+0xc8>)
 8009064:	6013      	str	r3, [r2, #0]
}
 8009066:	bf00      	nop
 8009068:	3714      	adds	r7, #20
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	240014a0 	.word	0x240014a0
 8009078:	2400148c 	.word	0x2400148c
 800907c:	24001480 	.word	0x24001480
 8009080:	24000fa8 	.word	0x24000fa8
 8009084:	24000fa4 	.word	0x24000fa4
 8009088:	24000014 	.word	0x24000014

0800908c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d10b      	bne.n	80090b4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800909c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a0:	f383 8811 	msr	BASEPRI, r3
 80090a4:	f3bf 8f6f 	isb	sy
 80090a8:	f3bf 8f4f 	dsb	sy
 80090ac:	60fb      	str	r3, [r7, #12]
}
 80090ae:	bf00      	nop
 80090b0:	bf00      	nop
 80090b2:	e7fd      	b.n	80090b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80090b4:	4b07      	ldr	r3, [pc, #28]	@ (80090d4 <vTaskPlaceOnEventList+0x48>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3318      	adds	r3, #24
 80090ba:	4619      	mov	r1, r3
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f7fe fbaa 	bl	8007816 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80090c2:	2101      	movs	r1, #1
 80090c4:	6838      	ldr	r0, [r7, #0]
 80090c6:	f000 fb97 	bl	80097f8 <prvAddCurrentTaskToDelayedList>
}
 80090ca:	bf00      	nop
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	24000fa4 	.word	0x24000fa4

080090d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b086      	sub	sp, #24
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10b      	bne.n	8009102 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80090ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ee:	f383 8811 	msr	BASEPRI, r3
 80090f2:	f3bf 8f6f 	isb	sy
 80090f6:	f3bf 8f4f 	dsb	sy
 80090fa:	617b      	str	r3, [r7, #20]
}
 80090fc:	bf00      	nop
 80090fe:	bf00      	nop
 8009100:	e7fd      	b.n	80090fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009102:	4b0a      	ldr	r3, [pc, #40]	@ (800912c <vTaskPlaceOnEventListRestricted+0x54>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	3318      	adds	r3, #24
 8009108:	4619      	mov	r1, r3
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f7fe fb5f 	bl	80077ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d002      	beq.n	800911c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009116:	f04f 33ff 	mov.w	r3, #4294967295
 800911a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800911c:	6879      	ldr	r1, [r7, #4]
 800911e:	68b8      	ldr	r0, [r7, #8]
 8009120:	f000 fb6a 	bl	80097f8 <prvAddCurrentTaskToDelayedList>
	}
 8009124:	bf00      	nop
 8009126:	3718      	adds	r7, #24
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	24000fa4 	.word	0x24000fa4

08009130 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d10b      	bne.n	800915e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800914a:	f383 8811 	msr	BASEPRI, r3
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	f3bf 8f4f 	dsb	sy
 8009156:	60fb      	str	r3, [r7, #12]
}
 8009158:	bf00      	nop
 800915a:	bf00      	nop
 800915c:	e7fd      	b.n	800915a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	3318      	adds	r3, #24
 8009162:	4618      	mov	r0, r3
 8009164:	f7fe fb90 	bl	8007888 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009168:	4b1d      	ldr	r3, [pc, #116]	@ (80091e0 <xTaskRemoveFromEventList+0xb0>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d11d      	bne.n	80091ac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	3304      	adds	r3, #4
 8009174:	4618      	mov	r0, r3
 8009176:	f7fe fb87 	bl	8007888 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800917e:	4b19      	ldr	r3, [pc, #100]	@ (80091e4 <xTaskRemoveFromEventList+0xb4>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	429a      	cmp	r2, r3
 8009184:	d903      	bls.n	800918e <xTaskRemoveFromEventList+0x5e>
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800918a:	4a16      	ldr	r2, [pc, #88]	@ (80091e4 <xTaskRemoveFromEventList+0xb4>)
 800918c:	6013      	str	r3, [r2, #0]
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009192:	4613      	mov	r3, r2
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	4413      	add	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	4a13      	ldr	r2, [pc, #76]	@ (80091e8 <xTaskRemoveFromEventList+0xb8>)
 800919c:	441a      	add	r2, r3
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	3304      	adds	r3, #4
 80091a2:	4619      	mov	r1, r3
 80091a4:	4610      	mov	r0, r2
 80091a6:	f7fe fb12 	bl	80077ce <vListInsertEnd>
 80091aa:	e005      	b.n	80091b8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	3318      	adds	r3, #24
 80091b0:	4619      	mov	r1, r3
 80091b2:	480e      	ldr	r0, [pc, #56]	@ (80091ec <xTaskRemoveFromEventList+0xbc>)
 80091b4:	f7fe fb0b 	bl	80077ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091bc:	4b0c      	ldr	r3, [pc, #48]	@ (80091f0 <xTaskRemoveFromEventList+0xc0>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d905      	bls.n	80091d2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80091c6:	2301      	movs	r3, #1
 80091c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80091ca:	4b0a      	ldr	r3, [pc, #40]	@ (80091f4 <xTaskRemoveFromEventList+0xc4>)
 80091cc:	2201      	movs	r2, #1
 80091ce:	601a      	str	r2, [r3, #0]
 80091d0:	e001      	b.n	80091d6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80091d2:	2300      	movs	r3, #0
 80091d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80091d6:	697b      	ldr	r3, [r7, #20]
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3718      	adds	r7, #24
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	240014a0 	.word	0x240014a0
 80091e4:	24001480 	.word	0x24001480
 80091e8:	24000fa8 	.word	0x24000fa8
 80091ec:	24001438 	.word	0x24001438
 80091f0:	24000fa4 	.word	0x24000fa4
 80091f4:	2400148c 	.word	0x2400148c

080091f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009200:	4b06      	ldr	r3, [pc, #24]	@ (800921c <vTaskInternalSetTimeOutState+0x24>)
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009208:	4b05      	ldr	r3, [pc, #20]	@ (8009220 <vTaskInternalSetTimeOutState+0x28>)
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	605a      	str	r2, [r3, #4]
}
 8009210:	bf00      	nop
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr
 800921c:	24001490 	.word	0x24001490
 8009220:	2400147c 	.word	0x2400147c

08009224 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b088      	sub	sp, #32
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d10b      	bne.n	800924c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	613b      	str	r3, [r7, #16]
}
 8009246:	bf00      	nop
 8009248:	bf00      	nop
 800924a:	e7fd      	b.n	8009248 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d10b      	bne.n	800926a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009256:	f383 8811 	msr	BASEPRI, r3
 800925a:	f3bf 8f6f 	isb	sy
 800925e:	f3bf 8f4f 	dsb	sy
 8009262:	60fb      	str	r3, [r7, #12]
}
 8009264:	bf00      	nop
 8009266:	bf00      	nop
 8009268:	e7fd      	b.n	8009266 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800926a:	f000 ffa5 	bl	800a1b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800926e:	4b1d      	ldr	r3, [pc, #116]	@ (80092e4 <xTaskCheckForTimeOut+0xc0>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	69ba      	ldr	r2, [r7, #24]
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009286:	d102      	bne.n	800928e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009288:	2300      	movs	r3, #0
 800928a:	61fb      	str	r3, [r7, #28]
 800928c:	e023      	b.n	80092d6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	4b15      	ldr	r3, [pc, #84]	@ (80092e8 <xTaskCheckForTimeOut+0xc4>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	429a      	cmp	r2, r3
 8009298:	d007      	beq.n	80092aa <xTaskCheckForTimeOut+0x86>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	69ba      	ldr	r2, [r7, #24]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d302      	bcc.n	80092aa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80092a4:	2301      	movs	r3, #1
 80092a6:	61fb      	str	r3, [r7, #28]
 80092a8:	e015      	b.n	80092d6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	697a      	ldr	r2, [r7, #20]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d20b      	bcs.n	80092cc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	1ad2      	subs	r2, r2, r3
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f7ff ff99 	bl	80091f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80092c6:	2300      	movs	r3, #0
 80092c8:	61fb      	str	r3, [r7, #28]
 80092ca:	e004      	b.n	80092d6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	2200      	movs	r2, #0
 80092d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80092d2:	2301      	movs	r3, #1
 80092d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80092d6:	f000 ffa1 	bl	800a21c <vPortExitCritical>

	return xReturn;
 80092da:	69fb      	ldr	r3, [r7, #28]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3720      	adds	r7, #32
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	2400147c 	.word	0x2400147c
 80092e8:	24001490 	.word	0x24001490

080092ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80092ec:	b480      	push	{r7}
 80092ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80092f0:	4b03      	ldr	r3, [pc, #12]	@ (8009300 <vTaskMissedYield+0x14>)
 80092f2:	2201      	movs	r2, #1
 80092f4:	601a      	str	r2, [r3, #0]
}
 80092f6:	bf00      	nop
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr
 8009300:	2400148c 	.word	0x2400148c

08009304 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800930c:	f000 f852 	bl	80093b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009310:	4b06      	ldr	r3, [pc, #24]	@ (800932c <prvIdleTask+0x28>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2b01      	cmp	r3, #1
 8009316:	d9f9      	bls.n	800930c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009318:	4b05      	ldr	r3, [pc, #20]	@ (8009330 <prvIdleTask+0x2c>)
 800931a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800931e:	601a      	str	r2, [r3, #0]
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009328:	e7f0      	b.n	800930c <prvIdleTask+0x8>
 800932a:	bf00      	nop
 800932c:	24000fa8 	.word	0x24000fa8
 8009330:	e000ed04 	.word	0xe000ed04

08009334 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800933a:	2300      	movs	r3, #0
 800933c:	607b      	str	r3, [r7, #4]
 800933e:	e00c      	b.n	800935a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	4613      	mov	r3, r2
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	4413      	add	r3, r2
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	4a12      	ldr	r2, [pc, #72]	@ (8009394 <prvInitialiseTaskLists+0x60>)
 800934c:	4413      	add	r3, r2
 800934e:	4618      	mov	r0, r3
 8009350:	f7fe fa10 	bl	8007774 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	3301      	adds	r3, #1
 8009358:	607b      	str	r3, [r7, #4]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2b37      	cmp	r3, #55	@ 0x37
 800935e:	d9ef      	bls.n	8009340 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009360:	480d      	ldr	r0, [pc, #52]	@ (8009398 <prvInitialiseTaskLists+0x64>)
 8009362:	f7fe fa07 	bl	8007774 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009366:	480d      	ldr	r0, [pc, #52]	@ (800939c <prvInitialiseTaskLists+0x68>)
 8009368:	f7fe fa04 	bl	8007774 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800936c:	480c      	ldr	r0, [pc, #48]	@ (80093a0 <prvInitialiseTaskLists+0x6c>)
 800936e:	f7fe fa01 	bl	8007774 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009372:	480c      	ldr	r0, [pc, #48]	@ (80093a4 <prvInitialiseTaskLists+0x70>)
 8009374:	f7fe f9fe 	bl	8007774 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009378:	480b      	ldr	r0, [pc, #44]	@ (80093a8 <prvInitialiseTaskLists+0x74>)
 800937a:	f7fe f9fb 	bl	8007774 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800937e:	4b0b      	ldr	r3, [pc, #44]	@ (80093ac <prvInitialiseTaskLists+0x78>)
 8009380:	4a05      	ldr	r2, [pc, #20]	@ (8009398 <prvInitialiseTaskLists+0x64>)
 8009382:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009384:	4b0a      	ldr	r3, [pc, #40]	@ (80093b0 <prvInitialiseTaskLists+0x7c>)
 8009386:	4a05      	ldr	r2, [pc, #20]	@ (800939c <prvInitialiseTaskLists+0x68>)
 8009388:	601a      	str	r2, [r3, #0]
}
 800938a:	bf00      	nop
 800938c:	3708      	adds	r7, #8
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	24000fa8 	.word	0x24000fa8
 8009398:	24001408 	.word	0x24001408
 800939c:	2400141c 	.word	0x2400141c
 80093a0:	24001438 	.word	0x24001438
 80093a4:	2400144c 	.word	0x2400144c
 80093a8:	24001464 	.word	0x24001464
 80093ac:	24001430 	.word	0x24001430
 80093b0:	24001434 	.word	0x24001434

080093b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093ba:	e019      	b.n	80093f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80093bc:	f000 fefc 	bl	800a1b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093c0:	4b10      	ldr	r3, [pc, #64]	@ (8009404 <prvCheckTasksWaitingTermination+0x50>)
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	3304      	adds	r3, #4
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7fe fa5b 	bl	8007888 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80093d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009408 <prvCheckTasksWaitingTermination+0x54>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	3b01      	subs	r3, #1
 80093d8:	4a0b      	ldr	r2, [pc, #44]	@ (8009408 <prvCheckTasksWaitingTermination+0x54>)
 80093da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80093dc:	4b0b      	ldr	r3, [pc, #44]	@ (800940c <prvCheckTasksWaitingTermination+0x58>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	3b01      	subs	r3, #1
 80093e2:	4a0a      	ldr	r2, [pc, #40]	@ (800940c <prvCheckTasksWaitingTermination+0x58>)
 80093e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80093e6:	f000 ff19 	bl	800a21c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f810 	bl	8009410 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093f0:	4b06      	ldr	r3, [pc, #24]	@ (800940c <prvCheckTasksWaitingTermination+0x58>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1e1      	bne.n	80093bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80093f8:	bf00      	nop
 80093fa:	bf00      	nop
 80093fc:	3708      	adds	r7, #8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	2400144c 	.word	0x2400144c
 8009408:	24001478 	.word	0x24001478
 800940c:	24001460 	.word	0x24001460

08009410 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	3354      	adds	r3, #84	@ 0x54
 800941c:	4618      	mov	r0, r3
 800941e:	f001 f9e3 	bl	800a7e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009428:	2b00      	cmp	r3, #0
 800942a:	d108      	bne.n	800943e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009430:	4618      	mov	r0, r3
 8009432:	f001 f8b1 	bl	800a598 <vPortFree>
				vPortFree( pxTCB );
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f001 f8ae 	bl	800a598 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800943c:	e019      	b.n	8009472 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009444:	2b01      	cmp	r3, #1
 8009446:	d103      	bne.n	8009450 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f001 f8a5 	bl	800a598 <vPortFree>
	}
 800944e:	e010      	b.n	8009472 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009456:	2b02      	cmp	r3, #2
 8009458:	d00b      	beq.n	8009472 <prvDeleteTCB+0x62>
	__asm volatile
 800945a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800945e:	f383 8811 	msr	BASEPRI, r3
 8009462:	f3bf 8f6f 	isb	sy
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	60fb      	str	r3, [r7, #12]
}
 800946c:	bf00      	nop
 800946e:	bf00      	nop
 8009470:	e7fd      	b.n	800946e <prvDeleteTCB+0x5e>
	}
 8009472:	bf00      	nop
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
	...

0800947c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009482:	4b0c      	ldr	r3, [pc, #48]	@ (80094b4 <prvResetNextTaskUnblockTime+0x38>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d104      	bne.n	8009496 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800948c:	4b0a      	ldr	r3, [pc, #40]	@ (80094b8 <prvResetNextTaskUnblockTime+0x3c>)
 800948e:	f04f 32ff 	mov.w	r2, #4294967295
 8009492:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009494:	e008      	b.n	80094a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009496:	4b07      	ldr	r3, [pc, #28]	@ (80094b4 <prvResetNextTaskUnblockTime+0x38>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	4a04      	ldr	r2, [pc, #16]	@ (80094b8 <prvResetNextTaskUnblockTime+0x3c>)
 80094a6:	6013      	str	r3, [r2, #0]
}
 80094a8:	bf00      	nop
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr
 80094b4:	24001430 	.word	0x24001430
 80094b8:	24001498 	.word	0x24001498

080094bc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80094c2:	4b05      	ldr	r3, [pc, #20]	@ (80094d8 <xTaskGetCurrentTaskHandle+0x1c>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80094c8:	687b      	ldr	r3, [r7, #4]
	}
 80094ca:	4618      	mov	r0, r3
 80094cc:	370c      	adds	r7, #12
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr
 80094d6:	bf00      	nop
 80094d8:	24000fa4 	.word	0x24000fa4

080094dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80094e2:	4b0b      	ldr	r3, [pc, #44]	@ (8009510 <xTaskGetSchedulerState+0x34>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d102      	bne.n	80094f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80094ea:	2301      	movs	r3, #1
 80094ec:	607b      	str	r3, [r7, #4]
 80094ee:	e008      	b.n	8009502 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094f0:	4b08      	ldr	r3, [pc, #32]	@ (8009514 <xTaskGetSchedulerState+0x38>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d102      	bne.n	80094fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80094f8:	2302      	movs	r3, #2
 80094fa:	607b      	str	r3, [r7, #4]
 80094fc:	e001      	b.n	8009502 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80094fe:	2300      	movs	r3, #0
 8009500:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009502:	687b      	ldr	r3, [r7, #4]
	}
 8009504:	4618      	mov	r0, r3
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr
 8009510:	24001484 	.word	0x24001484
 8009514:	240014a0 	.word	0x240014a0

08009518 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009524:	2300      	movs	r3, #0
 8009526:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d051      	beq.n	80095d2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009532:	4b2a      	ldr	r3, [pc, #168]	@ (80095dc <xTaskPriorityInherit+0xc4>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009538:	429a      	cmp	r2, r3
 800953a:	d241      	bcs.n	80095c0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	699b      	ldr	r3, [r3, #24]
 8009540:	2b00      	cmp	r3, #0
 8009542:	db06      	blt.n	8009552 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009544:	4b25      	ldr	r3, [pc, #148]	@ (80095dc <xTaskPriorityInherit+0xc4>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800954a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	6959      	ldr	r1, [r3, #20]
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800955a:	4613      	mov	r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	4413      	add	r3, r2
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	4a1f      	ldr	r2, [pc, #124]	@ (80095e0 <xTaskPriorityInherit+0xc8>)
 8009564:	4413      	add	r3, r2
 8009566:	4299      	cmp	r1, r3
 8009568:	d122      	bne.n	80095b0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	3304      	adds	r3, #4
 800956e:	4618      	mov	r0, r3
 8009570:	f7fe f98a 	bl	8007888 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009574:	4b19      	ldr	r3, [pc, #100]	@ (80095dc <xTaskPriorityInherit+0xc4>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009582:	4b18      	ldr	r3, [pc, #96]	@ (80095e4 <xTaskPriorityInherit+0xcc>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	429a      	cmp	r2, r3
 8009588:	d903      	bls.n	8009592 <xTaskPriorityInherit+0x7a>
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800958e:	4a15      	ldr	r2, [pc, #84]	@ (80095e4 <xTaskPriorityInherit+0xcc>)
 8009590:	6013      	str	r3, [r2, #0]
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009596:	4613      	mov	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	4413      	add	r3, r2
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	4a10      	ldr	r2, [pc, #64]	@ (80095e0 <xTaskPriorityInherit+0xc8>)
 80095a0:	441a      	add	r2, r3
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	3304      	adds	r3, #4
 80095a6:	4619      	mov	r1, r3
 80095a8:	4610      	mov	r0, r2
 80095aa:	f7fe f910 	bl	80077ce <vListInsertEnd>
 80095ae:	e004      	b.n	80095ba <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80095b0:	4b0a      	ldr	r3, [pc, #40]	@ (80095dc <xTaskPriorityInherit+0xc4>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80095ba:	2301      	movs	r3, #1
 80095bc:	60fb      	str	r3, [r7, #12]
 80095be:	e008      	b.n	80095d2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80095c4:	4b05      	ldr	r3, [pc, #20]	@ (80095dc <xTaskPriorityInherit+0xc4>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d201      	bcs.n	80095d2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80095ce:	2301      	movs	r3, #1
 80095d0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80095d2:	68fb      	ldr	r3, [r7, #12]
	}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3710      	adds	r7, #16
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	24000fa4 	.word	0x24000fa4
 80095e0:	24000fa8 	.word	0x24000fa8
 80095e4:	24001480 	.word	0x24001480

080095e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b086      	sub	sp, #24
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80095f4:	2300      	movs	r3, #0
 80095f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d058      	beq.n	80096b0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80095fe:	4b2f      	ldr	r3, [pc, #188]	@ (80096bc <xTaskPriorityDisinherit+0xd4>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	693a      	ldr	r2, [r7, #16]
 8009604:	429a      	cmp	r2, r3
 8009606:	d00b      	beq.n	8009620 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800960c:	f383 8811 	msr	BASEPRI, r3
 8009610:	f3bf 8f6f 	isb	sy
 8009614:	f3bf 8f4f 	dsb	sy
 8009618:	60fb      	str	r3, [r7, #12]
}
 800961a:	bf00      	nop
 800961c:	bf00      	nop
 800961e:	e7fd      	b.n	800961c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009624:	2b00      	cmp	r3, #0
 8009626:	d10b      	bne.n	8009640 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800962c:	f383 8811 	msr	BASEPRI, r3
 8009630:	f3bf 8f6f 	isb	sy
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	60bb      	str	r3, [r7, #8]
}
 800963a:	bf00      	nop
 800963c:	bf00      	nop
 800963e:	e7fd      	b.n	800963c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009644:	1e5a      	subs	r2, r3, #1
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009652:	429a      	cmp	r2, r3
 8009654:	d02c      	beq.n	80096b0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800965a:	2b00      	cmp	r3, #0
 800965c:	d128      	bne.n	80096b0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	3304      	adds	r3, #4
 8009662:	4618      	mov	r0, r3
 8009664:	f7fe f910 	bl	8007888 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009674:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009680:	4b0f      	ldr	r3, [pc, #60]	@ (80096c0 <xTaskPriorityDisinherit+0xd8>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	429a      	cmp	r2, r3
 8009686:	d903      	bls.n	8009690 <xTaskPriorityDisinherit+0xa8>
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800968c:	4a0c      	ldr	r2, [pc, #48]	@ (80096c0 <xTaskPriorityDisinherit+0xd8>)
 800968e:	6013      	str	r3, [r2, #0]
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009694:	4613      	mov	r3, r2
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	4413      	add	r3, r2
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	4a09      	ldr	r2, [pc, #36]	@ (80096c4 <xTaskPriorityDisinherit+0xdc>)
 800969e:	441a      	add	r2, r3
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	3304      	adds	r3, #4
 80096a4:	4619      	mov	r1, r3
 80096a6:	4610      	mov	r0, r2
 80096a8:	f7fe f891 	bl	80077ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80096ac:	2301      	movs	r3, #1
 80096ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80096b0:	697b      	ldr	r3, [r7, #20]
	}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3718      	adds	r7, #24
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	24000fa4 	.word	0x24000fa4
 80096c0:	24001480 	.word	0x24001480
 80096c4:	24000fa8 	.word	0x24000fa8

080096c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b088      	sub	sp, #32
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80096d6:	2301      	movs	r3, #1
 80096d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d06c      	beq.n	80097ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d10b      	bne.n	8009700 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80096e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ec:	f383 8811 	msr	BASEPRI, r3
 80096f0:	f3bf 8f6f 	isb	sy
 80096f4:	f3bf 8f4f 	dsb	sy
 80096f8:	60fb      	str	r3, [r7, #12]
}
 80096fa:	bf00      	nop
 80096fc:	bf00      	nop
 80096fe:	e7fd      	b.n	80096fc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009704:	683a      	ldr	r2, [r7, #0]
 8009706:	429a      	cmp	r2, r3
 8009708:	d902      	bls.n	8009710 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	61fb      	str	r3, [r7, #28]
 800970e:	e002      	b.n	8009716 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009710:	69bb      	ldr	r3, [r7, #24]
 8009712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009714:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800971a:	69fa      	ldr	r2, [r7, #28]
 800971c:	429a      	cmp	r2, r3
 800971e:	d04c      	beq.n	80097ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009724:	697a      	ldr	r2, [r7, #20]
 8009726:	429a      	cmp	r2, r3
 8009728:	d147      	bne.n	80097ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800972a:	4b26      	ldr	r3, [pc, #152]	@ (80097c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	69ba      	ldr	r2, [r7, #24]
 8009730:	429a      	cmp	r2, r3
 8009732:	d10b      	bne.n	800974c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009738:	f383 8811 	msr	BASEPRI, r3
 800973c:	f3bf 8f6f 	isb	sy
 8009740:	f3bf 8f4f 	dsb	sy
 8009744:	60bb      	str	r3, [r7, #8]
}
 8009746:	bf00      	nop
 8009748:	bf00      	nop
 800974a:	e7fd      	b.n	8009748 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009750:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	69fa      	ldr	r2, [r7, #28]
 8009756:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009758:	69bb      	ldr	r3, [r7, #24]
 800975a:	699b      	ldr	r3, [r3, #24]
 800975c:	2b00      	cmp	r3, #0
 800975e:	db04      	blt.n	800976a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	6959      	ldr	r1, [r3, #20]
 800976e:	693a      	ldr	r2, [r7, #16]
 8009770:	4613      	mov	r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	4413      	add	r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	4a13      	ldr	r2, [pc, #76]	@ (80097c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800977a:	4413      	add	r3, r2
 800977c:	4299      	cmp	r1, r3
 800977e:	d11c      	bne.n	80097ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	3304      	adds	r3, #4
 8009784:	4618      	mov	r0, r3
 8009786:	f7fe f87f 	bl	8007888 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800978e:	4b0f      	ldr	r3, [pc, #60]	@ (80097cc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	429a      	cmp	r2, r3
 8009794:	d903      	bls.n	800979e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800979a:	4a0c      	ldr	r2, [pc, #48]	@ (80097cc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800979c:	6013      	str	r3, [r2, #0]
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097a2:	4613      	mov	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	4413      	add	r3, r2
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	4a07      	ldr	r2, [pc, #28]	@ (80097c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80097ac:	441a      	add	r2, r3
 80097ae:	69bb      	ldr	r3, [r7, #24]
 80097b0:	3304      	adds	r3, #4
 80097b2:	4619      	mov	r1, r3
 80097b4:	4610      	mov	r0, r2
 80097b6:	f7fe f80a 	bl	80077ce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80097ba:	bf00      	nop
 80097bc:	3720      	adds	r7, #32
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	24000fa4 	.word	0x24000fa4
 80097c8:	24000fa8 	.word	0x24000fa8
 80097cc:	24001480 	.word	0x24001480

080097d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80097d0:	b480      	push	{r7}
 80097d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80097d4:	4b07      	ldr	r3, [pc, #28]	@ (80097f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d004      	beq.n	80097e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80097dc:	4b05      	ldr	r3, [pc, #20]	@ (80097f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80097e2:	3201      	adds	r2, #1
 80097e4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80097e6:	4b03      	ldr	r3, [pc, #12]	@ (80097f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80097e8:	681b      	ldr	r3, [r3, #0]
	}
 80097ea:	4618      	mov	r0, r3
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr
 80097f4:	24000fa4 	.word	0x24000fa4

080097f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009802:	4b21      	ldr	r3, [pc, #132]	@ (8009888 <prvAddCurrentTaskToDelayedList+0x90>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009808:	4b20      	ldr	r3, [pc, #128]	@ (800988c <prvAddCurrentTaskToDelayedList+0x94>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	3304      	adds	r3, #4
 800980e:	4618      	mov	r0, r3
 8009810:	f7fe f83a 	bl	8007888 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800981a:	d10a      	bne.n	8009832 <prvAddCurrentTaskToDelayedList+0x3a>
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d007      	beq.n	8009832 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009822:	4b1a      	ldr	r3, [pc, #104]	@ (800988c <prvAddCurrentTaskToDelayedList+0x94>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	3304      	adds	r3, #4
 8009828:	4619      	mov	r1, r3
 800982a:	4819      	ldr	r0, [pc, #100]	@ (8009890 <prvAddCurrentTaskToDelayedList+0x98>)
 800982c:	f7fd ffcf 	bl	80077ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009830:	e026      	b.n	8009880 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	4413      	add	r3, r2
 8009838:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800983a:	4b14      	ldr	r3, [pc, #80]	@ (800988c <prvAddCurrentTaskToDelayedList+0x94>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	68ba      	ldr	r2, [r7, #8]
 8009840:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009842:	68ba      	ldr	r2, [r7, #8]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	429a      	cmp	r2, r3
 8009848:	d209      	bcs.n	800985e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800984a:	4b12      	ldr	r3, [pc, #72]	@ (8009894 <prvAddCurrentTaskToDelayedList+0x9c>)
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	4b0f      	ldr	r3, [pc, #60]	@ (800988c <prvAddCurrentTaskToDelayedList+0x94>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	3304      	adds	r3, #4
 8009854:	4619      	mov	r1, r3
 8009856:	4610      	mov	r0, r2
 8009858:	f7fd ffdd 	bl	8007816 <vListInsert>
}
 800985c:	e010      	b.n	8009880 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800985e:	4b0e      	ldr	r3, [pc, #56]	@ (8009898 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	4b0a      	ldr	r3, [pc, #40]	@ (800988c <prvAddCurrentTaskToDelayedList+0x94>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	3304      	adds	r3, #4
 8009868:	4619      	mov	r1, r3
 800986a:	4610      	mov	r0, r2
 800986c:	f7fd ffd3 	bl	8007816 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009870:	4b0a      	ldr	r3, [pc, #40]	@ (800989c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68ba      	ldr	r2, [r7, #8]
 8009876:	429a      	cmp	r2, r3
 8009878:	d202      	bcs.n	8009880 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800987a:	4a08      	ldr	r2, [pc, #32]	@ (800989c <prvAddCurrentTaskToDelayedList+0xa4>)
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	6013      	str	r3, [r2, #0]
}
 8009880:	bf00      	nop
 8009882:	3710      	adds	r7, #16
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	2400147c 	.word	0x2400147c
 800988c:	24000fa4 	.word	0x24000fa4
 8009890:	24001464 	.word	0x24001464
 8009894:	24001434 	.word	0x24001434
 8009898:	24001430 	.word	0x24001430
 800989c:	24001498 	.word	0x24001498

080098a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b08a      	sub	sp, #40	@ 0x28
 80098a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80098a6:	2300      	movs	r3, #0
 80098a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80098aa:	f000 fb13 	bl	8009ed4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80098ae:	4b1d      	ldr	r3, [pc, #116]	@ (8009924 <xTimerCreateTimerTask+0x84>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d021      	beq.n	80098fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80098b6:	2300      	movs	r3, #0
 80098b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80098ba:	2300      	movs	r3, #0
 80098bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80098be:	1d3a      	adds	r2, r7, #4
 80098c0:	f107 0108 	add.w	r1, r7, #8
 80098c4:	f107 030c 	add.w	r3, r7, #12
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7fd ff39 	bl	8007740 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80098ce:	6879      	ldr	r1, [r7, #4]
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	68fa      	ldr	r2, [r7, #12]
 80098d4:	9202      	str	r2, [sp, #8]
 80098d6:	9301      	str	r3, [sp, #4]
 80098d8:	2302      	movs	r3, #2
 80098da:	9300      	str	r3, [sp, #0]
 80098dc:	2300      	movs	r3, #0
 80098de:	460a      	mov	r2, r1
 80098e0:	4911      	ldr	r1, [pc, #68]	@ (8009928 <xTimerCreateTimerTask+0x88>)
 80098e2:	4812      	ldr	r0, [pc, #72]	@ (800992c <xTimerCreateTimerTask+0x8c>)
 80098e4:	f7fe ff92 	bl	800880c <xTaskCreateStatic>
 80098e8:	4603      	mov	r3, r0
 80098ea:	4a11      	ldr	r2, [pc, #68]	@ (8009930 <xTimerCreateTimerTask+0x90>)
 80098ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80098ee:	4b10      	ldr	r3, [pc, #64]	@ (8009930 <xTimerCreateTimerTask+0x90>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d001      	beq.n	80098fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80098f6:	2301      	movs	r3, #1
 80098f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d10b      	bne.n	8009918 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009904:	f383 8811 	msr	BASEPRI, r3
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	613b      	str	r3, [r7, #16]
}
 8009912:	bf00      	nop
 8009914:	bf00      	nop
 8009916:	e7fd      	b.n	8009914 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009918:	697b      	ldr	r3, [r7, #20]
}
 800991a:	4618      	mov	r0, r3
 800991c:	3718      	adds	r7, #24
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	240014d4 	.word	0x240014d4
 8009928:	0800aa44 	.word	0x0800aa44
 800992c:	08009a6d 	.word	0x08009a6d
 8009930:	240014d8 	.word	0x240014d8

08009934 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b08a      	sub	sp, #40	@ 0x28
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
 8009940:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009942:	2300      	movs	r3, #0
 8009944:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d10b      	bne.n	8009964 <xTimerGenericCommand+0x30>
	__asm volatile
 800994c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009950:	f383 8811 	msr	BASEPRI, r3
 8009954:	f3bf 8f6f 	isb	sy
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	623b      	str	r3, [r7, #32]
}
 800995e:	bf00      	nop
 8009960:	bf00      	nop
 8009962:	e7fd      	b.n	8009960 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009964:	4b19      	ldr	r3, [pc, #100]	@ (80099cc <xTimerGenericCommand+0x98>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d02a      	beq.n	80099c2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	2b05      	cmp	r3, #5
 800997c:	dc18      	bgt.n	80099b0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800997e:	f7ff fdad 	bl	80094dc <xTaskGetSchedulerState>
 8009982:	4603      	mov	r3, r0
 8009984:	2b02      	cmp	r3, #2
 8009986:	d109      	bne.n	800999c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009988:	4b10      	ldr	r3, [pc, #64]	@ (80099cc <xTimerGenericCommand+0x98>)
 800998a:	6818      	ldr	r0, [r3, #0]
 800998c:	f107 0110 	add.w	r1, r7, #16
 8009990:	2300      	movs	r3, #0
 8009992:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009994:	f7fe f9a0 	bl	8007cd8 <xQueueGenericSend>
 8009998:	6278      	str	r0, [r7, #36]	@ 0x24
 800999a:	e012      	b.n	80099c2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800999c:	4b0b      	ldr	r3, [pc, #44]	@ (80099cc <xTimerGenericCommand+0x98>)
 800999e:	6818      	ldr	r0, [r3, #0]
 80099a0:	f107 0110 	add.w	r1, r7, #16
 80099a4:	2300      	movs	r3, #0
 80099a6:	2200      	movs	r2, #0
 80099a8:	f7fe f996 	bl	8007cd8 <xQueueGenericSend>
 80099ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80099ae:	e008      	b.n	80099c2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80099b0:	4b06      	ldr	r3, [pc, #24]	@ (80099cc <xTimerGenericCommand+0x98>)
 80099b2:	6818      	ldr	r0, [r3, #0]
 80099b4:	f107 0110 	add.w	r1, r7, #16
 80099b8:	2300      	movs	r3, #0
 80099ba:	683a      	ldr	r2, [r7, #0]
 80099bc:	f7fe fa8e 	bl	8007edc <xQueueGenericSendFromISR>
 80099c0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80099c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3728      	adds	r7, #40	@ 0x28
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	240014d4 	.word	0x240014d4

080099d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b088      	sub	sp, #32
 80099d4:	af02      	add	r7, sp, #8
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099da:	4b23      	ldr	r3, [pc, #140]	@ (8009a68 <prvProcessExpiredTimer+0x98>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	3304      	adds	r3, #4
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7fd ff4d 	bl	8007888 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099f4:	f003 0304 	and.w	r3, r3, #4
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d023      	beq.n	8009a44 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	699a      	ldr	r2, [r3, #24]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	18d1      	adds	r1, r2, r3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	683a      	ldr	r2, [r7, #0]
 8009a08:	6978      	ldr	r0, [r7, #20]
 8009a0a:	f000 f8d5 	bl	8009bb8 <prvInsertTimerInActiveList>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d020      	beq.n	8009a56 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a14:	2300      	movs	r3, #0
 8009a16:	9300      	str	r3, [sp, #0]
 8009a18:	2300      	movs	r3, #0
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	6978      	ldr	r0, [r7, #20]
 8009a20:	f7ff ff88 	bl	8009934 <xTimerGenericCommand>
 8009a24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d114      	bne.n	8009a56 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a30:	f383 8811 	msr	BASEPRI, r3
 8009a34:	f3bf 8f6f 	isb	sy
 8009a38:	f3bf 8f4f 	dsb	sy
 8009a3c:	60fb      	str	r3, [r7, #12]
}
 8009a3e:	bf00      	nop
 8009a40:	bf00      	nop
 8009a42:	e7fd      	b.n	8009a40 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a4a:	f023 0301 	bic.w	r3, r3, #1
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	6a1b      	ldr	r3, [r3, #32]
 8009a5a:	6978      	ldr	r0, [r7, #20]
 8009a5c:	4798      	blx	r3
}
 8009a5e:	bf00      	nop
 8009a60:	3718      	adds	r7, #24
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	240014cc 	.word	0x240014cc

08009a6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a74:	f107 0308 	add.w	r3, r7, #8
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f000 f859 	bl	8009b30 <prvGetNextExpireTime>
 8009a7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	4619      	mov	r1, r3
 8009a84:	68f8      	ldr	r0, [r7, #12]
 8009a86:	f000 f805 	bl	8009a94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a8a:	f000 f8d7 	bl	8009c3c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a8e:	bf00      	nop
 8009a90:	e7f0      	b.n	8009a74 <prvTimerTask+0x8>
	...

08009a94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009a9e:	f7ff f919 	bl	8008cd4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009aa2:	f107 0308 	add.w	r3, r7, #8
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f000 f866 	bl	8009b78 <prvSampleTimeNow>
 8009aac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d130      	bne.n	8009b16 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d10a      	bne.n	8009ad0 <prvProcessTimerOrBlockTask+0x3c>
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d806      	bhi.n	8009ad0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009ac2:	f7ff f915 	bl	8008cf0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009ac6:	68f9      	ldr	r1, [r7, #12]
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f7ff ff81 	bl	80099d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009ace:	e024      	b.n	8009b1a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d008      	beq.n	8009ae8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009ad6:	4b13      	ldr	r3, [pc, #76]	@ (8009b24 <prvProcessTimerOrBlockTask+0x90>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d101      	bne.n	8009ae4 <prvProcessTimerOrBlockTask+0x50>
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e000      	b.n	8009ae6 <prvProcessTimerOrBlockTask+0x52>
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8009b28 <prvProcessTimerOrBlockTask+0x94>)
 8009aea:	6818      	ldr	r0, [r3, #0]
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	1ad3      	subs	r3, r2, r3
 8009af2:	683a      	ldr	r2, [r7, #0]
 8009af4:	4619      	mov	r1, r3
 8009af6:	f7fe fe55 	bl	80087a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009afa:	f7ff f8f9 	bl	8008cf0 <xTaskResumeAll>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d10a      	bne.n	8009b1a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009b04:	4b09      	ldr	r3, [pc, #36]	@ (8009b2c <prvProcessTimerOrBlockTask+0x98>)
 8009b06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b0a:	601a      	str	r2, [r3, #0]
 8009b0c:	f3bf 8f4f 	dsb	sy
 8009b10:	f3bf 8f6f 	isb	sy
}
 8009b14:	e001      	b.n	8009b1a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009b16:	f7ff f8eb 	bl	8008cf0 <xTaskResumeAll>
}
 8009b1a:	bf00      	nop
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	240014d0 	.word	0x240014d0
 8009b28:	240014d4 	.word	0x240014d4
 8009b2c:	e000ed04 	.word	0xe000ed04

08009b30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009b38:	4b0e      	ldr	r3, [pc, #56]	@ (8009b74 <prvGetNextExpireTime+0x44>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d101      	bne.n	8009b46 <prvGetNextExpireTime+0x16>
 8009b42:	2201      	movs	r2, #1
 8009b44:	e000      	b.n	8009b48 <prvGetNextExpireTime+0x18>
 8009b46:	2200      	movs	r2, #0
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d105      	bne.n	8009b60 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b54:	4b07      	ldr	r3, [pc, #28]	@ (8009b74 <prvGetNextExpireTime+0x44>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	68db      	ldr	r3, [r3, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	60fb      	str	r3, [r7, #12]
 8009b5e:	e001      	b.n	8009b64 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009b60:	2300      	movs	r3, #0
 8009b62:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009b64:	68fb      	ldr	r3, [r7, #12]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3714      	adds	r7, #20
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	240014cc 	.word	0x240014cc

08009b78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009b80:	f7ff f954 	bl	8008e2c <xTaskGetTickCount>
 8009b84:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009b86:	4b0b      	ldr	r3, [pc, #44]	@ (8009bb4 <prvSampleTimeNow+0x3c>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d205      	bcs.n	8009b9c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b90:	f000 f93a 	bl	8009e08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	601a      	str	r2, [r3, #0]
 8009b9a:	e002      	b.n	8009ba2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009ba2:	4a04      	ldr	r2, [pc, #16]	@ (8009bb4 <prvSampleTimeNow+0x3c>)
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3710      	adds	r7, #16
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	240014dc 	.word	0x240014dc

08009bb8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b086      	sub	sp, #24
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	607a      	str	r2, [r7, #4]
 8009bc4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	68ba      	ldr	r2, [r7, #8]
 8009bce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	68fa      	ldr	r2, [r7, #12]
 8009bd4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009bd6:	68ba      	ldr	r2, [r7, #8]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d812      	bhi.n	8009c04 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	1ad2      	subs	r2, r2, r3
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	699b      	ldr	r3, [r3, #24]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d302      	bcc.n	8009bf2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009bec:	2301      	movs	r3, #1
 8009bee:	617b      	str	r3, [r7, #20]
 8009bf0:	e01b      	b.n	8009c2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009bf2:	4b10      	ldr	r3, [pc, #64]	@ (8009c34 <prvInsertTimerInActiveList+0x7c>)
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	3304      	adds	r3, #4
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	4610      	mov	r0, r2
 8009bfe:	f7fd fe0a 	bl	8007816 <vListInsert>
 8009c02:	e012      	b.n	8009c2a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d206      	bcs.n	8009c1a <prvInsertTimerInActiveList+0x62>
 8009c0c:	68ba      	ldr	r2, [r7, #8]
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d302      	bcc.n	8009c1a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009c14:	2301      	movs	r3, #1
 8009c16:	617b      	str	r3, [r7, #20]
 8009c18:	e007      	b.n	8009c2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c1a:	4b07      	ldr	r3, [pc, #28]	@ (8009c38 <prvInsertTimerInActiveList+0x80>)
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	3304      	adds	r3, #4
 8009c22:	4619      	mov	r1, r3
 8009c24:	4610      	mov	r0, r2
 8009c26:	f7fd fdf6 	bl	8007816 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009c2a:	697b      	ldr	r3, [r7, #20]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3718      	adds	r7, #24
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	240014d0 	.word	0x240014d0
 8009c38:	240014cc 	.word	0x240014cc

08009c3c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b08e      	sub	sp, #56	@ 0x38
 8009c40:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c42:	e0ce      	b.n	8009de2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	da19      	bge.n	8009c7e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009c4a:	1d3b      	adds	r3, r7, #4
 8009c4c:	3304      	adds	r3, #4
 8009c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d10b      	bne.n	8009c6e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c5a:	f383 8811 	msr	BASEPRI, r3
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	f3bf 8f4f 	dsb	sy
 8009c66:	61fb      	str	r3, [r7, #28]
}
 8009c68:	bf00      	nop
 8009c6a:	bf00      	nop
 8009c6c:	e7fd      	b.n	8009c6a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c74:	6850      	ldr	r0, [r2, #4]
 8009c76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c78:	6892      	ldr	r2, [r2, #8]
 8009c7a:	4611      	mov	r1, r2
 8009c7c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f2c0 80ae 	blt.w	8009de2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c8c:	695b      	ldr	r3, [r3, #20]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d004      	beq.n	8009c9c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c94:	3304      	adds	r3, #4
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7fd fdf6 	bl	8007888 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c9c:	463b      	mov	r3, r7
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7ff ff6a 	bl	8009b78 <prvSampleTimeNow>
 8009ca4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2b09      	cmp	r3, #9
 8009caa:	f200 8097 	bhi.w	8009ddc <prvProcessReceivedCommands+0x1a0>
 8009cae:	a201      	add	r2, pc, #4	@ (adr r2, 8009cb4 <prvProcessReceivedCommands+0x78>)
 8009cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb4:	08009cdd 	.word	0x08009cdd
 8009cb8:	08009cdd 	.word	0x08009cdd
 8009cbc:	08009cdd 	.word	0x08009cdd
 8009cc0:	08009d53 	.word	0x08009d53
 8009cc4:	08009d67 	.word	0x08009d67
 8009cc8:	08009db3 	.word	0x08009db3
 8009ccc:	08009cdd 	.word	0x08009cdd
 8009cd0:	08009cdd 	.word	0x08009cdd
 8009cd4:	08009d53 	.word	0x08009d53
 8009cd8:	08009d67 	.word	0x08009d67
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ce2:	f043 0301 	orr.w	r3, r3, #1
 8009ce6:	b2da      	uxtb	r2, r3
 8009ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009cee:	68ba      	ldr	r2, [r7, #8]
 8009cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf2:	699b      	ldr	r3, [r3, #24]
 8009cf4:	18d1      	adds	r1, r2, r3
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009cfc:	f7ff ff5c 	bl	8009bb8 <prvInsertTimerInActiveList>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d06c      	beq.n	8009de0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d08:	6a1b      	ldr	r3, [r3, #32]
 8009d0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d0c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d14:	f003 0304 	and.w	r3, r3, #4
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d061      	beq.n	8009de0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d20:	699b      	ldr	r3, [r3, #24]
 8009d22:	441a      	add	r2, r3
 8009d24:	2300      	movs	r3, #0
 8009d26:	9300      	str	r3, [sp, #0]
 8009d28:	2300      	movs	r3, #0
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d2e:	f7ff fe01 	bl	8009934 <xTimerGenericCommand>
 8009d32:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009d34:	6a3b      	ldr	r3, [r7, #32]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d152      	bne.n	8009de0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d3e:	f383 8811 	msr	BASEPRI, r3
 8009d42:	f3bf 8f6f 	isb	sy
 8009d46:	f3bf 8f4f 	dsb	sy
 8009d4a:	61bb      	str	r3, [r7, #24]
}
 8009d4c:	bf00      	nop
 8009d4e:	bf00      	nop
 8009d50:	e7fd      	b.n	8009d4e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d58:	f023 0301 	bic.w	r3, r3, #1
 8009d5c:	b2da      	uxtb	r2, r3
 8009d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d60:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009d64:	e03d      	b.n	8009de2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d6c:	f043 0301 	orr.w	r3, r3, #1
 8009d70:	b2da      	uxtb	r2, r3
 8009d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009d78:	68ba      	ldr	r2, [r7, #8]
 8009d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d7c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d80:	699b      	ldr	r3, [r3, #24]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d10b      	bne.n	8009d9e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d8a:	f383 8811 	msr	BASEPRI, r3
 8009d8e:	f3bf 8f6f 	isb	sy
 8009d92:	f3bf 8f4f 	dsb	sy
 8009d96:	617b      	str	r3, [r7, #20]
}
 8009d98:	bf00      	nop
 8009d9a:	bf00      	nop
 8009d9c:	e7fd      	b.n	8009d9a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009da0:	699a      	ldr	r2, [r3, #24]
 8009da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da4:	18d1      	adds	r1, r2, r3
 8009da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009daa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009dac:	f7ff ff04 	bl	8009bb8 <prvInsertTimerInActiveList>
					break;
 8009db0:	e017      	b.n	8009de2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009db8:	f003 0302 	and.w	r3, r3, #2
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d103      	bne.n	8009dc8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009dc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009dc2:	f000 fbe9 	bl	800a598 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009dc6:	e00c      	b.n	8009de2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009dce:	f023 0301 	bic.w	r3, r3, #1
 8009dd2:	b2da      	uxtb	r2, r3
 8009dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009dda:	e002      	b.n	8009de2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009ddc:	bf00      	nop
 8009dde:	e000      	b.n	8009de2 <prvProcessReceivedCommands+0x1a6>
					break;
 8009de0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009de2:	4b08      	ldr	r3, [pc, #32]	@ (8009e04 <prvProcessReceivedCommands+0x1c8>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	1d39      	adds	r1, r7, #4
 8009de8:	2200      	movs	r2, #0
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fe f914 	bl	8008018 <xQueueReceive>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f47f af26 	bne.w	8009c44 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009df8:	bf00      	nop
 8009dfa:	bf00      	nop
 8009dfc:	3730      	adds	r7, #48	@ 0x30
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop
 8009e04:	240014d4 	.word	0x240014d4

08009e08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b088      	sub	sp, #32
 8009e0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e0e:	e049      	b.n	8009ea4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e10:	4b2e      	ldr	r3, [pc, #184]	@ (8009ecc <prvSwitchTimerLists+0xc4>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e1a:	4b2c      	ldr	r3, [pc, #176]	@ (8009ecc <prvSwitchTimerLists+0xc4>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	3304      	adds	r3, #4
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f7fd fd2d 	bl	8007888 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6a1b      	ldr	r3, [r3, #32]
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e3c:	f003 0304 	and.w	r3, r3, #4
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d02f      	beq.n	8009ea4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	699b      	ldr	r3, [r3, #24]
 8009e48:	693a      	ldr	r2, [r7, #16]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009e4e:	68ba      	ldr	r2, [r7, #8]
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d90e      	bls.n	8009e74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e62:	4b1a      	ldr	r3, [pc, #104]	@ (8009ecc <prvSwitchTimerLists+0xc4>)
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	3304      	adds	r3, #4
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	4610      	mov	r0, r2
 8009e6e:	f7fd fcd2 	bl	8007816 <vListInsert>
 8009e72:	e017      	b.n	8009ea4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e74:	2300      	movs	r3, #0
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	2300      	movs	r3, #0
 8009e7a:	693a      	ldr	r2, [r7, #16]
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	68f8      	ldr	r0, [r7, #12]
 8009e80:	f7ff fd58 	bl	8009934 <xTimerGenericCommand>
 8009e84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d10b      	bne.n	8009ea4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e90:	f383 8811 	msr	BASEPRI, r3
 8009e94:	f3bf 8f6f 	isb	sy
 8009e98:	f3bf 8f4f 	dsb	sy
 8009e9c:	603b      	str	r3, [r7, #0]
}
 8009e9e:	bf00      	nop
 8009ea0:	bf00      	nop
 8009ea2:	e7fd      	b.n	8009ea0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ea4:	4b09      	ldr	r3, [pc, #36]	@ (8009ecc <prvSwitchTimerLists+0xc4>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d1b0      	bne.n	8009e10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009eae:	4b07      	ldr	r3, [pc, #28]	@ (8009ecc <prvSwitchTimerLists+0xc4>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009eb4:	4b06      	ldr	r3, [pc, #24]	@ (8009ed0 <prvSwitchTimerLists+0xc8>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a04      	ldr	r2, [pc, #16]	@ (8009ecc <prvSwitchTimerLists+0xc4>)
 8009eba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009ebc:	4a04      	ldr	r2, [pc, #16]	@ (8009ed0 <prvSwitchTimerLists+0xc8>)
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	6013      	str	r3, [r2, #0]
}
 8009ec2:	bf00      	nop
 8009ec4:	3718      	adds	r7, #24
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	240014cc 	.word	0x240014cc
 8009ed0:	240014d0 	.word	0x240014d0

08009ed4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009eda:	f000 f96d 	bl	800a1b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009ede:	4b15      	ldr	r3, [pc, #84]	@ (8009f34 <prvCheckForValidListAndQueue+0x60>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d120      	bne.n	8009f28 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009ee6:	4814      	ldr	r0, [pc, #80]	@ (8009f38 <prvCheckForValidListAndQueue+0x64>)
 8009ee8:	f7fd fc44 	bl	8007774 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009eec:	4813      	ldr	r0, [pc, #76]	@ (8009f3c <prvCheckForValidListAndQueue+0x68>)
 8009eee:	f7fd fc41 	bl	8007774 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009ef2:	4b13      	ldr	r3, [pc, #76]	@ (8009f40 <prvCheckForValidListAndQueue+0x6c>)
 8009ef4:	4a10      	ldr	r2, [pc, #64]	@ (8009f38 <prvCheckForValidListAndQueue+0x64>)
 8009ef6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009ef8:	4b12      	ldr	r3, [pc, #72]	@ (8009f44 <prvCheckForValidListAndQueue+0x70>)
 8009efa:	4a10      	ldr	r2, [pc, #64]	@ (8009f3c <prvCheckForValidListAndQueue+0x68>)
 8009efc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009efe:	2300      	movs	r3, #0
 8009f00:	9300      	str	r3, [sp, #0]
 8009f02:	4b11      	ldr	r3, [pc, #68]	@ (8009f48 <prvCheckForValidListAndQueue+0x74>)
 8009f04:	4a11      	ldr	r2, [pc, #68]	@ (8009f4c <prvCheckForValidListAndQueue+0x78>)
 8009f06:	2110      	movs	r1, #16
 8009f08:	200a      	movs	r0, #10
 8009f0a:	f7fd fd51 	bl	80079b0 <xQueueGenericCreateStatic>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	4a08      	ldr	r2, [pc, #32]	@ (8009f34 <prvCheckForValidListAndQueue+0x60>)
 8009f12:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009f14:	4b07      	ldr	r3, [pc, #28]	@ (8009f34 <prvCheckForValidListAndQueue+0x60>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d005      	beq.n	8009f28 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009f1c:	4b05      	ldr	r3, [pc, #20]	@ (8009f34 <prvCheckForValidListAndQueue+0x60>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	490b      	ldr	r1, [pc, #44]	@ (8009f50 <prvCheckForValidListAndQueue+0x7c>)
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7fe fc14 	bl	8008750 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f28:	f000 f978 	bl	800a21c <vPortExitCritical>
}
 8009f2c:	bf00      	nop
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	240014d4 	.word	0x240014d4
 8009f38:	240014a4 	.word	0x240014a4
 8009f3c:	240014b8 	.word	0x240014b8
 8009f40:	240014cc 	.word	0x240014cc
 8009f44:	240014d0 	.word	0x240014d0
 8009f48:	24001580 	.word	0x24001580
 8009f4c:	240014e0 	.word	0x240014e0
 8009f50:	0800aa4c 	.word	0x0800aa4c

08009f54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	3b04      	subs	r3, #4
 8009f64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009f6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	3b04      	subs	r3, #4
 8009f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	f023 0201 	bic.w	r2, r3, #1
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	3b04      	subs	r3, #4
 8009f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f84:	4a0c      	ldr	r2, [pc, #48]	@ (8009fb8 <pxPortInitialiseStack+0x64>)
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	3b14      	subs	r3, #20
 8009f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	3b04      	subs	r3, #4
 8009f9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f06f 0202 	mvn.w	r2, #2
 8009fa2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	3b20      	subs	r3, #32
 8009fa8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009faa:	68fb      	ldr	r3, [r7, #12]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3714      	adds	r7, #20
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr
 8009fb8:	08009fbd 	.word	0x08009fbd

08009fbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009fc6:	4b13      	ldr	r3, [pc, #76]	@ (800a014 <prvTaskExitError+0x58>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fce:	d00b      	beq.n	8009fe8 <prvTaskExitError+0x2c>
	__asm volatile
 8009fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd4:	f383 8811 	msr	BASEPRI, r3
 8009fd8:	f3bf 8f6f 	isb	sy
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	60fb      	str	r3, [r7, #12]
}
 8009fe2:	bf00      	nop
 8009fe4:	bf00      	nop
 8009fe6:	e7fd      	b.n	8009fe4 <prvTaskExitError+0x28>
	__asm volatile
 8009fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fec:	f383 8811 	msr	BASEPRI, r3
 8009ff0:	f3bf 8f6f 	isb	sy
 8009ff4:	f3bf 8f4f 	dsb	sy
 8009ff8:	60bb      	str	r3, [r7, #8]
}
 8009ffa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ffc:	bf00      	nop
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d0fc      	beq.n	8009ffe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a004:	bf00      	nop
 800a006:	bf00      	nop
 800a008:	3714      	adds	r7, #20
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop
 800a014:	24000010 	.word	0x24000010
	...

0800a020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a020:	4b07      	ldr	r3, [pc, #28]	@ (800a040 <pxCurrentTCBConst2>)
 800a022:	6819      	ldr	r1, [r3, #0]
 800a024:	6808      	ldr	r0, [r1, #0]
 800a026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02a:	f380 8809 	msr	PSP, r0
 800a02e:	f3bf 8f6f 	isb	sy
 800a032:	f04f 0000 	mov.w	r0, #0
 800a036:	f380 8811 	msr	BASEPRI, r0
 800a03a:	4770      	bx	lr
 800a03c:	f3af 8000 	nop.w

0800a040 <pxCurrentTCBConst2>:
 800a040:	24000fa4 	.word	0x24000fa4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a044:	bf00      	nop
 800a046:	bf00      	nop

0800a048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a048:	4808      	ldr	r0, [pc, #32]	@ (800a06c <prvPortStartFirstTask+0x24>)
 800a04a:	6800      	ldr	r0, [r0, #0]
 800a04c:	6800      	ldr	r0, [r0, #0]
 800a04e:	f380 8808 	msr	MSP, r0
 800a052:	f04f 0000 	mov.w	r0, #0
 800a056:	f380 8814 	msr	CONTROL, r0
 800a05a:	b662      	cpsie	i
 800a05c:	b661      	cpsie	f
 800a05e:	f3bf 8f4f 	dsb	sy
 800a062:	f3bf 8f6f 	isb	sy
 800a066:	df00      	svc	0
 800a068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a06a:	bf00      	nop
 800a06c:	e000ed08 	.word	0xe000ed08

0800a070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a076:	4b47      	ldr	r3, [pc, #284]	@ (800a194 <xPortStartScheduler+0x124>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a47      	ldr	r2, [pc, #284]	@ (800a198 <xPortStartScheduler+0x128>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d10b      	bne.n	800a098 <xPortStartScheduler+0x28>
	__asm volatile
 800a080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a084:	f383 8811 	msr	BASEPRI, r3
 800a088:	f3bf 8f6f 	isb	sy
 800a08c:	f3bf 8f4f 	dsb	sy
 800a090:	613b      	str	r3, [r7, #16]
}
 800a092:	bf00      	nop
 800a094:	bf00      	nop
 800a096:	e7fd      	b.n	800a094 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a098:	4b3e      	ldr	r3, [pc, #248]	@ (800a194 <xPortStartScheduler+0x124>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a3f      	ldr	r2, [pc, #252]	@ (800a19c <xPortStartScheduler+0x12c>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d10b      	bne.n	800a0ba <xPortStartScheduler+0x4a>
	__asm volatile
 800a0a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0a6:	f383 8811 	msr	BASEPRI, r3
 800a0aa:	f3bf 8f6f 	isb	sy
 800a0ae:	f3bf 8f4f 	dsb	sy
 800a0b2:	60fb      	str	r3, [r7, #12]
}
 800a0b4:	bf00      	nop
 800a0b6:	bf00      	nop
 800a0b8:	e7fd      	b.n	800a0b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a0ba:	4b39      	ldr	r3, [pc, #228]	@ (800a1a0 <xPortStartScheduler+0x130>)
 800a0bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	22ff      	movs	r2, #255	@ 0xff
 800a0ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a0d4:	78fb      	ldrb	r3, [r7, #3]
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a0dc:	b2da      	uxtb	r2, r3
 800a0de:	4b31      	ldr	r3, [pc, #196]	@ (800a1a4 <xPortStartScheduler+0x134>)
 800a0e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a0e2:	4b31      	ldr	r3, [pc, #196]	@ (800a1a8 <xPortStartScheduler+0x138>)
 800a0e4:	2207      	movs	r2, #7
 800a0e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0e8:	e009      	b.n	800a0fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a0ea:	4b2f      	ldr	r3, [pc, #188]	@ (800a1a8 <xPortStartScheduler+0x138>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	4a2d      	ldr	r2, [pc, #180]	@ (800a1a8 <xPortStartScheduler+0x138>)
 800a0f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a0f4:	78fb      	ldrb	r3, [r7, #3]
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	005b      	lsls	r3, r3, #1
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0fe:	78fb      	ldrb	r3, [r7, #3]
 800a100:	b2db      	uxtb	r3, r3
 800a102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a106:	2b80      	cmp	r3, #128	@ 0x80
 800a108:	d0ef      	beq.n	800a0ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a10a:	4b27      	ldr	r3, [pc, #156]	@ (800a1a8 <xPortStartScheduler+0x138>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f1c3 0307 	rsb	r3, r3, #7
 800a112:	2b04      	cmp	r3, #4
 800a114:	d00b      	beq.n	800a12e <xPortStartScheduler+0xbe>
	__asm volatile
 800a116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a11a:	f383 8811 	msr	BASEPRI, r3
 800a11e:	f3bf 8f6f 	isb	sy
 800a122:	f3bf 8f4f 	dsb	sy
 800a126:	60bb      	str	r3, [r7, #8]
}
 800a128:	bf00      	nop
 800a12a:	bf00      	nop
 800a12c:	e7fd      	b.n	800a12a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a12e:	4b1e      	ldr	r3, [pc, #120]	@ (800a1a8 <xPortStartScheduler+0x138>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	021b      	lsls	r3, r3, #8
 800a134:	4a1c      	ldr	r2, [pc, #112]	@ (800a1a8 <xPortStartScheduler+0x138>)
 800a136:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a138:	4b1b      	ldr	r3, [pc, #108]	@ (800a1a8 <xPortStartScheduler+0x138>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a140:	4a19      	ldr	r2, [pc, #100]	@ (800a1a8 <xPortStartScheduler+0x138>)
 800a142:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	b2da      	uxtb	r2, r3
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a14c:	4b17      	ldr	r3, [pc, #92]	@ (800a1ac <xPortStartScheduler+0x13c>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a16      	ldr	r2, [pc, #88]	@ (800a1ac <xPortStartScheduler+0x13c>)
 800a152:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a156:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a158:	4b14      	ldr	r3, [pc, #80]	@ (800a1ac <xPortStartScheduler+0x13c>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a13      	ldr	r2, [pc, #76]	@ (800a1ac <xPortStartScheduler+0x13c>)
 800a15e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a162:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a164:	f000 f8da 	bl	800a31c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a168:	4b11      	ldr	r3, [pc, #68]	@ (800a1b0 <xPortStartScheduler+0x140>)
 800a16a:	2200      	movs	r2, #0
 800a16c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a16e:	f000 f8f9 	bl	800a364 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a172:	4b10      	ldr	r3, [pc, #64]	@ (800a1b4 <xPortStartScheduler+0x144>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a0f      	ldr	r2, [pc, #60]	@ (800a1b4 <xPortStartScheduler+0x144>)
 800a178:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a17c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a17e:	f7ff ff63 	bl	800a048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a182:	f7fe ff1d 	bl	8008fc0 <vTaskSwitchContext>
	prvTaskExitError();
 800a186:	f7ff ff19 	bl	8009fbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3718      	adds	r7, #24
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}
 800a194:	e000ed00 	.word	0xe000ed00
 800a198:	410fc271 	.word	0x410fc271
 800a19c:	410fc270 	.word	0x410fc270
 800a1a0:	e000e400 	.word	0xe000e400
 800a1a4:	240015d0 	.word	0x240015d0
 800a1a8:	240015d4 	.word	0x240015d4
 800a1ac:	e000ed20 	.word	0xe000ed20
 800a1b0:	24000010 	.word	0x24000010
 800a1b4:	e000ef34 	.word	0xe000ef34

0800a1b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1c2:	f383 8811 	msr	BASEPRI, r3
 800a1c6:	f3bf 8f6f 	isb	sy
 800a1ca:	f3bf 8f4f 	dsb	sy
 800a1ce:	607b      	str	r3, [r7, #4]
}
 800a1d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a1d2:	4b10      	ldr	r3, [pc, #64]	@ (800a214 <vPortEnterCritical+0x5c>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	4a0e      	ldr	r2, [pc, #56]	@ (800a214 <vPortEnterCritical+0x5c>)
 800a1da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a1dc:	4b0d      	ldr	r3, [pc, #52]	@ (800a214 <vPortEnterCritical+0x5c>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d110      	bne.n	800a206 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a1e4:	4b0c      	ldr	r3, [pc, #48]	@ (800a218 <vPortEnterCritical+0x60>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d00b      	beq.n	800a206 <vPortEnterCritical+0x4e>
	__asm volatile
 800a1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1f2:	f383 8811 	msr	BASEPRI, r3
 800a1f6:	f3bf 8f6f 	isb	sy
 800a1fa:	f3bf 8f4f 	dsb	sy
 800a1fe:	603b      	str	r3, [r7, #0]
}
 800a200:	bf00      	nop
 800a202:	bf00      	nop
 800a204:	e7fd      	b.n	800a202 <vPortEnterCritical+0x4a>
	}
}
 800a206:	bf00      	nop
 800a208:	370c      	adds	r7, #12
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop
 800a214:	24000010 	.word	0x24000010
 800a218:	e000ed04 	.word	0xe000ed04

0800a21c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a222:	4b12      	ldr	r3, [pc, #72]	@ (800a26c <vPortExitCritical+0x50>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d10b      	bne.n	800a242 <vPortExitCritical+0x26>
	__asm volatile
 800a22a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a22e:	f383 8811 	msr	BASEPRI, r3
 800a232:	f3bf 8f6f 	isb	sy
 800a236:	f3bf 8f4f 	dsb	sy
 800a23a:	607b      	str	r3, [r7, #4]
}
 800a23c:	bf00      	nop
 800a23e:	bf00      	nop
 800a240:	e7fd      	b.n	800a23e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a242:	4b0a      	ldr	r3, [pc, #40]	@ (800a26c <vPortExitCritical+0x50>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	3b01      	subs	r3, #1
 800a248:	4a08      	ldr	r2, [pc, #32]	@ (800a26c <vPortExitCritical+0x50>)
 800a24a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a24c:	4b07      	ldr	r3, [pc, #28]	@ (800a26c <vPortExitCritical+0x50>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d105      	bne.n	800a260 <vPortExitCritical+0x44>
 800a254:	2300      	movs	r3, #0
 800a256:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	f383 8811 	msr	BASEPRI, r3
}
 800a25e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a260:	bf00      	nop
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr
 800a26c:	24000010 	.word	0x24000010

0800a270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a270:	f3ef 8009 	mrs	r0, PSP
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	4b15      	ldr	r3, [pc, #84]	@ (800a2d0 <pxCurrentTCBConst>)
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	f01e 0f10 	tst.w	lr, #16
 800a280:	bf08      	it	eq
 800a282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a28a:	6010      	str	r0, [r2, #0]
 800a28c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a290:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a294:	f380 8811 	msr	BASEPRI, r0
 800a298:	f3bf 8f4f 	dsb	sy
 800a29c:	f3bf 8f6f 	isb	sy
 800a2a0:	f7fe fe8e 	bl	8008fc0 <vTaskSwitchContext>
 800a2a4:	f04f 0000 	mov.w	r0, #0
 800a2a8:	f380 8811 	msr	BASEPRI, r0
 800a2ac:	bc09      	pop	{r0, r3}
 800a2ae:	6819      	ldr	r1, [r3, #0]
 800a2b0:	6808      	ldr	r0, [r1, #0]
 800a2b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b6:	f01e 0f10 	tst.w	lr, #16
 800a2ba:	bf08      	it	eq
 800a2bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a2c0:	f380 8809 	msr	PSP, r0
 800a2c4:	f3bf 8f6f 	isb	sy
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	f3af 8000 	nop.w

0800a2d0 <pxCurrentTCBConst>:
 800a2d0:	24000fa4 	.word	0x24000fa4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a2d4:	bf00      	nop
 800a2d6:	bf00      	nop

0800a2d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	607b      	str	r3, [r7, #4]
}
 800a2f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a2f2:	f7fe fdab 	bl	8008e4c <xTaskIncrementTick>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d003      	beq.n	800a304 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a2fc:	4b06      	ldr	r3, [pc, #24]	@ (800a318 <xPortSysTickHandler+0x40>)
 800a2fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a302:	601a      	str	r2, [r3, #0]
 800a304:	2300      	movs	r3, #0
 800a306:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	f383 8811 	msr	BASEPRI, r3
}
 800a30e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a310:	bf00      	nop
 800a312:	3708      	adds	r7, #8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	e000ed04 	.word	0xe000ed04

0800a31c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a31c:	b480      	push	{r7}
 800a31e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a320:	4b0b      	ldr	r3, [pc, #44]	@ (800a350 <vPortSetupTimerInterrupt+0x34>)
 800a322:	2200      	movs	r2, #0
 800a324:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a326:	4b0b      	ldr	r3, [pc, #44]	@ (800a354 <vPortSetupTimerInterrupt+0x38>)
 800a328:	2200      	movs	r2, #0
 800a32a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a32c:	4b0a      	ldr	r3, [pc, #40]	@ (800a358 <vPortSetupTimerInterrupt+0x3c>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a0a      	ldr	r2, [pc, #40]	@ (800a35c <vPortSetupTimerInterrupt+0x40>)
 800a332:	fba2 2303 	umull	r2, r3, r2, r3
 800a336:	099b      	lsrs	r3, r3, #6
 800a338:	4a09      	ldr	r2, [pc, #36]	@ (800a360 <vPortSetupTimerInterrupt+0x44>)
 800a33a:	3b01      	subs	r3, #1
 800a33c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a33e:	4b04      	ldr	r3, [pc, #16]	@ (800a350 <vPortSetupTimerInterrupt+0x34>)
 800a340:	2207      	movs	r2, #7
 800a342:	601a      	str	r2, [r3, #0]
}
 800a344:	bf00      	nop
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop
 800a350:	e000e010 	.word	0xe000e010
 800a354:	e000e018 	.word	0xe000e018
 800a358:	24000000 	.word	0x24000000
 800a35c:	10624dd3 	.word	0x10624dd3
 800a360:	e000e014 	.word	0xe000e014

0800a364 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a364:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a374 <vPortEnableVFP+0x10>
 800a368:	6801      	ldr	r1, [r0, #0]
 800a36a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a36e:	6001      	str	r1, [r0, #0]
 800a370:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a372:	bf00      	nop
 800a374:	e000ed88 	.word	0xe000ed88

0800a378 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a37e:	f3ef 8305 	mrs	r3, IPSR
 800a382:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2b0f      	cmp	r3, #15
 800a388:	d915      	bls.n	800a3b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a38a:	4a18      	ldr	r2, [pc, #96]	@ (800a3ec <vPortValidateInterruptPriority+0x74>)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	4413      	add	r3, r2
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a394:	4b16      	ldr	r3, [pc, #88]	@ (800a3f0 <vPortValidateInterruptPriority+0x78>)
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	7afa      	ldrb	r2, [r7, #11]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d20b      	bcs.n	800a3b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3a2:	f383 8811 	msr	BASEPRI, r3
 800a3a6:	f3bf 8f6f 	isb	sy
 800a3aa:	f3bf 8f4f 	dsb	sy
 800a3ae:	607b      	str	r3, [r7, #4]
}
 800a3b0:	bf00      	nop
 800a3b2:	bf00      	nop
 800a3b4:	e7fd      	b.n	800a3b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a3b6:	4b0f      	ldr	r3, [pc, #60]	@ (800a3f4 <vPortValidateInterruptPriority+0x7c>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a3be:	4b0e      	ldr	r3, [pc, #56]	@ (800a3f8 <vPortValidateInterruptPriority+0x80>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d90b      	bls.n	800a3de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a3c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ca:	f383 8811 	msr	BASEPRI, r3
 800a3ce:	f3bf 8f6f 	isb	sy
 800a3d2:	f3bf 8f4f 	dsb	sy
 800a3d6:	603b      	str	r3, [r7, #0]
}
 800a3d8:	bf00      	nop
 800a3da:	bf00      	nop
 800a3dc:	e7fd      	b.n	800a3da <vPortValidateInterruptPriority+0x62>
	}
 800a3de:	bf00      	nop
 800a3e0:	3714      	adds	r7, #20
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	e000e3f0 	.word	0xe000e3f0
 800a3f0:	240015d0 	.word	0x240015d0
 800a3f4:	e000ed0c 	.word	0xe000ed0c
 800a3f8:	240015d4 	.word	0x240015d4

0800a3fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b08a      	sub	sp, #40	@ 0x28
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a404:	2300      	movs	r3, #0
 800a406:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a408:	f7fe fc64 	bl	8008cd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a40c:	4b5c      	ldr	r3, [pc, #368]	@ (800a580 <pvPortMalloc+0x184>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d101      	bne.n	800a418 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a414:	f000 f924 	bl	800a660 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a418:	4b5a      	ldr	r3, [pc, #360]	@ (800a584 <pvPortMalloc+0x188>)
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	4013      	ands	r3, r2
 800a420:	2b00      	cmp	r3, #0
 800a422:	f040 8095 	bne.w	800a550 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d01e      	beq.n	800a46a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a42c:	2208      	movs	r2, #8
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4413      	add	r3, r2
 800a432:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f003 0307 	and.w	r3, r3, #7
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d015      	beq.n	800a46a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f023 0307 	bic.w	r3, r3, #7
 800a444:	3308      	adds	r3, #8
 800a446:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f003 0307 	and.w	r3, r3, #7
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d00b      	beq.n	800a46a <pvPortMalloc+0x6e>
	__asm volatile
 800a452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a456:	f383 8811 	msr	BASEPRI, r3
 800a45a:	f3bf 8f6f 	isb	sy
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	617b      	str	r3, [r7, #20]
}
 800a464:	bf00      	nop
 800a466:	bf00      	nop
 800a468:	e7fd      	b.n	800a466 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d06f      	beq.n	800a550 <pvPortMalloc+0x154>
 800a470:	4b45      	ldr	r3, [pc, #276]	@ (800a588 <pvPortMalloc+0x18c>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	429a      	cmp	r2, r3
 800a478:	d86a      	bhi.n	800a550 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a47a:	4b44      	ldr	r3, [pc, #272]	@ (800a58c <pvPortMalloc+0x190>)
 800a47c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a47e:	4b43      	ldr	r3, [pc, #268]	@ (800a58c <pvPortMalloc+0x190>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a484:	e004      	b.n	800a490 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a488:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	429a      	cmp	r2, r3
 800a498:	d903      	bls.n	800a4a2 <pvPortMalloc+0xa6>
 800a49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d1f1      	bne.n	800a486 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a4a2:	4b37      	ldr	r3, [pc, #220]	@ (800a580 <pvPortMalloc+0x184>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d051      	beq.n	800a550 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a4ac:	6a3b      	ldr	r3, [r7, #32]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2208      	movs	r2, #8
 800a4b2:	4413      	add	r3, r2
 800a4b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	6a3b      	ldr	r3, [r7, #32]
 800a4bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c0:	685a      	ldr	r2, [r3, #4]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	1ad2      	subs	r2, r2, r3
 800a4c6:	2308      	movs	r3, #8
 800a4c8:	005b      	lsls	r3, r3, #1
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d920      	bls.n	800a510 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a4ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4413      	add	r3, r2
 800a4d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4d6:	69bb      	ldr	r3, [r7, #24]
 800a4d8:	f003 0307 	and.w	r3, r3, #7
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d00b      	beq.n	800a4f8 <pvPortMalloc+0xfc>
	__asm volatile
 800a4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4e4:	f383 8811 	msr	BASEPRI, r3
 800a4e8:	f3bf 8f6f 	isb	sy
 800a4ec:	f3bf 8f4f 	dsb	sy
 800a4f0:	613b      	str	r3, [r7, #16]
}
 800a4f2:	bf00      	nop
 800a4f4:	bf00      	nop
 800a4f6:	e7fd      	b.n	800a4f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4fa:	685a      	ldr	r2, [r3, #4]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	1ad2      	subs	r2, r2, r3
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a50a:	69b8      	ldr	r0, [r7, #24]
 800a50c:	f000 f90a 	bl	800a724 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a510:	4b1d      	ldr	r3, [pc, #116]	@ (800a588 <pvPortMalloc+0x18c>)
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	1ad3      	subs	r3, r2, r3
 800a51a:	4a1b      	ldr	r2, [pc, #108]	@ (800a588 <pvPortMalloc+0x18c>)
 800a51c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a51e:	4b1a      	ldr	r3, [pc, #104]	@ (800a588 <pvPortMalloc+0x18c>)
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	4b1b      	ldr	r3, [pc, #108]	@ (800a590 <pvPortMalloc+0x194>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	429a      	cmp	r2, r3
 800a528:	d203      	bcs.n	800a532 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a52a:	4b17      	ldr	r3, [pc, #92]	@ (800a588 <pvPortMalloc+0x18c>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a18      	ldr	r2, [pc, #96]	@ (800a590 <pvPortMalloc+0x194>)
 800a530:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a534:	685a      	ldr	r2, [r3, #4]
 800a536:	4b13      	ldr	r3, [pc, #76]	@ (800a584 <pvPortMalloc+0x188>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	431a      	orrs	r2, r3
 800a53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a53e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a542:	2200      	movs	r2, #0
 800a544:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a546:	4b13      	ldr	r3, [pc, #76]	@ (800a594 <pvPortMalloc+0x198>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	3301      	adds	r3, #1
 800a54c:	4a11      	ldr	r2, [pc, #68]	@ (800a594 <pvPortMalloc+0x198>)
 800a54e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a550:	f7fe fbce 	bl	8008cf0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a554:	69fb      	ldr	r3, [r7, #28]
 800a556:	f003 0307 	and.w	r3, r3, #7
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00b      	beq.n	800a576 <pvPortMalloc+0x17a>
	__asm volatile
 800a55e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a562:	f383 8811 	msr	BASEPRI, r3
 800a566:	f3bf 8f6f 	isb	sy
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	60fb      	str	r3, [r7, #12]
}
 800a570:	bf00      	nop
 800a572:	bf00      	nop
 800a574:	e7fd      	b.n	800a572 <pvPortMalloc+0x176>
	return pvReturn;
 800a576:	69fb      	ldr	r3, [r7, #28]
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3728      	adds	r7, #40	@ 0x28
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	240051e0 	.word	0x240051e0
 800a584:	240051f4 	.word	0x240051f4
 800a588:	240051e4 	.word	0x240051e4
 800a58c:	240051d8 	.word	0x240051d8
 800a590:	240051e8 	.word	0x240051e8
 800a594:	240051ec 	.word	0x240051ec

0800a598 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b086      	sub	sp, #24
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d04f      	beq.n	800a64a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a5aa:	2308      	movs	r3, #8
 800a5ac:	425b      	negs	r3, r3
 800a5ae:	697a      	ldr	r2, [r7, #20]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	685a      	ldr	r2, [r3, #4]
 800a5bc:	4b25      	ldr	r3, [pc, #148]	@ (800a654 <vPortFree+0xbc>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4013      	ands	r3, r2
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d10b      	bne.n	800a5de <vPortFree+0x46>
	__asm volatile
 800a5c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ca:	f383 8811 	msr	BASEPRI, r3
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	f3bf 8f4f 	dsb	sy
 800a5d6:	60fb      	str	r3, [r7, #12]
}
 800a5d8:	bf00      	nop
 800a5da:	bf00      	nop
 800a5dc:	e7fd      	b.n	800a5da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d00b      	beq.n	800a5fe <vPortFree+0x66>
	__asm volatile
 800a5e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ea:	f383 8811 	msr	BASEPRI, r3
 800a5ee:	f3bf 8f6f 	isb	sy
 800a5f2:	f3bf 8f4f 	dsb	sy
 800a5f6:	60bb      	str	r3, [r7, #8]
}
 800a5f8:	bf00      	nop
 800a5fa:	bf00      	nop
 800a5fc:	e7fd      	b.n	800a5fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	685a      	ldr	r2, [r3, #4]
 800a602:	4b14      	ldr	r3, [pc, #80]	@ (800a654 <vPortFree+0xbc>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4013      	ands	r3, r2
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d01e      	beq.n	800a64a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d11a      	bne.n	800a64a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	685a      	ldr	r2, [r3, #4]
 800a618:	4b0e      	ldr	r3, [pc, #56]	@ (800a654 <vPortFree+0xbc>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	43db      	mvns	r3, r3
 800a61e:	401a      	ands	r2, r3
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a624:	f7fe fb56 	bl	8008cd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	685a      	ldr	r2, [r3, #4]
 800a62c:	4b0a      	ldr	r3, [pc, #40]	@ (800a658 <vPortFree+0xc0>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4413      	add	r3, r2
 800a632:	4a09      	ldr	r2, [pc, #36]	@ (800a658 <vPortFree+0xc0>)
 800a634:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a636:	6938      	ldr	r0, [r7, #16]
 800a638:	f000 f874 	bl	800a724 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a63c:	4b07      	ldr	r3, [pc, #28]	@ (800a65c <vPortFree+0xc4>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	3301      	adds	r3, #1
 800a642:	4a06      	ldr	r2, [pc, #24]	@ (800a65c <vPortFree+0xc4>)
 800a644:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a646:	f7fe fb53 	bl	8008cf0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a64a:	bf00      	nop
 800a64c:	3718      	adds	r7, #24
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	240051f4 	.word	0x240051f4
 800a658:	240051e4 	.word	0x240051e4
 800a65c:	240051f0 	.word	0x240051f0

0800a660 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a666:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a66a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a66c:	4b27      	ldr	r3, [pc, #156]	@ (800a70c <prvHeapInit+0xac>)
 800a66e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f003 0307 	and.w	r3, r3, #7
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00c      	beq.n	800a694 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	3307      	adds	r3, #7
 800a67e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f023 0307 	bic.w	r3, r3, #7
 800a686:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a688:	68ba      	ldr	r2, [r7, #8]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	1ad3      	subs	r3, r2, r3
 800a68e:	4a1f      	ldr	r2, [pc, #124]	@ (800a70c <prvHeapInit+0xac>)
 800a690:	4413      	add	r3, r2
 800a692:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a698:	4a1d      	ldr	r2, [pc, #116]	@ (800a710 <prvHeapInit+0xb0>)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a69e:	4b1c      	ldr	r3, [pc, #112]	@ (800a710 <prvHeapInit+0xb0>)
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	68ba      	ldr	r2, [r7, #8]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a6ac:	2208      	movs	r2, #8
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	1a9b      	subs	r3, r3, r2
 800a6b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f023 0307 	bic.w	r3, r3, #7
 800a6ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	4a15      	ldr	r2, [pc, #84]	@ (800a714 <prvHeapInit+0xb4>)
 800a6c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a6c2:	4b14      	ldr	r3, [pc, #80]	@ (800a714 <prvHeapInit+0xb4>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a6ca:	4b12      	ldr	r3, [pc, #72]	@ (800a714 <prvHeapInit+0xb4>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	68fa      	ldr	r2, [r7, #12]
 800a6da:	1ad2      	subs	r2, r2, r3
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a6e0:	4b0c      	ldr	r3, [pc, #48]	@ (800a714 <prvHeapInit+0xb4>)
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	4a0a      	ldr	r2, [pc, #40]	@ (800a718 <prvHeapInit+0xb8>)
 800a6ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	4a09      	ldr	r2, [pc, #36]	@ (800a71c <prvHeapInit+0xbc>)
 800a6f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a6f8:	4b09      	ldr	r3, [pc, #36]	@ (800a720 <prvHeapInit+0xc0>)
 800a6fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a6fe:	601a      	str	r2, [r3, #0]
}
 800a700:	bf00      	nop
 800a702:	3714      	adds	r7, #20
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr
 800a70c:	240015d8 	.word	0x240015d8
 800a710:	240051d8 	.word	0x240051d8
 800a714:	240051e0 	.word	0x240051e0
 800a718:	240051e8 	.word	0x240051e8
 800a71c:	240051e4 	.word	0x240051e4
 800a720:	240051f4 	.word	0x240051f4

0800a724 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a724:	b480      	push	{r7}
 800a726:	b085      	sub	sp, #20
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a72c:	4b28      	ldr	r3, [pc, #160]	@ (800a7d0 <prvInsertBlockIntoFreeList+0xac>)
 800a72e:	60fb      	str	r3, [r7, #12]
 800a730:	e002      	b.n	800a738 <prvInsertBlockIntoFreeList+0x14>
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	60fb      	str	r3, [r7, #12]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	429a      	cmp	r2, r3
 800a740:	d8f7      	bhi.n	800a732 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	68ba      	ldr	r2, [r7, #8]
 800a74c:	4413      	add	r3, r2
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	429a      	cmp	r2, r3
 800a752:	d108      	bne.n	800a766 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	685a      	ldr	r2, [r3, #4]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	441a      	add	r2, r3
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	68ba      	ldr	r2, [r7, #8]
 800a770:	441a      	add	r2, r3
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	429a      	cmp	r2, r3
 800a778:	d118      	bne.n	800a7ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	4b15      	ldr	r3, [pc, #84]	@ (800a7d4 <prvInsertBlockIntoFreeList+0xb0>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	429a      	cmp	r2, r3
 800a784:	d00d      	beq.n	800a7a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	685a      	ldr	r2, [r3, #4]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	441a      	add	r2, r3
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	601a      	str	r2, [r3, #0]
 800a7a0:	e008      	b.n	800a7b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a7a2:	4b0c      	ldr	r3, [pc, #48]	@ (800a7d4 <prvInsertBlockIntoFreeList+0xb0>)
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	601a      	str	r2, [r3, #0]
 800a7aa:	e003      	b.n	800a7b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a7b4:	68fa      	ldr	r2, [r7, #12]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d002      	beq.n	800a7c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7c2:	bf00      	nop
 800a7c4:	3714      	adds	r7, #20
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr
 800a7ce:	bf00      	nop
 800a7d0:	240051d8 	.word	0x240051d8
 800a7d4:	240051e0 	.word	0x240051e0

0800a7d8 <memset>:
 800a7d8:	4402      	add	r2, r0
 800a7da:	4603      	mov	r3, r0
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d100      	bne.n	800a7e2 <memset+0xa>
 800a7e0:	4770      	bx	lr
 800a7e2:	f803 1b01 	strb.w	r1, [r3], #1
 800a7e6:	e7f9      	b.n	800a7dc <memset+0x4>

0800a7e8 <_reclaim_reent>:
 800a7e8:	4b29      	ldr	r3, [pc, #164]	@ (800a890 <_reclaim_reent+0xa8>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4283      	cmp	r3, r0
 800a7ee:	b570      	push	{r4, r5, r6, lr}
 800a7f0:	4604      	mov	r4, r0
 800a7f2:	d04b      	beq.n	800a88c <_reclaim_reent+0xa4>
 800a7f4:	69c3      	ldr	r3, [r0, #28]
 800a7f6:	b1ab      	cbz	r3, 800a824 <_reclaim_reent+0x3c>
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	b16b      	cbz	r3, 800a818 <_reclaim_reent+0x30>
 800a7fc:	2500      	movs	r5, #0
 800a7fe:	69e3      	ldr	r3, [r4, #28]
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	5959      	ldr	r1, [r3, r5]
 800a804:	2900      	cmp	r1, #0
 800a806:	d13b      	bne.n	800a880 <_reclaim_reent+0x98>
 800a808:	3504      	adds	r5, #4
 800a80a:	2d80      	cmp	r5, #128	@ 0x80
 800a80c:	d1f7      	bne.n	800a7fe <_reclaim_reent+0x16>
 800a80e:	69e3      	ldr	r3, [r4, #28]
 800a810:	4620      	mov	r0, r4
 800a812:	68d9      	ldr	r1, [r3, #12]
 800a814:	f000 f872 	bl	800a8fc <_free_r>
 800a818:	69e3      	ldr	r3, [r4, #28]
 800a81a:	6819      	ldr	r1, [r3, #0]
 800a81c:	b111      	cbz	r1, 800a824 <_reclaim_reent+0x3c>
 800a81e:	4620      	mov	r0, r4
 800a820:	f000 f86c 	bl	800a8fc <_free_r>
 800a824:	6961      	ldr	r1, [r4, #20]
 800a826:	b111      	cbz	r1, 800a82e <_reclaim_reent+0x46>
 800a828:	4620      	mov	r0, r4
 800a82a:	f000 f867 	bl	800a8fc <_free_r>
 800a82e:	69e1      	ldr	r1, [r4, #28]
 800a830:	b111      	cbz	r1, 800a838 <_reclaim_reent+0x50>
 800a832:	4620      	mov	r0, r4
 800a834:	f000 f862 	bl	800a8fc <_free_r>
 800a838:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a83a:	b111      	cbz	r1, 800a842 <_reclaim_reent+0x5a>
 800a83c:	4620      	mov	r0, r4
 800a83e:	f000 f85d 	bl	800a8fc <_free_r>
 800a842:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a844:	b111      	cbz	r1, 800a84c <_reclaim_reent+0x64>
 800a846:	4620      	mov	r0, r4
 800a848:	f000 f858 	bl	800a8fc <_free_r>
 800a84c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a84e:	b111      	cbz	r1, 800a856 <_reclaim_reent+0x6e>
 800a850:	4620      	mov	r0, r4
 800a852:	f000 f853 	bl	800a8fc <_free_r>
 800a856:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a858:	b111      	cbz	r1, 800a860 <_reclaim_reent+0x78>
 800a85a:	4620      	mov	r0, r4
 800a85c:	f000 f84e 	bl	800a8fc <_free_r>
 800a860:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a862:	b111      	cbz	r1, 800a86a <_reclaim_reent+0x82>
 800a864:	4620      	mov	r0, r4
 800a866:	f000 f849 	bl	800a8fc <_free_r>
 800a86a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a86c:	b111      	cbz	r1, 800a874 <_reclaim_reent+0x8c>
 800a86e:	4620      	mov	r0, r4
 800a870:	f000 f844 	bl	800a8fc <_free_r>
 800a874:	6a23      	ldr	r3, [r4, #32]
 800a876:	b14b      	cbz	r3, 800a88c <_reclaim_reent+0xa4>
 800a878:	4620      	mov	r0, r4
 800a87a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a87e:	4718      	bx	r3
 800a880:	680e      	ldr	r6, [r1, #0]
 800a882:	4620      	mov	r0, r4
 800a884:	f000 f83a 	bl	800a8fc <_free_r>
 800a888:	4631      	mov	r1, r6
 800a88a:	e7bb      	b.n	800a804 <_reclaim_reent+0x1c>
 800a88c:	bd70      	pop	{r4, r5, r6, pc}
 800a88e:	bf00      	nop
 800a890:	24000014 	.word	0x24000014

0800a894 <__libc_init_array>:
 800a894:	b570      	push	{r4, r5, r6, lr}
 800a896:	4d0d      	ldr	r5, [pc, #52]	@ (800a8cc <__libc_init_array+0x38>)
 800a898:	4c0d      	ldr	r4, [pc, #52]	@ (800a8d0 <__libc_init_array+0x3c>)
 800a89a:	1b64      	subs	r4, r4, r5
 800a89c:	10a4      	asrs	r4, r4, #2
 800a89e:	2600      	movs	r6, #0
 800a8a0:	42a6      	cmp	r6, r4
 800a8a2:	d109      	bne.n	800a8b8 <__libc_init_array+0x24>
 800a8a4:	4d0b      	ldr	r5, [pc, #44]	@ (800a8d4 <__libc_init_array+0x40>)
 800a8a6:	4c0c      	ldr	r4, [pc, #48]	@ (800a8d8 <__libc_init_array+0x44>)
 800a8a8:	f000 f87e 	bl	800a9a8 <_init>
 800a8ac:	1b64      	subs	r4, r4, r5
 800a8ae:	10a4      	asrs	r4, r4, #2
 800a8b0:	2600      	movs	r6, #0
 800a8b2:	42a6      	cmp	r6, r4
 800a8b4:	d105      	bne.n	800a8c2 <__libc_init_array+0x2e>
 800a8b6:	bd70      	pop	{r4, r5, r6, pc}
 800a8b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8bc:	4798      	blx	r3
 800a8be:	3601      	adds	r6, #1
 800a8c0:	e7ee      	b.n	800a8a0 <__libc_init_array+0xc>
 800a8c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8c6:	4798      	blx	r3
 800a8c8:	3601      	adds	r6, #1
 800a8ca:	e7f2      	b.n	800a8b2 <__libc_init_array+0x1e>
 800a8cc:	0800ab4c 	.word	0x0800ab4c
 800a8d0:	0800ab4c 	.word	0x0800ab4c
 800a8d4:	0800ab4c 	.word	0x0800ab4c
 800a8d8:	0800ab50 	.word	0x0800ab50

0800a8dc <__retarget_lock_acquire_recursive>:
 800a8dc:	4770      	bx	lr

0800a8de <__retarget_lock_release_recursive>:
 800a8de:	4770      	bx	lr

0800a8e0 <memcpy>:
 800a8e0:	440a      	add	r2, r1
 800a8e2:	4291      	cmp	r1, r2
 800a8e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8e8:	d100      	bne.n	800a8ec <memcpy+0xc>
 800a8ea:	4770      	bx	lr
 800a8ec:	b510      	push	{r4, lr}
 800a8ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8f6:	4291      	cmp	r1, r2
 800a8f8:	d1f9      	bne.n	800a8ee <memcpy+0xe>
 800a8fa:	bd10      	pop	{r4, pc}

0800a8fc <_free_r>:
 800a8fc:	b538      	push	{r3, r4, r5, lr}
 800a8fe:	4605      	mov	r5, r0
 800a900:	2900      	cmp	r1, #0
 800a902:	d041      	beq.n	800a988 <_free_r+0x8c>
 800a904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a908:	1f0c      	subs	r4, r1, #4
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	bfb8      	it	lt
 800a90e:	18e4      	addlt	r4, r4, r3
 800a910:	f000 f83e 	bl	800a990 <__malloc_lock>
 800a914:	4a1d      	ldr	r2, [pc, #116]	@ (800a98c <_free_r+0x90>)
 800a916:	6813      	ldr	r3, [r2, #0]
 800a918:	b933      	cbnz	r3, 800a928 <_free_r+0x2c>
 800a91a:	6063      	str	r3, [r4, #4]
 800a91c:	6014      	str	r4, [r2, #0]
 800a91e:	4628      	mov	r0, r5
 800a920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a924:	f000 b83a 	b.w	800a99c <__malloc_unlock>
 800a928:	42a3      	cmp	r3, r4
 800a92a:	d908      	bls.n	800a93e <_free_r+0x42>
 800a92c:	6820      	ldr	r0, [r4, #0]
 800a92e:	1821      	adds	r1, r4, r0
 800a930:	428b      	cmp	r3, r1
 800a932:	bf01      	itttt	eq
 800a934:	6819      	ldreq	r1, [r3, #0]
 800a936:	685b      	ldreq	r3, [r3, #4]
 800a938:	1809      	addeq	r1, r1, r0
 800a93a:	6021      	streq	r1, [r4, #0]
 800a93c:	e7ed      	b.n	800a91a <_free_r+0x1e>
 800a93e:	461a      	mov	r2, r3
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	b10b      	cbz	r3, 800a948 <_free_r+0x4c>
 800a944:	42a3      	cmp	r3, r4
 800a946:	d9fa      	bls.n	800a93e <_free_r+0x42>
 800a948:	6811      	ldr	r1, [r2, #0]
 800a94a:	1850      	adds	r0, r2, r1
 800a94c:	42a0      	cmp	r0, r4
 800a94e:	d10b      	bne.n	800a968 <_free_r+0x6c>
 800a950:	6820      	ldr	r0, [r4, #0]
 800a952:	4401      	add	r1, r0
 800a954:	1850      	adds	r0, r2, r1
 800a956:	4283      	cmp	r3, r0
 800a958:	6011      	str	r1, [r2, #0]
 800a95a:	d1e0      	bne.n	800a91e <_free_r+0x22>
 800a95c:	6818      	ldr	r0, [r3, #0]
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	6053      	str	r3, [r2, #4]
 800a962:	4408      	add	r0, r1
 800a964:	6010      	str	r0, [r2, #0]
 800a966:	e7da      	b.n	800a91e <_free_r+0x22>
 800a968:	d902      	bls.n	800a970 <_free_r+0x74>
 800a96a:	230c      	movs	r3, #12
 800a96c:	602b      	str	r3, [r5, #0]
 800a96e:	e7d6      	b.n	800a91e <_free_r+0x22>
 800a970:	6820      	ldr	r0, [r4, #0]
 800a972:	1821      	adds	r1, r4, r0
 800a974:	428b      	cmp	r3, r1
 800a976:	bf04      	itt	eq
 800a978:	6819      	ldreq	r1, [r3, #0]
 800a97a:	685b      	ldreq	r3, [r3, #4]
 800a97c:	6063      	str	r3, [r4, #4]
 800a97e:	bf04      	itt	eq
 800a980:	1809      	addeq	r1, r1, r0
 800a982:	6021      	streq	r1, [r4, #0]
 800a984:	6054      	str	r4, [r2, #4]
 800a986:	e7ca      	b.n	800a91e <_free_r+0x22>
 800a988:	bd38      	pop	{r3, r4, r5, pc}
 800a98a:	bf00      	nop
 800a98c:	24005334 	.word	0x24005334

0800a990 <__malloc_lock>:
 800a990:	4801      	ldr	r0, [pc, #4]	@ (800a998 <__malloc_lock+0x8>)
 800a992:	f7ff bfa3 	b.w	800a8dc <__retarget_lock_acquire_recursive>
 800a996:	bf00      	nop
 800a998:	24005330 	.word	0x24005330

0800a99c <__malloc_unlock>:
 800a99c:	4801      	ldr	r0, [pc, #4]	@ (800a9a4 <__malloc_unlock+0x8>)
 800a99e:	f7ff bf9e 	b.w	800a8de <__retarget_lock_release_recursive>
 800a9a2:	bf00      	nop
 800a9a4:	24005330 	.word	0x24005330

0800a9a8 <_init>:
 800a9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9aa:	bf00      	nop
 800a9ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ae:	bc08      	pop	{r3}
 800a9b0:	469e      	mov	lr, r3
 800a9b2:	4770      	bx	lr

0800a9b4 <_fini>:
 800a9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b6:	bf00      	nop
 800a9b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ba:	bc08      	pop	{r3}
 800a9bc:	469e      	mov	lr, r3
 800a9be:	4770      	bx	lr
